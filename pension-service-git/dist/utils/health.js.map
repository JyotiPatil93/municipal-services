{"version":3,"sources":["../../src/utils/health.js"],"names":["db","query","onHealthCheck","beforeShutdown","Promise","setTimeout","resolve","options","healthChecks","timeout","logger","error"],"mappings":";;;;;;;;;;;;;;AAGA;AACA;AACA;;;sFAEA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAGSA,aAAGC,KAAH,CAAS,UAAT,CAHT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeC,a;;;;;AAMf;;;AAbA;;;;AACA;;;;;;AAaA,SAASC,cAAT,GAA0B;AACxB;AACA;AACA;AACA,SAAO,IAAIC,OAAJ,CAAY,mBAAW;AAC5BC,eAAWC,OAAX,EAAoB,IAApB;AACD,GAFM,CAAP;AAGD;;AAED,IAAMC,UAAU;AACd;AACAC,gBAAc;AACZ,eAAWN,aADC,CACa;AADb,GAFA;;AAMd;AACAO,WAAS,IAPK,EAOC;AACfN,gCARc,EAQE;;AAEhBO,UAAQA,iBAAOC,KAVD,CAUO;AAVP,CAAhB;;kBAaeJ,O","file":"health.js","sourcesContent":["import logger from \"../config/logger\";\nimport db from \"../db\";\n\n// Implement health checks [kubernetes]\n//  - Check DB Connectivity\n//  - Check Kafka Connectivity [TBD]\n\nasync function onHealthCheck() {\n  // checks if the system is healthy, like the db connection is live\n  // resolves, if health, rejects if not\n  return db.query(\"SELECT 1\");\n}\n\n// Delay shutdown for service cleanup via kubernetes\nfunction beforeShutdown() {\n  // given your readiness probes run every 5 second\n  // may be worth using a bigger number so you won't\n  // run into any race conditions\n  return new Promise(resolve => {\n    setTimeout(resolve, 5000);\n  });\n}\n\nconst options = {\n  // healtcheck options\n  healthChecks: {\n    \"/health\": onHealthCheck // a promise returning function indicating service health\n  },\n\n  // cleanup options\n  timeout: 5000, // [optional = 1000] number of milliseconds before forcefull exiting\n  beforeShutdown, // [optional] called before the HTTP server starts its shutdown\n\n  logger: logger.error // [optional] logger function to be called with errors\n};\n\nexport default options;\n"]}