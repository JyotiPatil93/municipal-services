{"version":3,"sources":["../../src/utils/encryption.js"],"names":["algorithm","key","crypto","createHash","update","String","envVariables","PENSION_ENCRYPTION_KEY","digest","substr","iv","randomBytes","encrypt","text","cipher","createCipher","Buffer","from","encrypted","concat","final","toString","decrypt","encryptedText","decipher","createDecipher","decrypted"],"mappings":";;;;;;;AAAA;;;;AACA;;;;;;AAEA,IAAMA,YAAY,aAAlB;AACA;AACA,IAAMC,MAAMC,iBAAOC,UAAP,CAAkB,QAAlB,EAA4BC,MAA5B,CAAmCC,OAAOC,uBAAaC,sBAApB,CAAnC,EAAgFC,MAAhF,CAAuF,QAAvF,EAAiGC,MAAjG,CAAwG,CAAxG,EAA2G,EAA3G,CAAZ;AACA,IAAMC,KAAKR,iBAAOS,WAAP,CAAmB,EAAnB,CAAX;;AAEA;;;;;;;;;;;;;;;;AAgBO,IAAMC,4BAAU,SAAVA,OAAU,CAACC,IAAD,EAAU;AAChC,MAAIC,SAASZ,iBAAOa,YAAP,CAAoBf,SAApB,EAA+BgB,OAAOC,IAAP,CAAYhB,GAAZ,CAA/B,CAAb;AACA,MAAIiB,YAAYJ,OAAOV,MAAP,CAAcS,IAAd,CAAhB;AACAK,cAAYF,OAAOG,MAAP,CAAc,CAACD,SAAD,EAAYJ,OAAOM,KAAP,EAAZ,CAAd,CAAZ;AACA,SAAOF,UAAUG,QAAV,CAAmB,KAAnB,CAAP;AACA,CALM;;AAOA,IAAMC,4BAAU,SAAVA,OAAU,CAACT,IAAD,EAAU;AAChC,MAAIU,gBAAgBP,OAAOC,IAAP,CAAYJ,IAAZ,EAAkB,KAAlB,CAApB;AACA,MAAIW,WAAWtB,iBAAOuB,cAAP,CAAsBzB,SAAtB,EAAiCgB,OAAOC,IAAP,CAAYhB,GAAZ,CAAjC,CAAf;AACA,MAAIyB,YAAYF,SAASpB,MAAT,CAAgBmB,aAAhB,CAAhB;AACAG,cAAYV,OAAOG,MAAP,CAAc,CAACO,SAAD,EAAYF,SAASJ,KAAT,EAAZ,CAAd,CAAZ;AACA,SAAOM,UAAUL,QAAV,EAAP;AACA,CANM","file":"encryption.js","sourcesContent":["import crypto from 'crypto';\nimport envVariables from \"../envVariables\";\n\nconst algorithm = 'aes-256-cbc';\n//const key = crypto.randomBytes(32);\nconst key = crypto.createHash('sha256').update(String(envVariables.PENSION_ENCRYPTION_KEY)).digest('base64').substr(0, 32);\nconst iv = crypto.randomBytes(16);\n\n/* export const encrypt = (text) => {\n let cipher = crypto.createCipheriv('aes-256-cbc', Buffer.from(key), iv);\n let encrypted = cipher.update(text);\n encrypted = Buffer.concat([encrypted, cipher.final()]);\n return encrypted.toString('hex');\n}\n\nexport const decrypt = (text) => {\n \n let encryptedText = Buffer.from(text, 'hex');\n let decipher = crypto.createDecipheriv('aes-256-cbc', Buffer.from(key), iv);\n let decrypted = decipher.update(encryptedText);\n decrypted = Buffer.concat([decrypted, decipher.final()]);\n return decrypted.toString();\n}\n */\nexport const encrypt = (text) => {\n let cipher = crypto.createCipher(algorithm, Buffer.from(key));\n let encrypted = cipher.update(text);\n encrypted = Buffer.concat([encrypted, cipher.final()]);\n return encrypted.toString('hex') ;\n}\n\nexport const decrypt = (text) => {\n let encryptedText = Buffer.from(text, 'hex');\n let decipher = crypto.createDecipher(algorithm, Buffer.from(key));\n let decrypted = decipher.update(encryptedText);\n decrypted = Buffer.concat([decrypted, decipher.final()]);\n return decrypted.toString();\n} \n\n"]}