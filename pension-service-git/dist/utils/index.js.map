{"version":3,"sources":["../../src/utils/index.js"],"names":["uuidv1","require","requestInfoToResponseInfo","requestinfo","success","ResponseInfo","apiId","ver","ts","resMsgId","msgId","status","addIDGenId","requestInfo","idRequests","requestBody","RequestInfo","hostURL","envVariables","EGOV_IDGEN_HOST","endPoint","EGOV_IDGEN_CONTEXT_PATH","EGOV_IDGEN_GENERATE_ENPOINT","idGenResponse","addQueryArg","url","queries","includes","urlParts","split","path","queryParts","length","forEach","key","query","value","newQuery","push","newUrl","join","createWorkFlow","body","processInstances","ProcessInstances","map","tenantId","businessService","businessId","action","comment","assignee","documents","sla","previousStatus","moduleName","logger","debug","JSON","stringify","EGOV_WORKFLOW_HOST","EGOV_WORKFLOW_TRANSITION_ENDPOINT","workflowResponse","searchWorkflow","businessIds","EGOV_WORKFLOW_SEARCH_ENDPOINT","EGOV_WORKFLOW_DEFAULT_LIMIT","saveEmployees","EGOV_PENSION_HOST","EGOV_PENSION_CONTEXT_PATH","EGOV_PENSION_SAVE_EMPLOYEES_ENDPOINT","pensionResponse","searchEmployee","code","EGOV_PENSION_SEARCH_EMPLOYEE_ENDPOINT","employeeResponse","releaseWorkFlow","EGOV_PENSION_RELEASE_WORKFLOW_ENDPOINT","releaseWorkFlowResponse","searchPensionWorkflow","EGOV_PENSION_SEARCH_WORKFLOW_ENDPOINT","getPensionEmployees","name","dob","queryObj","EGOV_PENSION_GET_PENSION_EMPLOYEES_ENDPOINT","searchPensioner","pensionerNumber","EGOV_PENSION_SEARCH_PENSIONER_ENDPOINT","response","searchPensionerForPensionRevision","EGOV_PENSION_SEARCH_PENSIONER_FOR_PENSION_REVISION_ENDPOINT","getPensionRevisions","EGOV_PENSION_GET_PENSION_REVISIONS_ENDPOINT","closeWorkflowByUser","dateOfContingent","employeeOtherDetails","workflowHeaderId","pensionEmployeeId","pensionerId","employeeOtherDetailsAuditId","auditDetails","EGOV_PENSION_CLOSE_WORKFLOW_BY_USER_ENDPOINT","saveEmployeeToPensionNotificationRegister","EGOV_PENSION_SAVE_EMPLOYEE_TO_PENSION_NOTIFICATION_REGISTER_ENDPOINT","getEmployeeDisability","EGOV_PENSION_GET_EMPLOYEE_DISABILITY_ENDPOINT","searchClosedApplication","EGOV_PENSION_SEARCH_CLOSED_APPLICATION_ENDPOINT","closedApplicationResponse","searchApplication","EGOV_PENSION_SEARCH_APPLICATION_ENDPOINT","getEmployeeDetails","codes","names","departments","EGOV_HRMS_HOST","EGOV_HRMS_CONTEXT_PATH","EGOV_HRMS_EMPLOYEE_SEARCH_ENDPOINT","EGOV_HRMS_DEFAULT_LIMIT","getFileDetails","fileStoreIds","String","index","indexOf","substring","EGOV_FILESTORE_HOST","EGOV_FILESTORE_CONTEXT_PATH","EGOV_FILESTORE_URL_ENDPOINT","fileResponse","createUserEventToUser","eventName","eventDescription","uuid","today","Date","fromDate","getFullYear","getMonth","getDate","toDate","events","eventType","EGOV_USER_EVENT_TYPE","description","source","EGOV_USER_EVENT_NAME_SOURCE","actions","actionUrls","eventDetails","convertDateToEpoch","recepient","toRoles","toUsers","EGOV_USER_EVENT_HOST","EGOV_USER_EVENT_CONTEXT_PATH","EGOV_USER_EVENT_CREATE_ENDPOINT","eventResponse","createUserEventToRole","roleCode","getUserEventDetails","recepients","EGOV_USER_EVENT_SEARCH_ENDPOINT","userEventResponse","calculateBenefit","employee","EGOV_PENSION_RULE_ENGINE_HOST","EGOV_PENSION_RULE_ENGINE_CONTEXT_PATH","EGOV_PENSION_RULE_ENGINE_CALCULATE_BENEFIT_ENDPOINT","ruleEngineResponse","getDependentEligibilityForBenefit","dependents","EGOV_PENSION_RULE_ENGINE_GET_DEPENDENT_ELIGIBILITY_FOR_BENEFIT_ENDPOINT","calculateRevisedPension","pensionRevision","EGOV_PENSION_RULE_ENGINE_CALCULATE_REVISED_PENSION_ENDPOINT","loginRequest","username","password","grant_type","scope","userType","loginInstance","axios","create","baseURL","EGOV_USER_HOST","headers","Authorization","apiError","params","URLSearchParams","append","post","EGOV_USER_CONTEXT_PATH","EGOV_USER_GENERATE_ACCESS_TOKEN_ENDPOINT","responseStatus","parseInt","data","hasOwnProperty","error_description","Error","pushEmployeesToPensionNotificationRegister","EGOV_PENSION_PUSH_EMPLOYEES_TO_PENSION_NOTIFICATION_REGISTER_ENDPOINT","createMonthlyPensionRegister","EGOV_PENSION_SCHEDULAR_TENANTID","effectiveYear","effectiveMonth","EGOV_PENSION_CREATE_MONTHLY_PENSION_REGISTER_ENDPOINT","updatePensionRevisionBulk","parameters","modifyDA","EGOV_PENSION_UPDATE_PENSION_REVISION_BULK_SCHEDULAR_IS_DA_MODIFIABLE","modifyIR","EGOV_PENSION_UPDATE_PENSION_REVISION_BULK_SCHEDULAR_IS_IR_MODIFIABLE","modifyFMA","EGOV_PENSION_UPDATE_PENSION_REVISION_BULK_SCHEDULAR_IS_FMA_MODIFIABLE","FMA","Number","EGOV_PENSION_UPDATE_PENSION_REVISION_BULK_SCHEDULAR_MODIFIED_FMA","Parameters","EGOV_PENSION_UPDATE_PENSION_REVISION_BULK_ENDPOINT","convertEpochToDate","dateFromApi","dateEpoch","month","day","year","dateString","dayStartOrEnd","parts","match","DateObj","UTC","setMinutes","getMinutes","getTimezoneOffset","setHours","getHours","setSeconds","getSeconds","et","getTime","e","convertDateToEpochForDeathDate","etAdjustedForDeathDate","adjust530AddForDeathDate","convertDateToEpochForMigration","etAdjusted","adjust530SubForMigration","getEpochForDate","dateSplit","date","adjust530","actualDateNum","adjust530AddForYMD","adjust530AddForDeathRegistration","modifiedDate","modifiedDateNum","adjust530AddForDob","adjust530SubForYMD","epochToYmd","formatted_date","epochToDmy"],"mappings":";;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;AACA;;AAEA;;;;;;AAEO,IAAMA,0BAAS,SAATA,MAAS,GAAM;AAC1B,SAAOC,QAAQ,SAAR,GAAP;AACD,CAFM;;AAIA,IAAMC,gEAA4B,SAA5BA,yBAA4B,CAACC,WAAD,EAAcC,OAAd,EAA0B;AACjE,MAAIC,eAAe;AACjBC,WAAO,EADU;AAEjBC,SAAK,EAFY;AAGjBC,QAAI,CAHa;AAIjBC,cAAU,EAJO;AAKjBC,WAAO,EALU;AAMjBC,YAAQ;AANS,GAAnB;AAQAN,eAAaC,KAAb,GACEH,eAAeA,YAAYG,KAA3B,GAAmCH,YAAYG,KAA/C,GAAuD,EADzD;AAEAD,eAAaE,GAAb,GAAmBJ,eAAeA,YAAYI,GAA3B,GAAiCJ,YAAYI,GAA7C,GAAmD,EAAtE;AACAF,eAAaG,EAAb,GAAkBL,eAAeA,YAAYK,EAA3B,GAAgCL,YAAYK,EAA5C,GAAiD,IAAnE;AACAH,eAAaI,QAAb,GAAwB,WAAxB;AACAJ,eAAaK,KAAb,GACEP,eAAeA,YAAYO,KAA3B,GAAmCP,YAAYO,KAA/C,GAAuD,EADzD;AAEAL,eAAaM,MAAb,GAAsBP,UAAU,YAAV,GAAyB,QAA/C;;AAEA,SAAOC,YAAP;AACD,CAnBM;;AAqBA,IAAMO;AAAA,sFAAa,iBAAOC,WAAP,EAAoBC,UAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AACpBC,uBADoB,GACN;AAChBC,2BAAaH,WADG;AAEhBC;AAFgB,aADM;AAAA;AAAA,mBAME,sBAAY;AACpCG,uBAASC,uBAAaC,eADc;AAEpCC,6BAAaF,uBAAaG,uBAA1B,GACEH,uBAAaI,2BAHqB;AAKpCP;AALoC,aAAZ,CANF;;AAAA;AAMpBQ,yBANoB;AAAA,6CAcjB,mBAAIA,aAAJ,EAAmB,mBAAnB,CAdiB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAb;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAiBA,IAAMC,oCAAc,SAAdA,WAAc,CAACC,GAAD,EAAuB;AAAA,MAAjBC,OAAiB,uEAAP,EAAO;;AAChD,MAAID,OAAOA,IAAIE,QAAJ,CAAa,GAAb,CAAX,EAA8B;AAC5B,QAAMC,WAAWH,IAAII,KAAJ,CAAU,GAAV,CAAjB;AACA,QAAMC,OAAOF,SAAS,CAAT,CAAb;AACA,QAAIG,aAAaH,SAASI,MAAT,GAAkB,CAAlB,GAAsBJ,SAAS,CAAT,EAAYC,KAAZ,CAAkB,GAAlB,CAAtB,GAA+C,EAAhE;AACAH,YAAQO,OAAR,CAAgB,iBAAS;AACvB,UAAMC,MAAMC,MAAMD,GAAlB;AACA,UAAME,QAAQD,MAAMC,KAApB;AACA,UAAMC,WAAcH,GAAd,SAAqBE,KAA3B;AACAL,iBAAWO,IAAX,CAAgBD,QAAhB;AACD,KALD;AAMA,QAAME,SAAST,OAAO,GAAP,GAAaC,WAAWS,IAAX,CAAgB,GAAhB,CAA5B;AACA,WAAOD,MAAP;AACD,GAZD,MAYO;AACL,WAAOd,GAAP;AACD;AACF,CAhBM;;AAkBP;AACO,IAAMgB;AAAA,uFAAiB,kBAAMC,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACxBC,4BADwB,GACLD,KAAKE,gBAAL,CAAsBC,GAAtB,CAA0B,4BAAoB;AACnE,qBAAO;AACLC,0BAAUH,iBAAiBG,QADtB;AAELC,iCAAiBJ,iBAAiBI,eAF7B;AAGLC,4BAAYL,iBAAiBK,UAHxB,EAGmC;AACxCC,wBAAQN,iBAAiBM,MAJpB;AAKLC,yBAASP,iBAAiBO,OAAjB,IAA0B,IAA1B,GAA+BP,iBAAiBO,OAAhD,GAAwD,IAL5D;AAMLC,0BAAU,IANL;AAOLC,2BAAWT,iBAAiBS,SAAjB,IAA4B,IAA5B,GAAkCT,iBAAiBS,SAAnD,GAA6D,EAPnE;AAQLC,qBAAK,CARA;AASLC,gCAAgB,IATX;AAULC,4BAAYZ,iBAAiBI;AAVxB,eAAP;AAYD,aAbsB,CADK;AAexBhC,uBAfwB,GAeV;AAChBC,2BAAa0B,KAAK1B,WADF;AAEhB4B,gCAAkBD;AAFF,aAfU;;AAmB5Ba,6BAAOC,KAAP,CAAa,aAAb,EAA4BC,KAAKC,SAAL,CAAe5C,WAAf,CAA5B;;AAnB4B;AAAA,mBAqBC,sBAAY;AACvCE,uBAASC,uBAAa0C,kBADiB;AAEvCxC,wBAAUF,uBAAa2C,iCAFgB;AAGvC9C;AAHuC,aAAZ,CArBD;;AAAA;AAqBxB+C,4BArBwB;AAAA,8CA2BrBA,gBA3BqB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjB;;AAAA;AAAA;AAAA;AAAA,GAAN;;AA8BA,IAAMC;AAAA,uFAAiB,kBAAOlD,WAAP,EAAoBiC,QAApB,EAA6BkB,WAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AACxBjD,uBADwB,GACV;AAChBC,2BAAaH;AADG,aADU;AAAA;AAAA,mBAKC,sBAAY;AACvCI,uBAASC,uBAAa0C,kBADiB;AAEvCxC,wBAAaF,uBAAa+C,6BAA1B,kBACanB,QADb,qBACqCkB,WADrC,eAC0D9C,uBAAagD,2BAHhC;AAIvCnD;AAJuC,aAAZ,CALD;;AAAA;AAKxB+C,4BALwB;AAAA,8CAYrBA,gBAZqB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjB;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAeP;AACO,IAAMK;AAAA,uFAAgB,kBAAMzB,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACvB3B,uBADuB,GACX2B,IADW;AAAA;AAAA,mBAKE,sBAAY;AACtCzB,uBAASC,uBAAakD,iBADgB;AAEtChD,6BAAaF,uBAAamD,yBAA1B,GACEnD,uBAAaoD,oCAHuB;AAKtCvD;AALsC,aAAZ,CALF;;AAAA;AAKtBwD,2BALsB;AAAA,8CAYnBA,eAZmB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAhB;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAeC,IAAMC;AAAA,uFAAiB,kBAAO3D,WAAP,EAAoBiC,QAApB,EAA6B2B,IAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AACzB1D,uBADyB,GACX;AAChBC,2BAAaH;AADG,aADW;AAAA;AAAA,mBAIA,sBAAY;AACvCI,uBAASC,uBAAakD,iBADiB;AAEvChD,6BAAaF,uBAAamD,yBAA1B,GACEnD,uBAAawD,qCADf,kBAEa5B,QAFb,cAE8B2B,IAJS;AAKvC1D;AALuC,aAAZ,CAJA;;AAAA;AAIzB4D,4BAJyB;AAAA,8CAYtBA,gBAZsB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjB;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAeD,IAAMC;AAAA,uFAAkB,kBAAMlC,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACzBC,4BADyB,GACND,KAAKE,gBAAL,CAAsBC,GAAtB,CAA0B,4BAAoB;AACnE,qBAAO;AACLG,4BAAYL,iBAAiBK,UADxB,CACmC;AADnC,eAAP;AAGD,aAJsB,CADM;AAMzBjC,uBANyB,GAMX;AAChBC,2BAAa0B,KAAK1B,WADF;AAEhB4B,gCAAkBD;AAFF,aANW;AAAA;AAAA,mBAWO,sBAAY;AAC9C1B,uBAASC,uBAAakD,iBADwB;AAE9ChD,6BAAaF,uBAAamD,yBAA1B,GACEnD,uBAAa2D,sCAH+B;AAK9C9D;AAL8C,aAAZ,CAXP;;AAAA;AAWzB+D,mCAXyB;AAAA,8CAkBtBA,uBAlBsB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAlB;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAqBA,IAAMC;AAAA,uFAAwB,kBAAOlE,WAAP,EAAoBiC,QAApB,EAA6BkB,WAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAC/BjD,uBAD+B,GACjB;AAChBC,2BAAaH;AADG,aADiB;AAAA;AAAA,mBAKN,sBAAY;AACvCI,uBAASC,uBAAakD,iBADiB;AAEvChD,6BAAaF,uBAAamD,yBAA1B,GACEnD,uBAAa8D,qCADf,kBAEalC,QAFb,qBAEqCkB,WAJE;AAKvCjD;AALuC,aAAZ,CALM;;AAAA;AAK/B+C,4BAL+B;AAAA,8CAa5BA,gBAb4B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAxB;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAgBA,IAAMmB;AAAA,uFAAsB,kBAAQpE,WAAR,EAAoBiC,QAApB,EAA6B2B,IAA7B,EAAkCS,IAAlC,EAAuCC,GAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAC7BpE,uBAD6B,GACf;AAChBC,2BAAaH;AADG,aADe;AAI7BuE,oBAJ6B,iBAIRtC,QAJQ;;AAKjC,gBAAG2B,IAAH,EAAQ;AACNW,yBAAYA,QAAZ,cAA6BX,IAA7B;AACD;AACD,gBAAGS,IAAH,EAAQ;AACNE,yBAAYA,QAAZ,cAA6BF,IAA7B;AACD;AACD,gBAAGC,GAAH,EAAO;AACLC,yBAAYA,QAAZ,aAA4BD,GAA5B;AACD;AAbgC;AAAA,mBAcJ,sBAAY;AACvClE,uBAASC,uBAAakD,iBADiB;AAEvChD,6BAAaF,uBAAamD,yBAA1B,GACGnD,uBAAamE,2CADhB,SAEID,QAJmC;AAKvCrE;AALuC,aAAZ,CAdI;;AAAA;AAc7B4D,4BAd6B;AAAA,8CAsB1BA,gBAtB0B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAtB;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAyBA,IAAMW;AAAA,uFAAkB,kBAAQzE,WAAR,EAAoBiC,QAApB,EAA6ByC,eAA7B,EAA6CL,IAA7C,EAAkDC,GAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AACzBpE,uBADyB,GACX;AAChBC,2BAAaH;AADG,aADW;AAKzBuE,oBALyB,GAKhB,EALgB;;;AAO7B,gBAAGtC,QAAH,EAAY;AACVsC,yBAAYA,QAAZ,iBAAgCtC,QAAhC;AACD;AACD,gBAAGyC,eAAH,EAAmB;AACjBH,yBAAYA,QAAZ,yBAAwCG,eAAxC;AACD;AACD,gBAAGL,IAAH,EAAQ;AACNE,yBAAYA,QAAZ,cAA6BF,IAA7B;AACD;AACD,gBAAGC,GAAH,EAAO;AACLC,yBAAYA,QAAZ,aAA4BD,GAA5B;AACD;;AAlB4B;AAAA,mBAoBR,sBAAY;AAC/BlE,uBAASC,uBAAakD,iBADS;AAE/BhD,6BAAaF,uBAAamD,yBAA1B,GACGnD,uBAAasE,sCADhB,SAEIJ,QAJ2B;AAK/BrE;AAL+B,aAAZ,CApBQ;;AAAA;AAoBzB0E,oBApByB;AAAA,8CA4BtBA,QA5BsB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAlB;;AAAA;AAAA;AAAA;AAAA,GAAN;;AA+BA,IAAMC;AAAA,wFAAoC,mBAAQ7E,WAAR,EAAoBiC,QAApB,EAA6ByC,eAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAC3CxE,uBAD2C,GAC7B;AAChBC,2BAAaH;AADG,aAD6B;AAAA;AAAA,mBAK1B,sBAAY;AAC/BI,uBAASC,uBAAakD,iBADS;AAE/BhD,6BAAaF,uBAAamD,yBAA1B,GACGnD,uBAAayE,2DADhB,kBAEa7C,QAFb,yBAEyCyC,eAJV;AAK/BxE;AAL+B,aAAZ,CAL0B;;AAAA;AAK3C0E,oBAL2C;AAAA,+CAaxCA,QAbwC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAApC;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAgBA,IAAMG;AAAA,wFAAsB,mBAAQ/E,WAAR,EAAoBiC,QAApB,EAA6ByC,eAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAC7BxE,uBAD6B,GACf;AAChBC,2BAAaH;AADG,aADe;AAAA;AAAA,mBAKZ,sBAAY;AAC/BI,uBAASC,uBAAakD,iBADS;AAE/BhD,6BAAaF,uBAAamD,yBAA1B,GACGnD,uBAAa2E,2CADhB,kBAEa/C,QAFb,yBAEyCyC,eAJV;AAK/BxE;AAL+B,aAAZ,CALY;;AAAA;AAK7B0E,oBAL6B;AAAA,+CAa1BA,QAb0B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAtB;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAgBA,IAAMK;AAAA,wFAAsB,mBAAMpD,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAC7BC,4BAD6B,GACVD,KAAKE,gBAAL,CAAsBC,GAAtB,CAA0B,4BAAoB;AACnE,qBAAO;AACLC,0BAAUH,iBAAiBG,QADtB;AAELC,iCAAiBJ,iBAAiBI,eAF7B;AAGLC,4BAAYL,iBAAiBK,UAHxB;AAIL+C,kCAAkBpD,iBAAiBqD,oBAAjB,CAAsCD,gBAJnD,EAIoE;AACzExC,4BAAYZ,iBAAiBI,eALxB;AAMLkD,kCAAkB,EANb;AAOLC,mCAAmB,EAPd;AAQLC,6BAAa,EARR;AASLC,6CAA6B,EATxB;AAULC,8BAAc;AAVT,eAAP;AAYD,aAbsB,CADU;AAgB5BtF,uBAhB4B,GAgBd;AACjBC,2BAAa0B,KAAK1B,WADD;AAEjB4B,gCAAkBD;AAFD,aAhBc;;;AAqBhCa,6BAAOC,KAAP,CAAaC,KAAKC,SAAL,CAAe5C,WAAf,CAAb;;AArBgC;AAAA,mBAuBJ,sBAAY;AACtCE,uBAASC,uBAAakD,iBADgB;AAEtChD,6BAAaF,uBAAamD,yBAA1B,GACEnD,uBAAaoF,4CAHuB;AAKtCvF;AALsC,aAAZ,CAvBI;;AAAA;AAuB5BwD,2BAvB4B;;AA8BhCf,6BAAOC,KAAP,CAAaC,KAAKC,SAAL,CAAeY,eAAf,CAAb;AA9BgC,+CA+BzBA,eA/ByB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAtB;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAkCC,IAAMgC;AAAA,wFAA4C,mBAAM7D,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACpD3B,uBADoD,GACxC2B,IADwC;AAAA;AAAA,mBAE3B,sBAAY;AACtCzB,uBAASC,uBAAakD,iBADgB;AAEtChD,6BAAaF,uBAAamD,yBAA1B,GACEnD,uBAAasF,oEAHuB;AAKtCzF;AALsC,aAAZ,CAF2B;;AAAA;AAEnDwD,2BAFmD;AAAA,+CAUhDA,eAVgD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA5C;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAaA,IAAMkC;AAAA,wFAAwB,mBAAQ5F,WAAR,EAAoBiC,QAApB,EAA6B2B,IAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAChC1D,uBADgC,GAClB;AAChBC,2BAAaH;AADG,aADkB;AAAA;AAAA,mBAKf,sBAAY;AAC/BI,uBAASC,uBAAakD,iBADS;AAE/BhD,6BAAaF,uBAAamD,yBAA1B,GACGnD,uBAAawF,6CADhB,kBAEa5D,QAFb,cAE8B2B,IAJC;AAK/B1D;AAL+B,aAAZ,CALe;;AAAA;AAKhC0E,oBALgC;AAAA,+CAa7BA,QAb6B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAxB;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAgBD,IAAMkB;AAAA,wFAA0B,mBAAQ9F,WAAR,EAAoBiC,QAApB,EAA6BC,eAA7B,EAA6CC,UAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AACjCjC,uBADiC,GACnB;AAChBC,2BAAaH;AADG,aADmB;AAIjCuE,oBAJiC,iBAIZtC,QAJY;;;AAMrC,gBAAGC,eAAH,EAAmB;AACjBqC,yBAAYA,QAAZ,yBAAwCrC,eAAxC;AACD;AACD,gBAAGC,UAAH,EAAc;AACZoC,yBAAYA,QAAZ,oBAAmCpC,UAAnC;AACD;;AAXoC;AAAA,mBAaC,sBAAY;AAChD/B,uBAASC,uBAAakD,iBAD0B;AAEhDhD,6BAAaF,uBAAamD,yBAA1B,GACGnD,uBAAa0F,+CADhB,SAEIxB,QAJ4C;AAKhDrE;AALgD,aAAZ,CAbD;;AAAA;AAajC8F,qCAbiC;AAAA,+CAqB9BA,yBArB8B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA1B;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAwBA,IAAMC;AAAA,wFAAoB,mBAAQjG,WAAR,EAAoBiC,QAApB,EAA6B2B,IAA7B,EAAkCzB,UAAlC,EAA6CD,eAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAC3BhC,uBAD2B,GACb;AAChBC,2BAAaH;AADG,aADa;AAI3BuE,oBAJ2B,GAIlB,EAJkB;;;AAM/B,gBAAGtC,QAAH,EAAY;AACVsC,yBAAYA,QAAZ,iBAAgCtC,QAAhC;AACD;AACD,gBAAG2B,IAAH,EAAQ;AACNW,yBAAYA,QAAZ,cAA6BX,IAA7B;AACD;AACD,gBAAGzB,UAAH,EAAc;AACZoC,yBAAYA,QAAZ,oBAAmCpC,UAAnC;AACD;AACD,gBAAGD,eAAH,EAAmB;AACjBqC,yBAAYA,QAAZ,yBAAwCrC,eAAxC;AACD;;AAjB8B;AAAA,mBAmBO,sBAAY;AAChD9B,uBAASC,uBAAakD,iBAD0B;AAEhDhD,6BAAaF,uBAAamD,yBAA1B,GACGnD,uBAAa6F,wCADhB,SAEI3B,QAJ4C;AAKhDrE;AALgD,aAAZ,CAnBP;;AAAA;AAmB3B8F,qCAnB2B;AAAA,+CA2BxBA,yBA3BwB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAApB;;AAAA;AAAA;AAAA;AAAA,GAAN;;AA8BP;AACO,IAAMG;AAAA,wFAAqB,mBAAQnG,WAAR,EAAoBiC,QAApB;AAAA,QAA6BmE,KAA7B,uEAAmC,EAAnC;AAAA,QAAsCC,KAAtC,uEAA4C,EAA5C;AAAA,QAA+CC,WAA/C,uEAA2D,EAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAC5BpG,uBAD4B,GACd;AAChBC,2BAAaH;AADG,aADc;AAI5BsB,iBAJ4B,GAItB,EAJsB;;AAKhC,gBAAG8E,SAAO,EAAV,EAAa;AACX9E,sBAASA,KAAT,eAAwB8E,KAAxB;AACD;AACD,gBAAGC,SAAO,EAAV,EAAa;AACX/E,sBAASA,KAAT,eAAwB+E,KAAxB;AACD;AACD,gBAAGC,eAAa,EAAhB,EAAmB;AACjBhF,sBAASA,KAAT,qBAA8BgF,WAA9B;AACD;AAb+B;AAAA,mBAcH,sBAAY;AACvClG,uBAASC,uBAAakG,cADiB;AAEvChG,6BAAaF,uBAAamG,sBAA1B,GACGnG,uBAAaoG,kCADhB,eAEUpG,uBAAaqG,uBAFvB,kBAE2DzE,QAF3D,GAEsEX,KAJ/B;AAKvCpB;AALuC,aAAZ,CAdG;;AAAA;AAc5B4D,4BAd4B;AAAA,+CAsBzBA,gBAtByB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAArB;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAyBP;AACO,IAAM6C;AAAA,wFAAiB,mBAAQ1E,QAAR,EAAiB2E,YAAjB,EAA8B5G,WAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAC5B,gBAAI6G,OAAO5E,QAAP,EAAiBnB,QAAjB,CAA0B,GAA1B,CAAJ,EAAmC;AAC7BgG,mBAD6B,GACvBD,OAAO5E,QAAP,EAAiB8E,OAAjB,CAAyB,GAAzB,CADuB;;AAEjC9E,yBAAS4E,OAAO5E,QAAP,EAAiB+E,SAAjB,CAA2B,CAA3B,EAA6BF,KAA7B,CAAT;AACD;AACD;;;;;;;AAL4B;AAAA,mBAYH,yBAAe;AACtC1G,uBAASC,uBAAa4G,mBADgB;AAEtC1G,6BAAaF,uBAAa6G,2BAA1B,GACG7G,uBAAa8G,2BADhB,kBAEalF,QAFb,sBAEsC2E,YAJA,CAIc;AACpD;AALsC,aAAf,CAZG;;AAAA;AAYxBQ,wBAZwB;AAAA,+CAoBrBA,YApBqB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjB;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAuBP;AACO,IAAMC;AAAA,wFAAwB,mBAAOxF,IAAP,EAAYI,QAAZ,EAAqBqF,SAArB,EAA+BC,gBAA/B,EAAgDC,IAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAC/BC,iBAD+B,GACzB,IAAIC,IAAJ,EADyB;AAE/BC,oBAF+B,GAEnBF,MAAMG,WAAN,EAFmB,UAEIH,MAAMI,QAAN,KAAiB,CAFrB,WAE0BJ,MAAMK,OAAN,KAAgB,CAF1C;AAG/BC,kBAH+B,GAGrBN,MAAMG,WAAN,EAHqB,UAGEH,MAAMI,QAAN,KAAiB,CAHnB,WAGwBJ,MAAMK,OAAN,KAAgB,CAHxC;AAK/BE,kBAL+B,GAKxB,EALwB;;AAMnCA,mBAAOvG,IAAP,CACE;AACAQ,wBAAUA,QADV;AAEAgG,yBAAW5H,uBAAa6H,oBAFxB;AAGAC,2BAAaZ,gBAHb;AAIAlD,oBAAMiD,SAJN;AAKAc,sBAAQ/H,uBAAagI,2BALrB;AAMAC,uBAAS;AACPC,4BAAY;AADL,eANT;AASAC,4BAAc;AACZb,0BAAUc,mBAAmBd,QAAnB,EAA4B,KAA5B,CADE;AAEZI,wBAAQU,mBAAmBV,MAAnB,EAA0B,KAA1B;AAFI,eATd;AAaAW,yBAAW;AACTC,yBAAS,EADA;AAETC,yBAAS,CAACpB,IAAD;AAFA;AAbX,aADF;AAoBItH,uBA1B+B,GA0BjB;AAChBC,2BAAa0B,KAAK1B,WADF;AAEhB6H,sBAAQA;AAFQ,aA1BiB;;AA8BnCrF,6BAAOC,KAAP,CAAa,kBAAb,EAAiCC,KAAKC,SAAL,CAAe5C,WAAf,CAAjC;;AA9BmC;AAAA,mBAgCT,sBAAY;AACpCE,uBAASC,uBAAawI,oBADc;AAEpCtI,6BAAaF,uBAAayI,4BAA1B,GACEzI,uBAAa0I,+BAHqB;AAKpC7I;AALoC,aAAZ,CAhCS;;AAAA;AAgC/B8I,yBAhC+B;AAAA,+CAwC5BA,aAxC4B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAxB;;AAAA;AAAA;AAAA;AAAA,GAAN;;AA2CA,IAAMC;AAAA,wFAAwB,mBAAOpH,IAAP,EAAYI,QAAZ,EAAqBqF,SAArB,EAA+BC,gBAA/B,EAAgD2B,QAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAC/BzB,iBAD+B,GACzB,IAAIC,IAAJ,EADyB;AAE/BC,oBAF+B,GAEnBF,MAAMG,WAAN,EAFmB,UAEIH,MAAMI,QAAN,KAAiB,CAFrB,WAE0BJ,MAAMK,OAAN,KAAgB,CAF1C;AAG/BC,kBAH+B,GAGrBN,MAAMG,WAAN,EAHqB,UAGEH,MAAMI,QAAN,KAAiB,CAHnB,WAGwBJ,MAAMK,OAAN,KAAgB,CAHxC;AAK/BE,kBAL+B,GAKxB,EALwB;;AAMnCA,mBAAOvG,IAAP,CACE;AACEQ,wBAAUA,QADZ;AAEEgG,yBAAW5H,uBAAa6H,oBAF1B;AAGEC,2BAAaZ,gBAHf;AAIElD,oBAAMiD,SAJR;AAKEc,sBAAQ/H,uBAAagI,2BALvB;AAMEC,uBAAS;AACPC,4BAAY;AADL,eANX;AASEC,4BAAc;AACZb,0BAAUc,mBAAmBd,QAAnB,EAA4B,KAA5B,CADE;AAEZI,wBAAQU,mBAAmBV,MAAnB,EAA0B,KAA1B;AAFI,eAThB;AAaEW,yBAAW;AACTC,yBAAS,CAACO,QAAD,CADA;AAETN,yBAAS;AAFA;AAbb,aADF;AAoBI1I,uBA1B+B,GA0BjB;AAChBC,2BAAa0B,KAAK1B,WADF;AAEhB6H,sBAAQA;AAFQ,aA1BiB;AAAA;AAAA,mBAgCT,sBAAY;AACpC5H,uBAASC,uBAAawI,oBADc;AAEpCtI,6BAAaF,uBAAayI,4BAA1B,GACEzI,uBAAa0I,+BAHqB;AAKpC7I;AALoC,aAAZ,CAhCS;;AAAA;AAgC/B8I,yBAhC+B;AAAA,+CAwC5BA,aAxC4B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAxB;;AAAA;AAAA;AAAA;AAAA,GAAN;;AA2CA,IAAMG;AAAA,wFAAsB,mBAAQnJ,WAAR,EAAoBiC,QAApB,EAA6BmH,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAC7BlJ,uBAD6B,GACf;AAChBC,2BAAaH;AADG,aADe;AAAA;AAAA,mBAKH,sBAAY;AACxCI,uBAASC,uBAAawI,oBADkB;AAExCtI,6BAAaF,uBAAayI,4BAA1B,GACGzI,uBAAagJ,+BADhB,kBAEapH,QAFb,oBAEoCmH,UAJI;AAKxClJ;AALwC,aAAZ,CALG;;AAAA;AAK7BoJ,6BAL6B;AAAA,+CAa1BA,iBAb0B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAtB;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAgBP;AACO,IAAMC;AAAA,wFAAmB,mBAAM1H,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAC1BC,4BAD0B,GACPD,KAAKE,gBAAL,CAAsBC,GAAtB,CAA0B,4BAAoB;AACnE,qBAAO;AACLC,0BAAUH,iBAAiBG,QADtB;AAELuH,0BAAU1H,iBAAiB0H;AAFtB,eAAP;AAID,aALsB,CADO;AAO1BtJ,uBAP0B,GAOZ;AAChBC,2BAAa0B,KAAK1B,WADF;AAEhB4B,gCAAkBD;AAFF,aAPY;;AAW9Ba,6BAAOC,KAAP,CAAa,aAAb,EAA4BC,KAAKC,SAAL,CAAe5C,WAAf,CAA5B;;AAX8B;AAAA,mBAaC,sBAAY;AACzCE,uBAASC,uBAAaoJ,6BADmB;AAEzClJ,6BAAaF,uBAAaqJ,qCAA1B,GACErJ,uBAAasJ,mDAH0B;AAKzCzJ;AALyC,aAAZ,CAbD;;AAAA;AAa1B0J,8BAb0B;AAAA,+CAuBvBA,kBAvBuB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAnB;;AAAA;AAAA;AAAA;AAAA,GAAN;;AA2BA,IAAMC;AAAA,wFAAoC,mBAAMhI,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAC3CC,4BAD2C,GACxBD,KAAKE,gBAAL,CAAsBC,GAAtB,CAA0B,4BAAoB;AACnE,qBAAO;AACLC,0BAAUH,iBAAiBG,QADtB;AAEL6H,4BAAYhI,iBAAiBgI;AAFxB,eAAP;AAID,aALsB,CADwB;AAO3C5J,uBAP2C,GAO7B;AAChBC,2BAAa0B,KAAK1B,WADF;AAEhB4B,gCAAkBD;AAFF,aAP6B;;AAW/Ca,6BAAOC,KAAP,CAAa,aAAb,EAA4BC,KAAKC,SAAL,CAAe5C,WAAf,CAA5B;;AAX+C;AAAA,mBAahB,sBAAY;AACzCE,uBAASC,uBAAaoJ,6BADmB;AAEzClJ,6BAAaF,uBAAaqJ,qCAA1B,GACErJ,uBAAa0J,uEAH0B;AAKzC7J;AALyC,aAAZ,CAbgB;;AAAA;AAa3C0J,8BAb2C;AAAA,+CAwBxCA,kBAxBwC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAApC;;AAAA;AAAA;AAAA;AAAA,GAAN;;AA2BA,IAAMI;AAAA,wFAA0B,mBAAMnI,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACjCC,4BADiC,GACdD,KAAKE,gBAAL,CAAsBC,GAAtB,CAA0B,4BAAoB;AACnE,qBAAO;AACLC,0BAAUH,iBAAiBG,QADtB;AAELgI,iCAAiBnI,iBAAiBmI;AAF7B,eAAP;AAID,aALsB,CADc;AAOjC/J,uBAPiC,GAOnB;AAChBC,2BAAa0B,KAAK1B,WADF;AAEhB4B,gCAAkBD;AAFF,aAPmB;;AAWrCa,6BAAOC,KAAP,CAAa,aAAb,EAA4BC,KAAKC,SAAL,CAAe5C,WAAf,CAA5B;;AAXqC;AAAA,mBAaN,sBAAY;AACzCE,uBAASC,uBAAaoJ,6BADmB;AAEzClJ,6BAAaF,uBAAaqJ,qCAA1B,GACErJ,uBAAa6J,2DAH0B;AAKzChK;AALyC,aAAZ,CAbM;;AAAA;AAajC0J,8BAbiC;AAAA,+CAwB9BA,kBAxB8B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA1B;;AAAA;AAAA;AAAA;AAAA,GAAN;;AA2BP;AACO,IAAMO;AAAA,wFAAe,mBAAOC,QAAP,EAAgBC,QAAhB,EAAyBC,UAAzB,EAAoCC,KAApC,EAA0CtI,QAA1C,EAAmDuI,QAAnD;AAAA;;AAAA;AAAA;AAAA;AAAA;AACpBC,yBADoB,GACJC,gBAAMC,MAAN,CAAa;AACjCC,uBAASvK,uBAAawK,cADW,EACI;AACrCC,uBAAS;AACP,gCAAgB,mCADT;AAEPC,+BAAe;AAFR;AAFwB,aAAb,CADI;AAStBC,oBATsB,GASX,WATW;AAUtBC,kBAVsB,GAUb,IAAIC,eAAJ,EAVa;;AAW1BD,mBAAOE,MAAP,CAAc,UAAd,EAAyBf,QAAzB;AACAa,mBAAOE,MAAP,CAAc,UAAd,EAA0Bd,QAA1B;AACAY,mBAAOE,MAAP,CAAc,YAAd,EAA2Bb,UAA3B;AACAW,mBAAOE,MAAP,CAAc,OAAd,EAAuBZ,KAAvB;AACAU,mBAAOE,MAAP,CAAc,UAAd,EAA0BlJ,QAA1B;AACAgJ,mBAAOE,MAAP,CAAc,UAAd,EAA0BX,QAA1B;;AAhB0B;AAAA;AAAA,mBAmBDC,cAAcW,IAAd,MAAsB/K,uBAAagL,sBAAnC,GACrBhL,uBAAaiL,wCADQ,EAEnBL,MAFmB,CAnBC;;AAAA;AAmBlBrG,oBAnBkB;AAuBlB2G,0BAvBkB,GAuBDC,SAAS5G,SAAS9E,MAAlB,EAA0B,EAA1B,CAvBC;;AAAA,kBAwBpByL,mBAAmB,GAAnB,IAA0BA,mBAAmB,GAxBzB;AAAA;AAAA;AAAA;;AAAA,+CAyBf3G,SAAS6G,IAzBM;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,8BA4BC,cAAM7G,QA5BP,EA4BhB6G,IA5BgB,mBA4BhBA,IA5BgB,EA4BV3L,MA5BU,mBA4BVA,MA5BU;;AA6BxB,gBAAIA,WAAW,GAAf,EAAoB;AAClBkL,yBAAYS,KAAKC,cAAL,CAAoB,mBAApB,KAA4CD,KAAKE,iBAAlD,IAAwEX,QAAnF;AACD;;AA/BuB;AAAA,kBAkCpB,IAAIY,KAAJ,CAAUZ,QAAV,CAlCoB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAf;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAqCA,IAAMa;AAAA,wFAA6C,mBAAMhK,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACpD3B,uBADoD,GACxC2B,IADwC;AAAA;AAAA,mBAElC,sBAAY;AAC/BzB,uBAASC,uBAAakD,iBADS;AAE/BhD,6BAAaF,uBAAamD,yBAA1B,GACEnD,uBAAayL,qEAHgB;AAK/B5L;AAL+B,aAAZ,CAFkC;;AAAA;AAEnD0E,oBAFmD;AAAA,+CAUhDA,QAVgD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA7C;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAaC,IAAMmH;AAAA,wFAA+B,mBAAMlK,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACvCC,4BADuC,GACtB,EADsB;;AAE3CA,6BAAiBL,IAAjB,CAAsB;AACpBQ,wBAAU5B,uBAAa2L,+BADH;AAEpBC,6BAAe,IAAIvE,IAAJ,GAAWE,WAAX,EAFK;AAGpBsE,8BAAgB,IAAIxE,IAAJ,GAAWG,QAAX,KAAsB;AAHlB,aAAtB;AAMK3H,uBARsC,GAQxB;AACjBC,2BAAa0B,KAAK1B,WADD;AAEjB4B,gCAAkBD;AAFD,aARwB;AAAA;AAAA,mBAetB,sBAAY;AAC/B1B,uBAASC,uBAAakD,iBADS;AAE/BhD,6BAAaF,uBAAamD,yBAA1B,GACEnD,uBAAa8L,qDAHgB;AAK/BjM;AAL+B,aAAZ,CAfsB;;AAAA;AAevC0E,oBAfuC;AAAA,+CAuBnCA,QAvBmC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA/B;;AAAA;AAAA;AAAA;AAAA,GAAN;;AA0BA,IAAMwH;AAAA,wFAA4B,mBAAMvK,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACpCwK,sBADoC,GACzB;AACbpK,wBAAU5B,uBAAa2L,+BADV;AAEbC,6BAAe,IAAIvE,IAAJ,GAAWE,WAAX,EAFF;AAGbsE,8BAAgB,IAAIxE,IAAJ,GAAWG,QAAX,KAAsB,CAHzB;AAIbyE,wBAAUjM,uBAAakM,oEAJV;AAKbC,wBAAUnM,uBAAaoM,oEALV;AAMbC,yBAAWrM,uBAAasM,qEANX;AAObC,mBAAKC,OAAOxM,uBAAayM,gEAApB;AAPQ,aADyB;AAUnC5M,uBAVmC,GAUrB;AACjBC,2BAAa0B,KAAK1B,WADD;AAEjB4M,0BAAYV;AAFK,aAVqB;AAAA;AAAA,mBAiBnB,sBAAY;AAC/BjM,uBAASC,uBAAakD,iBADS;AAE/BhD,6BAAaF,uBAAamD,yBAA1B,GACEnD,uBAAa2M,kDAHgB;AAK/B9M;AAL+B,aAAZ,CAjBmB;;AAAA;AAiBpC0E,oBAjBoC;AAAA,+CAyBhCA,QAzBgC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA5B;;AAAA;AAAA;AAAA;AAAA,GAAN;;AA8BD,IAAMqI,kDAAqB,SAArBA,kBAAqB,YAAa;AAC7C,MAAMC,cAAc,IAAIxF,IAAJ,CAASyF,SAAT,CAApB;AACA,MAAIC,QAAQF,YAAYrF,QAAZ,KAAyB,CAArC;AACA,MAAIwF,MAAMH,YAAYpF,OAAZ,EAAV;AACA,MAAIwF,OAAOJ,YAAYtF,WAAZ,EAAX;AACAwF,UAAQ,CAACA,QAAQ,CAAR,GAAY,EAAZ,GAAiB,GAAlB,IAAyBA,KAAjC;AACAC,QAAM,CAACA,MAAM,CAAN,GAAU,EAAV,GAAe,GAAhB,IAAuBA,GAA7B;AACA,SAAUA,GAAV,SAAiBD,KAAjB,SAA0BE,IAA1B;AACD,CARM;;AAUA,IAAM7E,kDAAqB,SAArBA,kBAAqB,CAAC8E,UAAD,EAA0C;AAAA,MAA7BC,aAA6B,uEAAb,QAAa;;AAC1E;AACA,MAAI;;AAEF,QAAMC,QAAQF,WAAWG,KAAX,CAAiB,6BAAjB,CAAd;AACA,QAAMC,UAAU,IAAIjG,IAAJ,CAASA,KAAKkG,GAAL,CAASH,MAAM,CAAN,CAAT,EAAmBA,MAAM,CAAN,IAAW,CAA9B,EAAiCA,MAAM,CAAN,CAAjC,CAAT,CAAhB;AACAE,YAAQE,UAAR,CAAmBF,QAAQG,UAAR,KAAuBH,QAAQI,iBAAR,EAA1C;;AAEA,QAAIP,kBAAkB,QAAtB,EAAgC;AAC9BG,cAAQK,QAAR,CAAiBL,QAAQM,QAAR,KAAqB,EAAtC;AACAN,cAAQO,UAAR,CAAmBP,QAAQQ,UAAR,KAAuB,CAA1C;AACD;AACD,QAAIC,KAAKT,QAAQU,OAAR,EAAT;;AAEA;;AAEA,WAAOD,EAAP;AAED,GAhBD,CAgBE,OAAOE,CAAP,EAAU;AACV,WAAOf,UAAP;AACD;AACF,CArBM;;AAuBA,IAAMgB,0EAAiC,SAAjCA,8BAAiC,CAAChB,UAAD,EAA0C;AAAA,MAA7BC,aAA6B,uEAAb,QAAa;;AACtF;AACA,MAAI;;AAEF,QAAMC,QAAQF,WAAWG,KAAX,CAAiB,6BAAjB,CAAd;AACA,QAAMC,UAAU,IAAIjG,IAAJ,CAASA,KAAKkG,GAAL,CAASH,MAAM,CAAN,CAAT,EAAmBA,MAAM,CAAN,IAAW,CAA9B,EAAiCA,MAAM,CAAN,CAAjC,CAAT,CAAhB;AACAE,YAAQE,UAAR,CAAmBF,QAAQG,UAAR,KAAuBH,QAAQI,iBAAR,EAA1C;;AAEA,QAAIP,kBAAkB,QAAtB,EAAgC;AAC9BG,cAAQK,QAAR,CAAiBL,QAAQM,QAAR,KAAqB,EAAtC;AACAN,cAAQO,UAAR,CAAmBP,QAAQQ,UAAR,KAAuB,CAA1C;AACD;AACD,QAAIC,KAAKT,QAAQU,OAAR,EAAT;;AAEA,QAAIG,yBAAyBC,yBAAyBL,EAAzB,CAA7B;;AAEA,WAAOI,sBAAP;AAED,GAhBD,CAgBE,OAAOF,CAAP,EAAU;AACV,WAAOf,UAAP;AACD;AACF,CArBM;;AAuBA,IAAMmB,0EAAiC,SAAjCA,8BAAiC,CAACnB,UAAD,EAA0C;AAAA,MAA7BC,aAA6B,uEAAb,QAAa;;AACtF;AACA,MAAI;;AAEF,QAAMC,QAAQF,WAAWG,KAAX,CAAiB,6BAAjB,CAAd;AACA,QAAMC,UAAU,IAAIjG,IAAJ,CAASA,KAAKkG,GAAL,CAASH,MAAM,CAAN,CAAT,EAAmBA,MAAM,CAAN,IAAW,CAA9B,EAAiCA,MAAM,CAAN,CAAjC,CAAT,CAAhB;AACAE,YAAQE,UAAR,CAAmBF,QAAQG,UAAR,KAAuBH,QAAQI,iBAAR,EAA1C;;AAEA,QAAIP,kBAAkB,QAAtB,EAAgC;AAC9BG,cAAQK,QAAR,CAAiBL,QAAQM,QAAR,KAAqB,EAAtC;AACAN,cAAQO,UAAR,CAAmBP,QAAQQ,UAAR,KAAuB,CAA1C;AACD;AACD,QAAIC,KAAKT,QAAQU,OAAR,EAAT;;AAEA,QAAIM,aAAaC,yBAAyBR,EAAzB,CAAjB;;AAEA,WAAOO,UAAP;AAED,GAhBD,CAgBE,OAAOL,CAAP,EAAU;AACV,WAAOf,UAAP;AACD;AACF,CArBM;;AAuBA,IAAMsB,4CAAkB,SAAlBA,eAAkB,OAAQ;AACrC,MAAMC,YAAYC,KAAK/N,KAAL,CAAW,GAAX,CAAlB;AACA,SAAO,IAAI0G,IAAJ,CAASoH,UAAU,CAAV,CAAT,EAAuBA,UAAU,CAAV,IAAe,CAAtC,EAAyCA,UAAU,CAAV,CAAzC,EAAuDT,OAAvD,EAAP;AACD,CAHM;;AAKA,IAAMW,gCAAY,SAAZA,SAAY,CAACC,aAAD,EAAmB;AAC1C;;;;;;;AAOA,SAAOA,aAAP;AACD,CATM;;AAWA,IAAMC,kDAAqB,SAArBA,kBAAqB,CAACD,aAAD,EAAmB;AACnD;;;;;;;AAOA,SAAOA,aAAP;AACD,CATM;;AAWA,IAAME,8EAAmC,SAAnCA,gCAAmC,CAACF,aAAD,EAAmB;AACjE,MAAIG,eAAe,IAAI1H,IAAJ,CAASmF,OAAOoC,aAAP,CAAT,CAAnB;AACA,MAAGG,aAAanB,QAAb,KAAwB,CAA3B,EAA6B;AAC7BmB,iBAAapB,QAAb,CAAsBoB,aAAanB,QAAb,KAA0B,CAAhD;AACAmB,iBAAavB,UAAb,CAAwBuB,aAAatB,UAAb,KAA4B,EAApD;AACC;AACD,MAAIuB,kBAAkBxC,OAAOuC,YAAP,CAAtB;AACA,SAAOC,eAAP;AACA;AACD,CATM;;AAWA,IAAMC,kDAAqB,SAArBA,kBAAqB,CAACL,aAAD,EAAmB;AACnD,MAAIG,eAAe,IAAI1H,IAAJ,CAASmF,OAAOoC,aAAP,CAAT,CAAnB;AACA,MAAGG,aAAanB,QAAb,KAAwB,CAA3B,EAA6B;AAC7BmB,iBAAapB,QAAb,CAAsBoB,aAAanB,QAAb,KAA0B,CAAhD;AACAmB,iBAAavB,UAAb,CAAwBuB,aAAatB,UAAb,KAA4B,EAApD;AACC;AACD,MAAIuB,kBAAkBxC,OAAOuC,YAAP,CAAtB;AACA,SAAOC,eAAP;AACA;AACD,CATM;;AAWA,IAAME,kDAAqB,SAArBA,kBAAqB,CAACN,aAAD,EAAmB;AACnD;;;;;;;AAOA,SAAOA,aAAP;AACD,CATM;;AAWA,IAAMR,8DAA2B,SAA3BA,wBAA2B,CAACQ,aAAD,EAAmB;AACzD;;;;;;;AAOA,SAAOA,aAAP;AACD,CATM;;AAYA,IAAML,8DAA2B,SAA3BA,wBAA2B,CAACK,aAAD,EAAmB;AACzD;;;;;;AAMA;AACA,SAAOA,aAAP;AACD,CATM;;AAWA,IAAMO,kCAAa,SAAbA,UAAa,KAAM;AAC9B;AACA,MAAI,CAACpB,EAAL,EAAS,OAAO,IAAP;AACT;AACA,MAAI,OAAOA,EAAP,KAAc,QAAlB,EAA4B,OAAOA,EAAP;;AAE5B,MAAIO,aAAaO,mBAAmBd,EAAnB,CAAjB;AACA,MAAIW,OAAO,IAAIrH,IAAJ,CAASiH,UAAT,CAAX;AACA;AACA;AACE;AACF;AACA,MAAItB,MAAM0B,KAAKjH,OAAL,KAAiB,EAAjB,SAA0BiH,KAAKjH,OAAL,EAA1B,GAA6CiH,KAAKjH,OAAL,EAAvD;AACA,MAAIsF,QACF2B,KAAKlH,QAAL,KAAkB,CAAlB,GAAsB,EAAtB,UAA+BkH,KAAKlH,QAAL,KAAkB,CAAjD,IAAuDkH,KAAKlH,QAAL,KAAkB,CAD3E;AAEA;AACA,MAAI4H,iBAAiBV,KAAKnH,WAAL,KAAqB,GAArB,GAA2BwF,KAA3B,GAAmC,GAAnC,GAAyCC,GAA9D;AACA,SAAOoC,cAAP;AACD,CAlBM;;AAoBA,IAAMC,kCAAa,SAAbA,UAAa,KAAM;AAC9B;AACA,MAAI,CAACtB,EAAL,EAAS,OAAO,IAAP;AACT;AACA,MAAI,OAAOA,EAAP,KAAc,QAAlB,EAA4B,OAAOA,EAAP;AAC5B,MAAIW,OAAO,IAAIrH,IAAJ,CAAS0G,EAAT,CAAX;AACA,MAAIf,MAAM0B,KAAKjH,OAAL,KAAiB,EAAjB,SAA0BiH,KAAKjH,OAAL,EAA1B,GAA6CiH,KAAKjH,OAAL,EAAvD;AACA,MAAIsF,QACF2B,KAAKlH,QAAL,KAAkB,CAAlB,GAAsB,EAAtB,UAA+BkH,KAAKlH,QAAL,KAAkB,CAAjD,IAAuDkH,KAAKlH,QAAL,KAAkB,CAD3E;AAEA;AACA,MAAI4H,iBAAgBpC,MAAM,GAAN,GAAaD,KAAb,GAAqB,GAArB,GAA2B2B,KAAKnH,WAAL,EAA/C;AACA,SAAO6H,cAAP;AACD,CAZM","file":"index.js","sourcesContent":["import axios from \"axios\";\r\nimport uniqBy from \"lodash/uniqBy\";\r\nimport uniq from \"lodash/uniq\";\r\nimport get from \"lodash/get\";\r\nimport findIndex from \"lodash/findIndex\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport { httpRequest, httpGetRequest } from \"./api\";\r\nimport envVariables from \"../envVariables\";\r\nimport { from } from \"linq\";\r\n\r\nimport logger from \"../config/logger\";\r\n\r\nexport const uuidv1 = () => {\r\n  return require(\"uuid/v4\")();\r\n};\r\n\r\nexport const requestInfoToResponseInfo = (requestinfo, success) => {\r\n  let ResponseInfo = {\r\n    apiId: \"\",\r\n    ver: \"\",\r\n    ts: 0,\r\n    resMsgId: \"\",\r\n    msgId: \"\",\r\n    status: \"\"\r\n  };\r\n  ResponseInfo.apiId =\r\n    requestinfo && requestinfo.apiId ? requestinfo.apiId : \"\";\r\n  ResponseInfo.ver = requestinfo && requestinfo.ver ? requestinfo.ver : \"\";\r\n  ResponseInfo.ts = requestinfo && requestinfo.ts ? requestinfo.ts : null;\r\n  ResponseInfo.resMsgId = \"uief87324\";\r\n  ResponseInfo.msgId =\r\n    requestinfo && requestinfo.msgId ? requestinfo.msgId : \"\";\r\n  ResponseInfo.status = success ? \"successful\" : \"failed\";\r\n\r\n  return ResponseInfo;\r\n};\r\n\r\nexport const addIDGenId = async (requestInfo, idRequests) => {\r\n  let requestBody = {\r\n    RequestInfo: requestInfo,\r\n    idRequests\r\n  };\r\n  \r\n  let idGenResponse = await httpRequest({\r\n    hostURL: envVariables.EGOV_IDGEN_HOST,\r\n    endPoint: `${envVariables.EGOV_IDGEN_CONTEXT_PATH}${\r\n      envVariables.EGOV_IDGEN_GENERATE_ENPOINT\r\n    }`,\r\n    requestBody\r\n  });\r\n  \r\n  return get(idGenResponse, \"idResponses[0].id\");\r\n};\r\n\r\nexport const addQueryArg = (url, queries = []) => {\r\n  if (url && url.includes(\"?\")) {\r\n    const urlParts = url.split(\"?\");\r\n    const path = urlParts[0];\r\n    let queryParts = urlParts.length > 1 ? urlParts[1].split(\"&\") : [];\r\n    queries.forEach(query => {\r\n      const key = query.key;\r\n      const value = query.value;\r\n      const newQuery = `${key}=${value}`;\r\n      queryParts.push(newQuery);\r\n    });\r\n    const newUrl = path + \"?\" + queryParts.join(\"&\");\r\n    return newUrl;\r\n  } else {\r\n    return url;\r\n  }\r\n};\r\n\r\n//Workflow Service\r\nexport const createWorkFlow = async body => {  \r\n  let processInstances = body.ProcessInstances.map(processInstances => {\r\n    return {\r\n      tenantId: processInstances.tenantId,\r\n      businessService: processInstances.businessService,\r\n      businessId: processInstances.businessId,//applicationNumber\r\n      action: processInstances.action,\r\n      comment: processInstances.comment!=null?processInstances.comment:null,\r\n      assignee: null,\r\n      documents: processInstances.documents!=null? processInstances.documents:[],\r\n      sla: 0,\r\n      previousStatus: null,\r\n      moduleName: processInstances.businessService\r\n    };\r\n  });\r\n  let requestBody = {\r\n    RequestInfo: body.RequestInfo,\r\n    ProcessInstances: processInstances\r\n  };\r\n  logger.debug(\"requestBody\", JSON.stringify(requestBody));\r\n\r\n  let workflowResponse = await httpRequest({\r\n    hostURL: envVariables.EGOV_WORKFLOW_HOST,\r\n    endPoint: envVariables.EGOV_WORKFLOW_TRANSITION_ENDPOINT,\r\n    requestBody\r\n  });\r\n  \r\n  return workflowResponse;\r\n};\r\n\r\nexport const searchWorkflow = async (requestInfo, tenantId,businessIds) => {\r\n  let requestBody = {\r\n    RequestInfo: requestInfo\r\n  };  \r\n  \r\n  let workflowResponse = await httpRequest({\r\n    hostURL: envVariables.EGOV_WORKFLOW_HOST,\r\n    endPoint: `${envVariables.EGOV_WORKFLOW_SEARCH_ENDPOINT\r\n    }?tenantId=${tenantId}&businessIds=${businessIds}&limit=${envVariables.EGOV_WORKFLOW_DEFAULT_LIMIT}`,\r\n    requestBody\r\n  });  \r\n  \r\n  return workflowResponse;\r\n};\r\n\r\n//Pension Service\r\nexport const saveEmployees = async body => {\r\n  let requestBody=body ;\r\n\r\n  \r\n  \r\n   let pensionResponse = await httpRequest({\r\n     hostURL: envVariables.EGOV_PENSION_HOST,\r\n     endPoint: `${envVariables.EGOV_PENSION_CONTEXT_PATH}${\r\n       envVariables.EGOV_PENSION_SAVE_EMPLOYEES_ENDPOINT\r\n     }`,\r\n     requestBody\r\n   });   \r\n   return pensionResponse;\r\n };\r\n\r\n export const searchEmployee = async (requestInfo, tenantId,code) => {\r\n  let requestBody = {\r\n    RequestInfo: requestInfo\r\n  };    \r\n  let employeeResponse = await httpRequest({\r\n    hostURL: envVariables.EGOV_PENSION_HOST,\r\n    endPoint: `${envVariables.EGOV_PENSION_CONTEXT_PATH}${\r\n      envVariables.EGOV_PENSION_SEARCH_EMPLOYEE_ENDPOINT\r\n    }?tenantId=${tenantId}&code=${code}`,\r\n    requestBody\r\n  });  \r\n  \r\n  return employeeResponse;\r\n};\r\n\r\nexport const releaseWorkFlow = async body => {  \r\n  let processInstances = body.ProcessInstances.map(processInstances => {\r\n    return {     \r\n      businessId: processInstances.businessId,//applicationNumber      \r\n    };\r\n  });\r\n  let requestBody = {\r\n    RequestInfo: body.RequestInfo,\r\n    ProcessInstances: processInstances\r\n  };  \r\n\r\n  let releaseWorkFlowResponse = await httpRequest({\r\n    hostURL: envVariables.EGOV_PENSION_HOST,\r\n    endPoint: `${envVariables.EGOV_PENSION_CONTEXT_PATH}${\r\n      envVariables.EGOV_PENSION_RELEASE_WORKFLOW_ENDPOINT\r\n    }`,\r\n    requestBody\r\n  });  \r\n  return releaseWorkFlowResponse;\r\n};\r\n\r\nexport const searchPensionWorkflow = async (requestInfo, tenantId,businessIds) => {\r\n  let requestBody = {\r\n    RequestInfo: requestInfo\r\n  };  \r\n  \r\n  let workflowResponse = await httpRequest({\r\n    hostURL: envVariables.EGOV_PENSION_HOST,\r\n    endPoint: `${envVariables.EGOV_PENSION_CONTEXT_PATH}${\r\n      envVariables.EGOV_PENSION_SEARCH_WORKFLOW_ENDPOINT\r\n    }?tenantId=${tenantId}&businessIds=${businessIds}`,\r\n    requestBody\r\n  });  \r\n  \r\n  return workflowResponse;\r\n};\r\n\r\nexport const getPensionEmployees = async ( requestInfo,tenantId,code,name,dob) => {  \r\n  let requestBody = {\r\n    RequestInfo: requestInfo\r\n  };  \r\n  let queryObj=`tenantId=${tenantId}`;\r\n  if(code){\r\n    queryObj=`${queryObj}&code=${code}`\r\n  }\r\n  if(name){\r\n    queryObj=`${queryObj}&name=${name}`\r\n  }\r\n  if(dob){\r\n    queryObj=`${queryObj}&dob=${dob}`\r\n  }\r\n  let employeeResponse = await httpRequest({\r\n    hostURL: envVariables.EGOV_PENSION_HOST,\r\n    endPoint: `${envVariables.EGOV_PENSION_CONTEXT_PATH\r\n    }${envVariables.EGOV_PENSION_GET_PENSION_EMPLOYEES_ENDPOINT\r\n    }?${queryObj}`,\r\n    requestBody\r\n  });\r\n  \r\n  return employeeResponse;\r\n};\r\n\r\nexport const searchPensioner = async ( requestInfo,tenantId,pensionerNumber,name,dob) => {  \r\n  let requestBody = {\r\n    RequestInfo: requestInfo\r\n  };  \r\n\r\n  let queryObj=\"\";  \r\n\r\n  if(tenantId){\r\n    queryObj=`${queryObj}tenantId=${tenantId}`\r\n  }\r\n  if(pensionerNumber){\r\n    queryObj=`${queryObj}&pensionerNumber=${pensionerNumber}`\r\n  }\r\n  if(name){\r\n    queryObj=`${queryObj}&name=${name}`\r\n  }\r\n  if(dob){\r\n    queryObj=`${queryObj}&dob=${dob}`\r\n  }\r\n\r\n  let response = await httpRequest({\r\n    hostURL: envVariables.EGOV_PENSION_HOST,\r\n    endPoint: `${envVariables.EGOV_PENSION_CONTEXT_PATH\r\n    }${envVariables.EGOV_PENSION_SEARCH_PENSIONER_ENDPOINT\r\n    }?${queryObj}`,\r\n    requestBody\r\n  });\r\n  \r\n  return response;\r\n};\r\n\r\nexport const searchPensionerForPensionRevision = async ( requestInfo,tenantId,pensionerNumber) => {  \r\n  let requestBody = {\r\n    RequestInfo: requestInfo\r\n  };  \r\n\r\n  let response = await httpRequest({\r\n    hostURL: envVariables.EGOV_PENSION_HOST,\r\n    endPoint: `${envVariables.EGOV_PENSION_CONTEXT_PATH\r\n    }${envVariables.EGOV_PENSION_SEARCH_PENSIONER_FOR_PENSION_REVISION_ENDPOINT\r\n    }?tenantId=${tenantId}&pensionerNumber=${pensionerNumber}`,\r\n    requestBody\r\n  });\r\n  \r\n  return response;\r\n};\r\n\r\nexport const getPensionRevisions = async ( requestInfo,tenantId,pensionerNumber) => {  \r\n  let requestBody = {\r\n    RequestInfo: requestInfo\r\n  };  \r\n\r\n  let response = await httpRequest({\r\n    hostURL: envVariables.EGOV_PENSION_HOST,\r\n    endPoint: `${envVariables.EGOV_PENSION_CONTEXT_PATH\r\n    }${envVariables.EGOV_PENSION_GET_PENSION_REVISIONS_ENDPOINT\r\n    }?tenantId=${tenantId}&pensionerNumber=${pensionerNumber}`,\r\n    requestBody\r\n  });\r\n  \r\n  return response;\r\n};\r\n\r\nexport const closeWorkflowByUser = async body => { \r\n  let processInstances = body.ProcessInstances.map(processInstances => {\r\n    return {\r\n      tenantId: processInstances.tenantId,\r\n      businessService: processInstances.businessService,\r\n      businessId: processInstances.businessId,\r\n      dateOfContingent: processInstances.employeeOtherDetails.dateOfContingent,//employeeOtherDetails object\r\n      moduleName: processInstances.businessService,\r\n      workflowHeaderId: \"\",\r\n      pensionEmployeeId: \"\",\r\n      pensionerId: \"\",    \r\n      employeeOtherDetailsAuditId: \"\",\r\n      auditDetails: null\r\n    };\r\n  });\r\n    \r\n   let requestBody = {\r\n    RequestInfo: body.RequestInfo,\r\n    ProcessInstances: processInstances\r\n   };\r\n\r\n   logger.debug(JSON.stringify(requestBody));\r\n\r\n   let pensionResponse = await httpRequest({\r\n     hostURL: envVariables.EGOV_PENSION_HOST,\r\n     endPoint: `${envVariables.EGOV_PENSION_CONTEXT_PATH}${\r\n       envVariables.EGOV_PENSION_CLOSE_WORKFLOW_BY_USER_ENDPOINT\r\n     }`,\r\n     requestBody\r\n   });   \r\n   logger.debug(JSON.stringify(pensionResponse));\r\n   return pensionResponse;\r\n };\r\n \r\n export const saveEmployeeToPensionNotificationRegister = async body => {\r\n  let requestBody=body ;\r\n   let pensionResponse = await httpRequest({\r\n     hostURL: envVariables.EGOV_PENSION_HOST,\r\n     endPoint: `${envVariables.EGOV_PENSION_CONTEXT_PATH}${\r\n       envVariables.EGOV_PENSION_SAVE_EMPLOYEE_TO_PENSION_NOTIFICATION_REGISTER_ENDPOINT\r\n     }`,\r\n     requestBody\r\n   });\r\n   \r\n   return pensionResponse;\r\n };\r\n\r\n export const getEmployeeDisability = async ( requestInfo,tenantId,code) => {  \r\n  let requestBody = {\r\n    RequestInfo: requestInfo\r\n  };  \r\n\r\n  let response = await httpRequest({\r\n    hostURL: envVariables.EGOV_PENSION_HOST,\r\n    endPoint: `${envVariables.EGOV_PENSION_CONTEXT_PATH\r\n    }${envVariables.EGOV_PENSION_GET_EMPLOYEE_DISABILITY_ENDPOINT\r\n    }?tenantId=${tenantId}&code=${code}`,\r\n    requestBody\r\n  });\r\n  \r\n  return response;\r\n};\r\n\r\nexport const searchClosedApplication = async ( requestInfo,tenantId,businessService,businessId) => {  \r\n  let requestBody = {\r\n    RequestInfo: requestInfo\r\n  };  \r\n  let queryObj=`tenantId=${tenantId}`;\r\n  \r\n  if(businessService){\r\n    queryObj=`${queryObj}&businessService=${businessService}`\r\n  }\r\n  if(businessId){\r\n    queryObj=`${queryObj}&businessId=${businessId}`\r\n  }\r\n  \r\n  let closedApplicationResponse = await httpRequest({\r\n    hostURL: envVariables.EGOV_PENSION_HOST,\r\n    endPoint: `${envVariables.EGOV_PENSION_CONTEXT_PATH\r\n    }${envVariables.EGOV_PENSION_SEARCH_CLOSED_APPLICATION_ENDPOINT\r\n    }?${queryObj}`,\r\n    requestBody\r\n  });\r\n  \r\n  return closedApplicationResponse;\r\n};\r\n\r\nexport const searchApplication = async ( requestInfo,tenantId,code,businessId,businessService) => {  \r\n  let requestBody = {\r\n    RequestInfo: requestInfo\r\n  };  \r\n  let queryObj=\"\";  \r\n\r\n  if(tenantId){\r\n    queryObj=`${queryObj}tenantId=${tenantId}`\r\n  }  \r\n  if(code){\r\n    queryObj=`${queryObj}&code=${code}`\r\n  }\r\n  if(businessId){\r\n    queryObj=`${queryObj}&businessId=${businessId}`\r\n  }\r\n  if(businessService){\r\n    queryObj=`${queryObj}&businessService=${businessService}`\r\n  }\r\n  \r\n  let closedApplicationResponse = await httpRequest({\r\n    hostURL: envVariables.EGOV_PENSION_HOST,\r\n    endPoint: `${envVariables.EGOV_PENSION_CONTEXT_PATH\r\n    }${envVariables.EGOV_PENSION_SEARCH_APPLICATION_ENDPOINT\r\n    }?${queryObj}`,\r\n    requestBody\r\n  });\r\n  \r\n  return closedApplicationResponse;\r\n};\r\n\r\n//HRMS Service\r\nexport const getEmployeeDetails = async ( requestInfo,tenantId,codes=\"\",names=\"\",departments=\"\") => {  \r\n  let requestBody = {\r\n    RequestInfo: requestInfo\r\n  };\r\n  let query=\"\";   \r\n  if(codes!=\"\"){\r\n    query=`${query}&codes=${codes}`;\r\n  }\r\n  if(names!=\"\"){\r\n    query=`${query}&names=${names}`;\r\n  }\r\n  if(departments!=\"\"){\r\n    query=`${query}&departments=${departments}`;\r\n  }\r\n  let employeeResponse = await httpRequest({\r\n    hostURL: envVariables.EGOV_HRMS_HOST,\r\n    endPoint: `${envVariables.EGOV_HRMS_CONTEXT_PATH\r\n    }${envVariables.EGOV_HRMS_EMPLOYEE_SEARCH_ENDPOINT      \r\n    }?limit=${envVariables.EGOV_HRMS_DEFAULT_LIMIT}&tenantId=${tenantId}${query}`,\r\n    requestBody\r\n  });\r\n  \r\n  return employeeResponse;\r\n};\r\n\r\n//File Service\r\nexport const getFileDetails = async ( tenantId,fileStoreIds,requestInfo) => {  \r\n  if (String(tenantId).includes(\".\")){\r\n    let index=String(tenantId).indexOf(\".\");\r\n    tenantId=String(tenantId).substring(0,index);\r\n  }\r\n  /*\r\n  let headers = [];\r\n  headers.push({\r\n    \"auth-token\":requestInfo.authToken\r\n    }    \r\n  );\r\n  */\r\n  let fileResponse = await httpGetRequest({\r\n    hostURL: envVariables.EGOV_FILESTORE_HOST,\r\n    endPoint: `${envVariables.EGOV_FILESTORE_CONTEXT_PATH\r\n    }${envVariables.EGOV_FILESTORE_URL_ENDPOINT      \r\n    }?tenantId=${tenantId}&fileStoreIds=${fileStoreIds}`//,\r\n    //headers\r\n  });\r\n  \r\n  return fileResponse;\r\n};\r\n\r\n//User Event Service\r\nexport const createUserEventToUser = async (body,tenantId,eventName,eventDescription,uuid) => {    \r\n  let today=new Date();\r\n  let fromDate=`${today.getFullYear()}-${today.getMonth()+1}-${today.getDate()+1}`;\r\n  let toDate=`${today.getFullYear()}-${today.getMonth()+1}-${today.getDate()+8}`;\r\n  \r\n  let events=[];\r\n  events.push(\r\n    {\r\n    tenantId: tenantId,\r\n    eventType: envVariables.EGOV_USER_EVENT_TYPE,\r\n    description: eventDescription,\r\n    name: eventName,\r\n    source: envVariables.EGOV_USER_EVENT_NAME_SOURCE,\r\n    actions: {\r\n      actionUrls: []\r\n    },\r\n    eventDetails: {\r\n      fromDate: convertDateToEpoch(fromDate,\"dob\"),\r\n      toDate: convertDateToEpoch(toDate,\"dob\")\r\n    },\r\n    recepient: {\r\n      toRoles: [],\r\n      toUsers: [uuid]        \r\n    }\r\n    }\r\n  );\r\n  let requestBody = {\r\n    RequestInfo: body.RequestInfo,\r\n    events: events\r\n  };\r\n  logger.debug(\"eventRequestBody\", JSON.stringify(requestBody));\r\n\r\n  let eventResponse = await httpRequest({\r\n    hostURL: envVariables.EGOV_USER_EVENT_HOST,\r\n    endPoint: `${envVariables.EGOV_USER_EVENT_CONTEXT_PATH}${\r\n      envVariables.EGOV_USER_EVENT_CREATE_ENDPOINT\r\n    }`,\r\n    requestBody\r\n  });\r\n  \r\n  return eventResponse;\r\n};\r\n\r\nexport const createUserEventToRole = async (body,tenantId,eventName,eventDescription,roleCode) => {    \r\n  let today=new Date();\r\n  let fromDate=`${today.getFullYear()}-${today.getMonth()+1}-${today.getDate()+1}`;\r\n  let toDate=`${today.getFullYear()}-${today.getMonth()+1}-${today.getDate()+8}`;\r\n  \r\n  let events=[];\r\n  events.push(\r\n    {\r\n      tenantId: tenantId,\r\n      eventType: envVariables.EGOV_USER_EVENT_TYPE,\r\n      description: eventDescription,\r\n      name: eventName,\r\n      source: envVariables.EGOV_USER_EVENT_NAME_SOURCE,\r\n      actions: {\r\n        actionUrls: []\r\n      },\r\n      eventDetails: {\r\n        fromDate: convertDateToEpoch(fromDate,\"dob\"),\r\n        toDate: convertDateToEpoch(toDate,\"dob\")\r\n      },\r\n      recepient: {\r\n        toRoles: [roleCode],\r\n        toUsers: []        \r\n      }\r\n    }\r\n  ); \r\n  let requestBody = {\r\n    RequestInfo: body.RequestInfo,\r\n    events: events\r\n  };\r\n  \r\n\r\n  let eventResponse = await httpRequest({\r\n    hostURL: envVariables.EGOV_USER_EVENT_HOST,\r\n    endPoint: `${envVariables.EGOV_USER_EVENT_CONTEXT_PATH}${\r\n      envVariables.EGOV_USER_EVENT_CREATE_ENDPOINT\r\n    }`,\r\n    requestBody\r\n  });\r\n  \r\n  return eventResponse;\r\n};\r\n\r\nexport const getUserEventDetails = async ( requestInfo,tenantId,recepients) => {  \r\n  let requestBody = {\r\n    RequestInfo: requestInfo\r\n  };  \r\n\r\n  let userEventResponse = await httpRequest({\r\n    hostURL: envVariables.EGOV_USER_EVENT_HOST,\r\n    endPoint: `${envVariables.EGOV_USER_EVENT_CONTEXT_PATH\r\n    }${envVariables.EGOV_USER_EVENT_SEARCH_ENDPOINT      \r\n    }?tenantId=${tenantId}&recepients=${recepients}`,\r\n    requestBody\r\n  });\r\n  \r\n  return userEventResponse;\r\n};\r\n\r\n//Pension Rule Engine\r\nexport const calculateBenefit = async body => {  \r\n  let processInstances = body.ProcessInstances.map(processInstances => {\r\n    return {     \r\n      tenantId: processInstances.tenantId,\r\n      employee: processInstances.employee \r\n    };\r\n  });\r\n  let requestBody = {    \r\n    RequestInfo: body.RequestInfo,\r\n    ProcessInstances: processInstances\r\n  };  \r\n  logger.debug(\"requestBody\", JSON.stringify(requestBody));\r\n  \r\n  let ruleEngineResponse = await httpRequest({\r\n    hostURL: envVariables.EGOV_PENSION_RULE_ENGINE_HOST,\r\n    endPoint: `${envVariables.EGOV_PENSION_RULE_ENGINE_CONTEXT_PATH}${\r\n      envVariables.EGOV_PENSION_RULE_ENGINE_CALCULATE_BENEFIT_ENDPOINT\r\n    }`,\r\n    requestBody\r\n  });\r\n  \r\n\r\n  \r\n  return ruleEngineResponse;\r\n};\r\n\r\n\r\nexport const getDependentEligibilityForBenefit = async body => {  \r\n  let processInstances = body.ProcessInstances.map(processInstances => {\r\n    return {     \r\n      tenantId: processInstances.tenantId,\r\n      dependents: processInstances.dependents     \r\n    };\r\n  });\r\n  let requestBody = {    \r\n    RequestInfo: body.RequestInfo,\r\n    ProcessInstances: processInstances\r\n  };  \r\n  logger.debug(\"requestBody\", JSON.stringify(requestBody));\r\n  \r\n  let ruleEngineResponse = await httpRequest({\r\n    hostURL: envVariables.EGOV_PENSION_RULE_ENGINE_HOST,\r\n    endPoint: `${envVariables.EGOV_PENSION_RULE_ENGINE_CONTEXT_PATH}${\r\n      envVariables.EGOV_PENSION_RULE_ENGINE_GET_DEPENDENT_ELIGIBILITY_FOR_BENEFIT_ENDPOINT\r\n    }`,\r\n    requestBody\r\n  });\r\n  \r\n\r\n  \r\n  \r\n  return ruleEngineResponse;\r\n};\r\n\r\nexport const calculateRevisedPension = async body => {  \r\n  let processInstances = body.ProcessInstances.map(processInstances => {\r\n    return {     \r\n      tenantId: processInstances.tenantId,\r\n      pensionRevision: processInstances.pensionRevision \r\n    };\r\n  });\r\n  let requestBody = {    \r\n    RequestInfo: body.RequestInfo,\r\n    ProcessInstances: processInstances\r\n  };  \r\n  logger.debug(\"requestBody\", JSON.stringify(requestBody));\r\n  \r\n  let ruleEngineResponse = await httpRequest({\r\n    hostURL: envVariables.EGOV_PENSION_RULE_ENGINE_HOST,\r\n    endPoint: `${envVariables.EGOV_PENSION_RULE_ENGINE_CONTEXT_PATH}${\r\n      envVariables.EGOV_PENSION_RULE_ENGINE_CALCULATE_REVISED_PENSION_ENDPOINT\r\n    }`,\r\n    requestBody\r\n  });\r\n  \r\n\r\n  \r\n  \r\n  return ruleEngineResponse;\r\n};\r\n\r\n//Schedular\r\nexport const loginRequest = async (username,password,grant_type,scope,tenantId,userType) => {  \r\n  const loginInstance = axios.create({\r\n    baseURL: envVariables.EGOV_USER_HOST,//window.location.origin,\r\n    headers: {\r\n      \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n      Authorization: \"Basic ZWdvdi11c2VyLWNsaWVudDplZ292LXVzZXItc2VjcmV0\",\r\n    },\r\n  });\r\n\r\n  let apiError = \"Api Error\";\r\n  var params = new URLSearchParams();\r\n  params.append(\"username\",username );\r\n  params.append(\"password\", password);  \r\n  params.append(\"grant_type\",grant_type );\r\n  params.append(\"scope\", scope);\r\n  params.append(\"tenantId\", tenantId);  \r\n  params.append(\"userType\", userType);\r\n\r\n  try {\r\n    const response = await loginInstance.post(`${envVariables.EGOV_USER_CONTEXT_PATH}${\r\n      envVariables.EGOV_USER_GENERATE_ACCESS_TOKEN_ENDPOINT\r\n    }`, params);\r\n      \r\n    const responseStatus = parseInt(response.status, 10);\r\n    if (responseStatus === 200 || responseStatus === 201) {\r\n      return response.data;\r\n    }\r\n  } catch (error) {\r\n    const { data, status } = error.response;\r\n    if (status === 400) {\r\n      apiError = (data.hasOwnProperty(\"error_description\") && data.error_description) || apiError;\r\n    }\r\n  }\r\n\r\n  throw new Error(apiError);\r\n};\r\n\r\nexport const pushEmployeesToPensionNotificationRegister = async body => {\r\n  let requestBody=body ;\r\n   let response = await httpRequest({\r\n     hostURL: envVariables.EGOV_PENSION_HOST,\r\n     endPoint: `${envVariables.EGOV_PENSION_CONTEXT_PATH}${\r\n       envVariables.EGOV_PENSION_PUSH_EMPLOYEES_TO_PENSION_NOTIFICATION_REGISTER_ENDPOINT\r\n     }`,\r\n     requestBody\r\n   });\r\n   \r\n   return response;\r\n };\r\n\r\n export const createMonthlyPensionRegister = async body => {\r\n  let processInstances=[];\r\n  processInstances.push({\r\n    tenantId: envVariables.EGOV_PENSION_SCHEDULAR_TENANTID,\r\n    effectiveYear: new Date().getFullYear(),\r\n    effectiveMonth: new Date().getMonth()+1\r\n    }\r\n  );    \r\n   let requestBody = {\r\n    RequestInfo: body.RequestInfo,\r\n    ProcessInstances: processInstances\r\n   };\r\n\r\n    \r\n      \r\n  let response = await httpRequest({\r\n    hostURL: envVariables.EGOV_PENSION_HOST,\r\n    endPoint: `${envVariables.EGOV_PENSION_CONTEXT_PATH}${\r\n      envVariables.EGOV_PENSION_CREATE_MONTHLY_PENSION_REGISTER_ENDPOINT\r\n    }`,\r\n    requestBody\r\n  });\r\n   \r\n   return response;\r\n };\r\n\r\n export const updatePensionRevisionBulk = async body => {\r\n  let parameters={\r\n    tenantId: envVariables.EGOV_PENSION_SCHEDULAR_TENANTID,\r\n    effectiveYear: new Date().getFullYear(),\r\n    effectiveMonth: new Date().getMonth()+1,\r\n    modifyDA: envVariables.EGOV_PENSION_UPDATE_PENSION_REVISION_BULK_SCHEDULAR_IS_DA_MODIFIABLE,\r\n    modifyIR: envVariables.EGOV_PENSION_UPDATE_PENSION_REVISION_BULK_SCHEDULAR_IS_IR_MODIFIABLE,\r\n    modifyFMA: envVariables.EGOV_PENSION_UPDATE_PENSION_REVISION_BULK_SCHEDULAR_IS_FMA_MODIFIABLE,\r\n    FMA: Number(envVariables.EGOV_PENSION_UPDATE_PENSION_REVISION_BULK_SCHEDULAR_MODIFIED_FMA)\r\n    };\r\n   let requestBody = {\r\n    RequestInfo: body.RequestInfo,\r\n    Parameters: parameters\r\n   };\r\n\r\n    \r\n      \r\n  let response = await httpRequest({\r\n    hostURL: envVariables.EGOV_PENSION_HOST,\r\n    endPoint: `${envVariables.EGOV_PENSION_CONTEXT_PATH}${\r\n      envVariables.EGOV_PENSION_UPDATE_PENSION_REVISION_BULK_ENDPOINT\r\n    }`,\r\n    requestBody\r\n  });\r\n   \r\n   return response;\r\n };\r\n\r\n\r\n\r\nexport const convertEpochToDate = dateEpoch => {  \r\n  const dateFromApi = new Date(dateEpoch);  \r\n  let month = dateFromApi.getMonth() + 1;\r\n  let day = dateFromApi.getDate();\r\n  let year = dateFromApi.getFullYear();\r\n  month = (month > 9 ? \"\" : \"0\") + month;\r\n  day = (day > 9 ? \"\" : \"0\") + day;\r\n  return `${day}/${month}/${year}`;\r\n};\r\n\r\nexport const convertDateToEpoch = (dateString, dayStartOrEnd = \"dayend\") => {\r\n  //example input format : \"2018-10-02\"\r\n  try {\r\n    \r\n    const parts = dateString.match(/(\\d{4})-(\\d{1,2})-(\\d{1,2})/);\r\n    const DateObj = new Date(Date.UTC(parts[1], parts[2] - 1, parts[3]));\r\n    DateObj.setMinutes(DateObj.getMinutes() + DateObj.getTimezoneOffset());\r\n    \r\n    if (dayStartOrEnd === \"dayend\") {\r\n      DateObj.setHours(DateObj.getHours() + 24);\r\n      DateObj.setSeconds(DateObj.getSeconds() - 1);\r\n    }\r\n    let et = DateObj.getTime();\r\n\r\n    //let etAdjusted = adjust530SubForYMD(et);\r\n\r\n    return et;\r\n\r\n  } catch (e) {\r\n    return dateString;\r\n  }\r\n};\r\n\r\nexport const convertDateToEpochForDeathDate = (dateString, dayStartOrEnd = \"dayend\") => {\r\n  //example input format : \"2018-10-02\"\r\n  try {\r\n    \r\n    const parts = dateString.match(/(\\d{4})-(\\d{1,2})-(\\d{1,2})/);\r\n    const DateObj = new Date(Date.UTC(parts[1], parts[2] - 1, parts[3]));\r\n    DateObj.setMinutes(DateObj.getMinutes() + DateObj.getTimezoneOffset());\r\n    \r\n    if (dayStartOrEnd === \"dayend\") {\r\n      DateObj.setHours(DateObj.getHours() + 24);\r\n      DateObj.setSeconds(DateObj.getSeconds() - 1);\r\n    }\r\n    let et = DateObj.getTime();\r\n\r\n    let etAdjustedForDeathDate = adjust530AddForDeathDate(et);\r\n\r\n    return etAdjustedForDeathDate;\r\n\r\n  } catch (e) {\r\n    return dateString;\r\n  }\r\n};\r\n\r\nexport const convertDateToEpochForMigration = (dateString, dayStartOrEnd = \"dayend\") => {\r\n  //example input format : \"2018-10-02\"\r\n  try {\r\n    \r\n    const parts = dateString.match(/(\\d{4})-(\\d{1,2})-(\\d{1,2})/);\r\n    const DateObj = new Date(Date.UTC(parts[1], parts[2] - 1, parts[3]));\r\n    DateObj.setMinutes(DateObj.getMinutes() + DateObj.getTimezoneOffset());\r\n    \r\n    if (dayStartOrEnd === \"dayend\") {\r\n      DateObj.setHours(DateObj.getHours() + 24);\r\n      DateObj.setSeconds(DateObj.getSeconds() - 1);\r\n    }\r\n    let et = DateObj.getTime();\r\n\r\n    let etAdjusted = adjust530SubForMigration(et);\r\n\r\n    return etAdjusted;\r\n\r\n  } catch (e) {\r\n    return dateString;\r\n  }\r\n};\r\n\r\nexport const getEpochForDate = date => {\r\n  const dateSplit = date.split(\"/\");\r\n  return new Date(dateSplit[2], dateSplit[1] - 1, dateSplit[0]).getTime();\r\n};\r\n\r\nexport const adjust530 = (actualDateNum) => {\r\n  /* let modifiedDate = new Date(Number(actualDateNum));\r\n  if(modifiedDate.getHours()>0){\r\n  modifiedDate.setHours(modifiedDate.getHours() + 5);\r\n  modifiedDate.setMinutes(modifiedDate.getMinutes() + 30);\r\n  }\r\n  let modifiedDateNum = Number(modifiedDate);\r\n  return modifiedDateNum; */\r\n  return actualDateNum;\r\n}\r\n\r\nexport const adjust530AddForYMD = (actualDateNum) => {\r\n  /* let modifiedDate = new Date(Number(actualDateNum));\r\n  if(modifiedDate.getHours()>0){\r\n  modifiedDate.setHours(modifiedDate.getHours() + 5);\r\n  modifiedDate.setMinutes(modifiedDate.getMinutes() + 30);\r\n  }\r\n  let modifiedDateNum = Number(modifiedDate);\r\n  return modifiedDateNum;  */\r\n  return actualDateNum;\r\n}\r\n\r\nexport const adjust530AddForDeathRegistration = (actualDateNum) => {\r\n  let modifiedDate = new Date(Number(actualDateNum));\r\n  if(modifiedDate.getHours()>0){\r\n  modifiedDate.setHours(modifiedDate.getHours() + 5);\r\n  modifiedDate.setMinutes(modifiedDate.getMinutes() + 30);\r\n  }\r\n  let modifiedDateNum = Number(modifiedDate);\r\n  return modifiedDateNum;  \r\n  //return actualDateNum;\r\n}\r\n\r\nexport const adjust530AddForDob = (actualDateNum) => {\r\n  let modifiedDate = new Date(Number(actualDateNum));\r\n  if(modifiedDate.getHours()>0){\r\n  modifiedDate.setHours(modifiedDate.getHours() + 5);\r\n  modifiedDate.setMinutes(modifiedDate.getMinutes() + 30);\r\n  }\r\n  let modifiedDateNum = Number(modifiedDate);\r\n  return modifiedDateNum;  \r\n  //return actualDateNum;\r\n}\r\n\r\nexport const adjust530SubForYMD = (actualDateNum) => {\r\n  /* let modifiedDate = new Date(Number(actualDateNum));\r\n  if(modifiedDate.getHours()==0){\r\n  modifiedDate.setHours(modifiedDate.getHours() - 5);\r\n  modifiedDate.setMinutes(modifiedDate.getMinutes() - 30);\r\n  }\r\n  let modifiedDateNum = Number(modifiedDate);\r\n  return modifiedDateNum;  */\r\n  return actualDateNum;\r\n}\r\n\r\nexport const adjust530AddForDeathDate = (actualDateNum) => {\r\n  /* let modifiedDate = new Date(Number(actualDateNum));\r\n  if(modifiedDate.getHours()==0){\r\n  modifiedDate.setHours(modifiedDate.getHours() + 18);\r\n  modifiedDate.setMinutes(modifiedDate.getMinutes() + 30);\r\n  }\r\n  let modifiedDateNum = Number(modifiedDate);\r\n  return modifiedDateNum;  */\r\n  return actualDateNum;\r\n}\r\n\r\n\r\nexport const adjust530SubForMigration = (actualDateNum) => {\r\n  /* let modifiedDate = new Date(Number(actualDateNum));\r\n  if(modifiedDate.getHours()==0){\r\n  modifiedDate.setHours(modifiedDate.getHours() - 5);\r\n  modifiedDate.setMinutes(modifiedDate.getMinutes() - 30);\r\n  }\r\n  //let modifiedDateNum = Number(modifiedDate); */\r\n  //return modifiedDateNum;  \r\n  return actualDateNum;\r\n}\r\n\r\nexport const epochToYmd = et => {\r\n  // Return null if et already null\r\n  if (!et) return null;\r\n  // Return the same format if et is already a string (boundary case)\r\n  if (typeof et === \"string\") return et;\r\n  \r\n  let etAdjusted = adjust530AddForYMD(et);\r\n  let date = new Date(etAdjusted);\r\n  //let hours = date.getHours();\r\n  //if(hours>0){\r\n    //date = addDays(date, 1);\r\n  //}\r\n  let day = date.getDate() < 10 ? `0${date.getDate()}` : date.getDate();\r\n  let month =\r\n    date.getMonth() + 1 < 10 ? `0${date.getMonth() + 1}` : date.getMonth() + 1;\r\n  // date = `${date.getFullYear()}-${month}-${day}`;\r\n  var formatted_date = date.getFullYear() + \"-\" + month + \"-\" + day;\r\n  return formatted_date;\r\n};\r\n\r\nexport const epochToDmy = et => {\r\n  // Return null if et already null\r\n  if (!et) return null;\r\n  // Return the same format if et is already a string (boundary case)\r\n  if (typeof et === \"string\") return et;\r\n  let date = new Date(et);\r\n  let day = date.getDate() < 10 ? `0${date.getDate()}` : date.getDate();\r\n  let month =\r\n    date.getMonth() + 1 < 10 ? `0${date.getMonth() + 1}` : date.getMonth() + 1;\r\n  // date = `${date.getFullYear()}-${month}-${day}`;\r\n  var formatted_date =day + \"/\" +  month + \"/\" + date.getFullYear();\r\n  return formatted_date;\r\n};\r\n\r\n\r\n\r\n"]}