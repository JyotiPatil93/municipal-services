{"version":3,"sources":["../../src/api/searchWorkflow.js"],"names":["asyncHandler","require","config","db","api","post","request","res","next","response","ResponseInfo","body","RequestInfo","ProcessInstances","queryObj","JSON","parse","stringify","query","tenantId","mdms","errors","length","errorType","errorReponse","Errors","businessIds","workflowResponse","processInstances","currentState","state","documentsUpload","documentComment","actorAcccessLevel","employeeOtherDetailsUpdate","employeeLeaveUpdate","pensionCalculation","pensionDataUpdate","textDocument","sqlQueryDocument","workflowDocuments","err","dbRes","logger","error","stack","rows","text","sqlQuery","pensionEmployeeId","pension_employee_id","workflowHeader","txtEmployeeOtherDetails","workflowHeaderId","sqlEmployeeOtherDetails","employeeOtherDetails","txtPensionCalculation","sqlPensionCalculation","pensionCalculationDetails","pensionCalculationUpdateDetails","dependents","txtDependent","sqlQueryDependent","employee_hrms_code","employeeResponse","employee","Employees","textDocumentHistory","sqlQueryDocumentHistory","documentAudit","i","workflowDocumentAudit","x","documentType","documents","documentTypes","businessService","envVariables","EGOV_PENSION_RRP_BUSINESS_SERVICE","EGOV_PENSION_DOE_BUSINESS_SERVICE","EGOV_PENSION_DOP_BUSINESS_SERVICE","active","workflowDocument","code","fileStoreResponse","pensionAttachmentId","fileStoreId","url","fileStoreIds","indexOf","split","document","isMandatory","isMandatoryForCommutation","isMandatoryForNoGovtAccomodation","comment","push","employeeDisabilityResponse","employeeDisability","disabilityPercentage","woundExtraordinaryPension","attendantAllowanceGranted","json"],"mappings":"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","file":"searchWorkflow.js","sourcesContent":["import { Router } from \"express\";\nimport { requestInfoToResponseInfo, searchWorkflow,getFileDetails,searchEmployee, getEmployeeDisability} from \"../utils\";\nimport { mergeWorkflowHeader, mergeWorkflowDocumentSearchResults, mergeWorkflowDocumentAuditSearchResults,mergeLeaveSearchResults, mergeEmployeeOtherDetails, mergePensionCalculationDetails, mergePensionCalculationUpdateDetails,mergeDependentResults, mergeSearchEmployee,mergeAssignmentResults,mergeServiceHistoryResults } from \"../utils/search\";\nimport isEmpty from \"lodash/isEmpty\";\nimport get from \"lodash/get\";\nimport some from \"lodash/some\";\nimport { intConversion } from \"../utils/search\";\nimport { validateWorkflowSearchModel} from \"../utils/modelValidation\";\nimport envVariables from \"../envVariables\";\nimport mdmsData from \"../utils/mdmsData\";\nimport filter from \"lodash/filter\";\nconst asyncHandler = require(\"express-async-handler\");\n\nimport logger from \"../config/logger\";\n\nexport default ({ config, db }) => {\n  let api = Router();\n  api.post(\n    \"/_searchWorkflow\",\n    asyncHandler(async (request, res, next) => {     \n      \n      let response = {\n        ResponseInfo: requestInfoToResponseInfo(request.body.RequestInfo, true),\n        ProcessInstances: []//,\n        //ApplicationDetails: {},\n        //PaymentDetails: {}\n      };\n\n      const queryObj = JSON.parse(JSON.stringify(request.query));\n      \n\n      //getting mdms data\n      let mdms = await mdmsData(request.body.RequestInfo, queryObj.tenantId);\n      \n      \n      let errors = validateWorkflowSearchModel(queryObj);\n      if (errors.length > 0) {\n        next({\n          errorType: \"custom\",\n          errorReponse: {\n            ResponseInfo: requestInfoToResponseInfo(\n              request.body.RequestInfo,\n              true\n            ),\n            Errors: errors\n          }\n        });\n        return;\n      }\n      \n      let workflowResponse = await searchWorkflow(request.body.RequestInfo, queryObj.tenantId,queryObj.businessIds);\n      let processInstances=workflowResponse.ProcessInstances;      \n           \n\n      let currentState=\"\";\n      if(processInstances!=null && processInstances.length>0)\n      {\n        currentState=processInstances[0].state.state;\n      }\n      let documentsUpload;\n      let documentComment;\n      let actorAcccessLevel={};\n      switch(currentState)\n      {\n        case \"INITIATED\":\n          actorAcccessLevel=\n          {\n            employeeOtherDetailsUpdate: true,\n            employeeLeaveUpdate: true,            \n            pensionCalculation: false,\n            pensionDataUpdate: false\n          };\n          documentsUpload=true;\n          documentComment=false;\n          break;\n        case \"PENDING_FOR_DETAILS_VERIFICATION\":\n          actorAcccessLevel=\n          {\n            employeeOtherDetailsUpdate: false,\n            employeeLeaveUpdate: false,\n           \n            pensionCalculation: false,\n            pensionDataUpdate: false\n          };\n          documentsUpload= false;\n          documentComment= true;\n          break;\n        case \"PENDING_FOR_DETAILS_REVIEW\":\n          actorAcccessLevel=\n            {\n              employeeOtherDetailsUpdate: false,\n              employeeLeaveUpdate: false,             \n              pensionCalculation: false,\n              pensionDataUpdate: false\n            };\n            documentsUpload= false;\n            documentComment= true;\n            break;\n        case \"PENDING_FOR_CALCULATION\":\n          actorAcccessLevel=\n          {\n            employeeOtherDetailsUpdate: false,\n            employeeLeaveUpdate: false,           \n            pensionCalculation: true,\n            pensionDataUpdate: true\n          };\n          documentsUpload= false;\n          documentComment= false;\n          break;\n        case \"PENDING_FOR_CALCULATION_VERIFICATION\":\n          actorAcccessLevel=\n          {\n            employeeOtherDetailsUpdate: false,\n            employeeLeaveUpdate: false,           \n            pensionCalculation: false,\n            pensionDataUpdate: false\n          };\n          documentsUpload= false;\n          documentComment= false;\n          break; \n        case \"PENDING_FOR_CALCULATION_APPROVAL\":\n          actorAcccessLevel=\n          {\n            employeeOtherDetailsUpdate: false,\n            employeeLeaveUpdate: false,           \n            pensionCalculation: false,\n            pensionDataUpdate: false\n          };\n          documentsUpload= false;\n          documentComment= false;\n          break;   \n        case \"PENDING_FOR_CALCULATION_REVIEW\":\n          actorAcccessLevel=\n          {\n            employeeOtherDetailsUpdate: false,\n            employeeLeaveUpdate: false,            \n            pensionCalculation: false,\n            pensionDataUpdate: false\n          };\n          documentsUpload= false;\n          documentComment= true;\n          break;\n        case \"PENDING_FOR_APPROVAL\":\n          actorAcccessLevel=\n          {\n            employeeOtherDetailsUpdate: false,\n            employeeLeaveUpdate: false,           \n            pensionCalculation: false,\n            pensionDataUpdate: false\n          };\n          documentsUpload= false;\n          documentComment= false;\n          break;\n        case \"PENDING_FOR_AUDIT\":\n          actorAcccessLevel=\n          {\n            employeeOtherDetailsUpdate: false,\n            employeeLeaveUpdate: false,          \n            pensionCalculation: false,\n            pensionDataUpdate: false\n          };\n          documentsUpload= false;\n          documentComment= false;\n          break;\n        case \"PENDING_FOR_CONTINGENT_BILL_PREPARATION_WITH_ACCOUNTS_OFFICER\":\n          actorAcccessLevel=\n          {\n            employeeOtherDetailsUpdate: false,\n            employeeLeaveUpdate: false,           \n            pensionCalculation: false,\n            pensionDataUpdate: false\n          };\n          documentsUpload= false;\n          documentComment= false;\n          break;\n        case \"PENDING_FOR_CONTINGENT_BILL_PREPARATION_WITH_SENIOR_ASSISTANT\":\n          actorAcccessLevel=\n          {\n            employeeOtherDetailsUpdate: false,\n            employeeLeaveUpdate: false,           \n            pensionCalculation: false,\n            pensionDataUpdate: false\n          };\n          documentsUpload= false;\n          documentComment= false;\n          break;\n        case \"PENDING_FOR_CONTINGENT_BILL_PREPARATION_WITH_CLERK\":\n          actorAcccessLevel=\n          {\n            employeeOtherDetailsUpdate: false,\n            employeeLeaveUpdate: false,           \n            pensionCalculation: false,\n            pensionDataUpdate: false\n          };\n          documentsUpload= false;\n          documentComment= false;\n          break;\n        default:\n          actorAcccessLevel=\n          {\n            employeeOtherDetailsUpdate: false,\n            employeeLeaveUpdate: false,           \n            pensionCalculation: false,\n            pensionDataUpdate: false\n          };\n          documentsUpload= false;\n          documentComment= false;\n          break;\n  \n      }      \n            \n\n      //fetch uploaded documents  \n      let textDocument =\n        \"select pa.uuid, pa.file_store_id, pa.document_type from eg_pension_attachment pa join eg_pension_workflow_header pwh on pa.workflow_header_id =pwh.uuid\";\n\n      if (!isEmpty(queryObj)) {\n        textDocument = textDocument + \" where \";\n      }\n      /*\n      if (queryObj.tenantId) {\n        textDocument = `${textDocument} pa.tenantid = '${queryObj.tenantId}'`;\n      }\n      */\n      if (queryObj.businessIds) {\n        textDocument = `${textDocument} pwh.application_number = '${queryObj.businessIds}'`;\n      }             \n      textDocument = `${textDocument} and pa.active=true`;\n                  \n      let sqlQueryDocument=textDocument;\n      let workflowDocuments=[];     \n\n      db.query(sqlQueryDocument, async (err, dbRes) => {\n        if (err) {\n          logger.error(err.stack);\n        } \n        else {\n           workflowDocuments=dbRes.rows && !isEmpty(dbRes.rows)\n              ? await mergeWorkflowDocumentSearchResults(\n                  dbRes.rows,\n                  request.query,\n                  request.body.RequestInfo\n                )\n              : [];       \n                                  \n        }\n      });\n           \n      let text =\"select pe.employee_hrms_code, pe.date_of_retirement, pe.date_of_death, pwh.uuid, pwh.pension_employee_id, pwh.application_date from eg_pension_employee pe join eg_pension_workflow_header pwh on pe.uuid=pwh.pension_employee_id\";        \n\n      if (!isEmpty(queryObj)) {\n        text = text + \" where \";\n      }\n      if (queryObj.tenantId) {\n        text = `${text} pwh.tenantid = '${queryObj.tenantId}'`;\n      }\n      if (queryObj.businessIds) {\n        text = `${text} and pwh.application_number = '${queryObj.businessIds}'`;\n      }             \n            \n      let sqlQuery = text;      \n      \n     \n      db.query(sqlQuery, async (err, dbRes) => {\n        if (err) {\n          logger.error(err.stack);\n        } else {          \n          \n            let pensionEmployeeId= dbRes.rows[0].pension_employee_id;  \n            \n\n            let workflowHeader =\n            dbRes.rows && !isEmpty(dbRes.rows)\n              ? await mergeWorkflowHeader(\n                  dbRes.rows,\n                  request.query,\n                  request.body.RequestInfo\n                )\n              : {};         \n              \n              //employeeOtherDetails \n              let txtEmployeeOtherDetails =\"select workflow_state, ltc, lpd, pension_arrear, is_da_medical_admissible, fma, medical_relief, miscellaneous, over_payment, income_tax, cess, bank_address, account_number, claimant, wef, total_no_pay_leaves_days, dues, is_employment_active, is_convicted_serious_crime_or_grave_misconduct, is_any_judicial_proceeding_is_continuing, is_any_misconduct_insolvency_inefficiency, is_employee_dies_in_terrorist_attack, is_employee_dies_in_accidental_death, is_commutation_opted, reason_for_retirement, is_eligible_for_pension, is_dues_present, is_dues_amount_decided, is_dues_amount_decided, is_taken_monthly_pension_and_gratuity, is_taken_gratuity_commutation_terminal_benefit, is_taken_compensation_pension_and_gratuity, dies_in_extremists_dacoits_smuggler_antisocial_attack, is_compassionate_pension_granted, total_no_pay_leaves_months, total_no_pay_leaves_years, no_dues_for_avail_govt_accomodation, employee_group, date_of_contingent, bank_code, bank_ifsc from eg_pension_employee_other_details\";\n              if (!isEmpty(queryObj)) {\n                txtEmployeeOtherDetails = txtEmployeeOtherDetails + \" where \";\n              }                  \n              \n              if (workflowHeader.workflowHeaderId) {\n                txtEmployeeOtherDetails = `${txtEmployeeOtherDetails} workflow_header_id = '${workflowHeader.workflowHeaderId}'`;\n              }    \n                                             \n              let sqlEmployeeOtherDetails=txtEmployeeOtherDetails;\n              \n              let employeeOtherDetails={};\n\n              db.query(sqlEmployeeOtherDetails, async (err, dbRes) => {\n                if (err) {\n                  logger.error(err.stack);\n                } \n                else {                  \n                  employeeOtherDetails =\n                  dbRes.rows && !isEmpty(dbRes.rows)\n                    ? await mergeEmployeeOtherDetails(\n                        dbRes.rows,\n                        request.query,\n                        request.body.RequestInfo,\n                        mdms\n                      )\n                    : {};                         \n                }\n              });\n\n              //pensionCalculationDetails \n              let txtPensionCalculation =\"select basic_pension_sytem, pension_deductions_system, additional_pension_system, commuted_pension_system, commuted_value_system, family_pension_i_system, family_pension_ii_system, dcrg_system, net_deductions_system, final_calculated_pension_system, basic_pension_verified, pension_deductions_verified, additional_pension_verified, commuted_pension_verified, commuted_value_verified, family_pension_i_verified, family_pension_ii_verified, dcrg_verified, net_deductions_verified, final_calculated_pension_verified, interim_relief_system, da_system, interim_relief_verified, da_verified, nqs_year_system, nqs_month_system, nqs_day_system, nqs_year_verified, nqs_month_verified, nqs_day_verified, dues_deductions_system, compassionate_pension_system, compensation_pension_system, terminal_benefit_system, dues_deductions_verified, compassionate_pension_verified, compensation_pension_verified, terminal_benefit_verified, final_calculated_gratuity_system, final_calculated_gratuity_verified, family_pension_i_start_date_system, family_pension_i_start_date_verified, family_pension_i_end_date_system, family_pension_i_end_date_verified, family_pension_ii_start_date_system, family_pension_ii_start_date_verified, ex_gratia_system, ex_gratia_verified, pensioner_family_pension_system, pensioner_family_pension_verified, total_pension_system, total_pension_verified, provisional_pension_system, provisional_pension_verified, interim_relief_applicable, interim_relief_expression, basic_pension_applicable, basic_pension_expression, provisional_pension_applicable, provisional_pension_expression, compassionate_pension_applicable, compassionate_pension_expression, compensation_pension_applicable, compensation_pension_expression, commuted_pension_applicable, commuted_pension_expression, family_pension_i_applicable, family_pension_i_expression, family_pension_ii_applicable, family_pension_ii_expression, da_applicable, da_expression, additional_pension_applicable, additional_pension_expression, total_pension_applicable, total_pension_expression, pension_deductions_applicable, pension_deductions_expression, net_deductions_applicable, net_deductions_expression, final_calculated_pension_applicable, final_calculated_pension_expression, commutation_value_applicable, commutation_value_expression, dcrg_applicable, dcrg_expression, terminal_benefit_applicable, terminal_benefit_expression, dues_deductions_applicable, dues_deductions_expression, final_calculated_gratuity_applicable, final_calculated_gratuity_expression, ex_gratia_applicable, ex_gratia_expression, pensioner_family_pension_applicable, pensioner_family_pension_expression, invalid_pension_system, wound_extraordinary_pension_system, attendant_allowance_system, invalid_pension_verified, wound_extraordinary_pension_verified, attendant_allowance_verified, invalid_pension_applicable, invalid_pension_expression, wound_extraordinary_pension_applicable, wound_extraordinary_pension_expression, attendant_allowance_applicable, attendant_allowance_expression, gqs_year_system, gqs_month_system, gqs_day_system, gqs_year_verified, gqs_month_verified, gqs_day_verified, notification_text_system, notification_text_verified, interim_relief_lpd_system from eg_pension_calculation_details\";\n              if (!isEmpty(queryObj)) {\n                txtPensionCalculation = txtPensionCalculation + \" where \";\n              }               \n              if (workflowHeader.workflowHeaderId) {\n                txtPensionCalculation = `${txtPensionCalculation} workflow_header_id = '${workflowHeader.workflowHeaderId}'`;\n              }             \n                                             \n              let sqlPensionCalculation=txtPensionCalculation;\n              \n\n              let pensionCalculationDetails={};\n              let pensionCalculationUpdateDetails={};\n\n              db.query(sqlPensionCalculation, async (err, dbRes) => {\n                if (err) {\n                  logger.error(err.stack);\n                } \n                else {                  \n                                 \n                  pensionCalculationDetails =\n                  dbRes.rows && !isEmpty(dbRes.rows)\n                    ? await mergePensionCalculationDetails(\n                        dbRes.rows,\n                        request.query,\n                        request.body.RequestInfo\n                      )\n                    : {};                      \n                  pensionCalculationUpdateDetails =\n                  dbRes.rows && !isEmpty(dbRes.rows)\n                    ? await mergePensionCalculationUpdateDetails(\n                        dbRes.rows,\n                        request.query,\n                        request.body.RequestInfo\n                      )\n                    : {};                                     \n                  \n                }\n              });\n\n              //dependents\n              let dependents=[];\n              let txtDependent =\"SELECT name, dob, address, mobile_number, relationship, is_disabled, marital_status, is_holly_dependent, no_spouse_no_children, is_grandchild_from_deceased_son, is_eligible_for_gratuity, is_eligible_for_pension, gratuity_percentage, bank_account_number, bank_details, bank_code, bank_ifsc FROM eg_pension_dependent\";\n              if (!isEmpty(queryObj)) {\n                txtDependent = `${txtDependent} WHERE`\n              }\n              /*\n              if (queryObj.tenantId) {\n                txtDependent = `${txtDependent} tenantid = '${queryObj.tenantId}'`;\n              }\n              */\n              if (pensionEmployeeId) {\n                txtDependent = `${txtDependent} pension_employee_id = '${pensionEmployeeId}'`;\n              }             \n              txtDependent = `${txtDependent} AND active = true`;              \n                    \n              let sqlQueryDependent=txtDependent;\n                           \n\n              db.query(sqlQueryDependent, async (err, dbRes) => {\n                if (err) {\n                  logger.error(err.stack);\n                } \n                else {\n                  dependents=dbRes.rows && !isEmpty(dbRes.rows)\n                      ? await mergeDependentResults(\n                          dbRes.rows,\n                          request.query,\n                          request.body.RequestInfo,\n                          mdms\n                        )\n                      : [];                            \n                }\n              });       \n\n             \n              //fetch employee details from pension module   \n              \n              let employeeResponse = await searchEmployee(request.body.RequestInfo, queryObj.tenantId,dbRes.rows[0].employee_hrms_code);\n              \n              let employee=employeeResponse.Employees[0];  \n                           \n              /*\n              //leaves\n              let textLeave =\"select leave_type, leave_from, leave_to, leave_count from tbl_pension_employee_leave\";\n\n              if (!isEmpty(queryObj)) {\n                textLeave = textLeave + \" where \";\n              }\n              if (queryObj.tenantId) {\n                textLeave = `${textLeave} tenantid = '${queryObj.tenantId}'`;\n              }\n              if (dbRes.rows[0].pension_employee_id) {\n                textLeave = `${textLeave} and pension_employee_id = '${dbRes.rows[0].pension_employee_id}'`;\n              }             \n              textLeave = `${textLeave} and active=true`;              \n                    \n              let sqlQueryLeave=textLeave;\n              \n              let leaves=[];\n\n              db.query(sqlQueryLeave, async (err, dbRes) => {\n                if (err) {\n                  logger.error(err.stack);\n                } \n                else {\n                  leaves=dbRes.rows && !isEmpty(dbRes.rows)\n                      ? await mergeLeaveSearchResults(\n                          dbRes.rows,\n                          request.query,\n                          request.body.RequestInfo\n                        )\n                      : []; \n\n                  const leaveTypes=get(mdms,\"MdmsRes.pension.EmployeeLeaveType\");      \n                  for (var i = 0; i < leaves.length; i++) {\n                    let leave=filter(leaveTypes,function(x){return x.code===leaves[i].leaveType;});                                    \n                    leaves[i].leaveTypeName=leave.length>0?leave[0].name:\"\";\n                  }\n                                    \n                }\n              });         \n              */\n\n              //document audit\n              \n              let textDocumentHistory = \"SELECT pau.document_type, pau.state, pau.comment, pau.created_by from eg_pension_attachment_audit pau join eg_pension_attachment pa on pau.pension_attachment_id=pa.uuid\";\n        \n              if (!isEmpty(queryObj)) {\n                textDocumentHistory = textDocumentHistory + \" WHERE \";\n              }                \n              if (queryObj.tenantId) {\n                textDocumentHistory = `${textDocumentHistory} pa.tenantid = '${queryObj.tenantId}'`;\n              }     \n              /*           \n              if (workflowDocuments[i].pensionAttachmentId) {\n                textDocumentHistory = `${textDocumentHistory} AND pa.document_type = '${workflowDocuments[i].documentType}'`;\n              } \n              */    \n              if (workflowHeader.workflowHeaderId) {\n                textDocumentHistory = `${textDocumentHistory} and pa.workflow_header_id = '${workflowHeader.workflowHeaderId}'`;\n              }     \n              textDocumentHistory = `${textDocumentHistory} and pa.active = true`;                    \n\n            \n              let sqlQueryDocumentHistory=textDocumentHistory;\n                            \n              let documentAudit=[];//uploaded documents history\n      \n              db.query(sqlQueryDocumentHistory, async (err, dbRes) => {\n                if (err) {\n                  logger.error(err.stack);\n                } \n                else {                    \n                  documentAudit=dbRes.rows && !isEmpty(dbRes.rows)\n                      ? await mergeWorkflowDocumentAuditSearchResults(\n                          dbRes.rows,\n                          request.query,\n                          request.body.RequestInfo\n                        )\n                      : [];                                          \n                  for (var i = 0; i < workflowDocuments.length; i++) { \n                    let workflowDocumentAudit=filter(documentAudit,function(x){return x.documentType==workflowDocuments[i].documentType;});\n                    workflowDocuments[i].documentAudit=workflowDocumentAudit;                          \n                  }                                                                                \n                }\n              });        \n              \n                    \n              let documents=[];\n              let documentTypes=[]\n              switch(processInstances[0].businessService)\n              {\n                case envVariables.EGOV_PENSION_RRP_BUSINESS_SERVICE:\n                  documentTypes=get(mdms,\"MdmsRes.pension.DocumentType_RRP\");                  \n                  break;\n                case envVariables.EGOV_PENSION_DOE_BUSINESS_SERVICE:\n                  documentTypes=get(mdms,\"MdmsRes.pension.DocumentType_DOE\");                  \n                  break;\n                case envVariables.EGOV_PENSION_DOP_BUSINESS_SERVICE:\n                  documentTypes=get(mdms,\"MdmsRes.pension.DocumentType_DOP\");                  \n                  break;\n              }   \n              documentTypes=filter(documentTypes,function(x){return x.active==true;});\n\n              for (var i = 0; i < documentTypes.length; i++) {                       \n                //find the document in uploaded documents\n                let workflowDocument=filter(workflowDocuments,function(x){return x.documentType==documentTypes[i].code;});\n                let fileStoreResponse;\n                let pensionAttachmentId=\"\";\n                let fileStoreId=\"\";\n                let url=\"\";\n                let documentAudit=[];\n                \n                if(workflowDocument.length>0)\n                {       \n                  pensionAttachmentId =workflowDocument[0].pensionAttachmentId;                \n                  fileStoreId=workflowDocument[0].fileStoreId;\n                  fileStoreResponse=await getFileDetails(queryObj.tenantId,workflowDocument[0].fileStoreId);\n                  if(!isEmpty(fileStoreResponse) && fileStoreResponse.fileStoreIds.length>0)\n                  {\n                    url=fileStoreResponse.fileStoreIds[0].url;\n                    if(url.indexOf(\",\")>=0)\n                    {\n                      url=url.split(\",\")[0];\n                    }\n                  }\n                  documentAudit=workflowDocument[0].documentAudit;\n          \n                }\n\n                let document={ \n                  pensionAttachmentId: pensionAttachmentId,\n                  fileStoreId: fileStoreId,\n                  documentType: documentTypes[i].code,\n                  //documentTypeName: documentTypes[i].name,\n                  isMandatory: documentTypes[i].isMandatory,\n                  isMandatoryForCommutation: documentTypes[i].isMandatoryForCommutation,\n                  isMandatoryForNoGovtAccomodation: documentTypes[i].isMandatoryForNoGovtAccomodation,\n                  url: url,\n                  comment: \"\",\n                  documentsUpload: documentsUpload,\n                  documentComment: documentComment,\n                  documentAudit: documentAudit\n\n                };\n                \n                documents.push(document);\n              }                  \n               \n              let employeeDisabilityResponse= await getEmployeeDisability(request.body.RequestInfo,queryObj.tenantId,employee.code);             \n              let employeeDisability={\n                disabilityPercentage: employeeDisabilityResponse.Employees.length>0? employeeDisabilityResponse.Employees[0].disabilityPercentage:null,\n                woundExtraordinaryPension:employeeDisabilityResponse.Employees.length>0? employeeDisabilityResponse.Employees[0].woundExtraordinaryPension:null,\n                attendantAllowanceGranted: employeeDisabilityResponse.Employees.length>0? employeeDisabilityResponse.Employees[0].attendantAllowanceGranted:false\n              }\n              for (var i = 0; i < processInstances.length; i++) { \n                processInstances[i].comment=\"\";\n                processInstances[i].documents=  documents; \n                processInstances[i].workflowHeader=  workflowHeader; \n                processInstances[i].employee=  employee;   \n                processInstances[i].employeeOtherDetails= employeeOtherDetails;                                                                                           \n                //processInstances[i].leaves= leaves;                      \n                processInstances[i].pensionCalculationDetails= pensionCalculationDetails;\n                processInstances[i].pensionCalculationUpdateDetails= pensionCalculationUpdateDetails;\n                processInstances[i].dependents= dependents;\n                processInstances[i].actorAcccessLevel= actorAcccessLevel;\n                processInstances[i].employeeDisability=employeeDisability; \n              }\n              /*\n              let applicationDetails={\n                businessId: processInstances[0].businessId,\n                name: processInstances[0].employee.user.name,\n                dob: epochToDmy(intConversion(processInstances[0].employee.user.dob)) ,\n                dateOfRetirement: epochToDmy(intConversion(processInstances[0].employee.dateOfRetirement)) ,                \n                permanentAddress: processInstances[0].employee.user.permanentAddress,\n                permanentCity: processInstances[0].employee.user.permanentCity,\n                permanentPinCode: processInstances[0].employee.user.permanentPinCode,\n                serviceStatus: processInstances[0].employee.serviceHistory[0].serviceStatus,\n                serviceFrom: epochToDmy(intConversion( processInstances[0].employee.serviceHistory[0].serviceFrom)) ,                \n                serviceTo: processInstances[0].employee.serviceHistory[0].serviceTo!=null? epochToDmy(intConversion( processInstances[0].employee.serviceHistory[0].serviceTo)):null,\n                reasonForRetirement: processInstances[0].employeeOtherDetails.reasonForRetirement,\n                isEligibleForPension: processInstances[0].employeeOtherDetails.isEligibleForPension,\n                isTakenMonthlyPensionAndGratuity: processInstances[0].employeeOtherDetails.isTakenMonthlyPensionAndGratuity,\n                isTakenGratuityCommutationTerminalBenefit: processInstances[0].employeeOtherDetails.isTakenGratuityCommutationTerminalBenefit,\n                isTakenCompensationPensionAndGratuity: processInstances[0].employeeOtherDetails.isTakenCompensationPensionAndGratuity,\n                totalNoPayLeaves: processInstances[0].employeeOtherDetails.totalNoPayLeaves,\n                lpd: processInstances[0].employeeOtherDetails.lpd,\n                incomeTax: processInstances[0].employeeOtherDetails.incomeTax,\n                overPayment: processInstances[0].employeeOtherDetails.overPayment,\n                medicalRelief: processInstances[0].employeeOtherDetails.medicalRelief,\n                miscellaneous: processInstances[0].employeeOtherDetails.miscellaneous,\n                isDuesPresent: processInstances[0].employeeOtherDetails.isDuesPresent,\n                isDuesAmountDecided: processInstances[0].employeeOtherDetails.isDuesAmountDecided,\n                dues: processInstances[0].employeeOtherDetails.dues,\n                isConvictedSeriousCrimeOrGraveMisconduct: processInstances[0].employeeOtherDetails.isConvictedSeriousCrimeOrGraveMisconduct,\n                isAnyJudicialProceedingIsContinuing: processInstances[0].employeeOtherDetails.isAnyJudicialProceedingIsContinuing,\n                isAnyMisconductInsolvencyInefficiency: processInstances[0].employeeOtherDetails.isAnyMisconductInsolvencyInefficiency,\n                isCompassionatePensionGranted: processInstances[0].employeeOtherDetails.isCompassionatePensionGranted,\n                isCommutationOpted: processInstances[0].employeeOtherDetails.isCommutationOpted,\n                isCommutationOpted: processInstances[0].employeeOtherDetails.isCommutationOpted,\n              }\n\n              let paymentDetails={         \n                businessId: processInstances[0].businessId,       \n                name: processInstances[0].employee.user.name,  \n                dob: epochToDmy(intConversion(processInstances[0].employee.user.dob)) ,\n                dateOfRetirement: epochToDmy(intConversion(processInstances[0].employee.dateOfRetirement)) ,                             \n                permanentAddress: processInstances[0].employee.user.permanentAddress,\n                permanentCity: processInstances[0].employee.user.permanentCity,\n                permanentPinCode: processInstances[0].employee.user.permanentPinCode,\n                serviceFrom: epochToDmy(intConversion( processInstances[0].employee.serviceHistory[0].serviceFrom)) ,                                \n                lpd: processInstances[0].employeeOtherDetails.lpd,                \n                nqsYearVerified: processInstances[0].pensionCalculationUpdateDetails.nqsYearVerified,\n                nqsMonthVerified: processInstances[0].pensionCalculationUpdateDetails.nqsMonthVerified,\n                nqsDayVerified: processInstances[0].pensionCalculationUpdateDetails.nqsDayVerified,\n                finalCalculatedPensionVerified: processInstances[0].pensionCalculationUpdateDetails.finalCalculatedPensionVerified,\n                dcrgVerified: processInstances[0].pensionCalculationUpdateDetails.dcrgVerified,\n                accountNumber: processInstances[0].employeeOtherDetails.accountNumber,\n                bankAddress: processInstances[0].employeeOtherDetails.bankAddress\n              }\n              */\n\n\n              response.ProcessInstances=processInstances;      \n              //response.ApplicationDetails=applicationDetails;  \n              //response.PaymentDetails=paymentDetails;\n              res.json(response);\n              \n              \n        }\n      });     \n    })\n  );\n  return api;\n};\n"]}