{"version":3,"sources":["../../src/api/getPensionRevisions.js"],"names":["asyncHandler","require","config","db","api","post","request","res","next","response","ResponseInfo","body","RequestInfo","ProcessInstances","queryObj","JSON","parse","stringify","query","text","tenantId","String","toUpperCase","sqlQuery","pensionerPensionRevision","processInstances","err","dbRes","logger","error","stack","rows","pensionRevision","push","json"],"mappings":";;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;AAGA;;;;;;AAFA,IAAMA,eAAeC,QAAQ,uBAAR,CAArB;;kBAIe,gBAAoB;AAAA,MAAjBC,MAAiB,QAAjBA,MAAiB;AAAA,MAATC,EAAS,QAATA,EAAS;;AACjC,MAAIC,MAAM,sBAAV;AACAA,MAAIC,IAAJ,CACE,uBADF,EAEEL;AAAA,yFAAa,kBAAOM,OAAP,EAAgBC,GAAhB,EAAqBC,IAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAEPC,sBAFO,GAEI;AACbC,8BAAc,sCAA0BJ,QAAQK,IAAR,CAAaC,WAAvC,EAAoD,IAApD,CADD;AAEbC,kCAAkB;AAFL,eAFJ;AAOLC,sBAPK,GAOMC,KAAKC,KAAL,CAAWD,KAAKE,SAAL,CAAeX,QAAQY,KAAvB,CAAX,CAPN;AAUPC,kBAVO,GAUD,gsBAVC;;;AAYX,kBAAIL,SAASM,QAAb,EAAuB;AACrBD,uBAAUA,IAAV,mCAA4CE,OAAOP,SAASM,QAAhB,EAA0BE,WAA1B,EAA5C;AACD;;AAEGC,sBAhBO,GAgBIJ,IAhBJ;AAoBPK,sCApBO,GAoBkB,EApBlB;AAqBPC,8BArBO,GAqBU,EArBV;;AAsBXtB,iBAAGe,KAAH,CAASK,QAAT;AAAA,qGAAmB,iBAAOG,GAAP,EAAYC,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACbD,GADa;AAAA;AAAA;AAAA;;AAEfE,2CAAOC,KAAP,CAAaH,IAAII,KAAjB;AAFe;AAAA;;AAAA;AAAA,gCAMbH,MAAMI,IAAN,IAAc,CAAC,uBAAQJ,MAAMI,IAAd,CANF;AAAA;AAAA;AAAA;;AAAA;AAAA,iCAOH,yCACJJ,MAAMI,IADF,EAEJzB,QAAQY,KAFJ,EAGJZ,QAAQK,IAAR,CAAaC,WAHT,CAPG;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,wCAYT,EAZS;;AAAA;AAKfY,kDALe;AAcPQ,yCAdO,GAcS;AAClBA,6CAAgBR;AADE,2BAdT;;AAiBXC,2CAAiBQ,IAAjB,CAAsBD,eAAtB;AACAvB,mCAASI,gBAAT,GAA0BY,gBAA1B;AACAlB,8BAAI2B,IAAJ,CAASzB,QAAT;;AAnBW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAnB;;AAAA;AAAA;AAAA;AAAA;;AAtBW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAb;;AAAA;AAAA;AAAA;AAAA,MAFF;AAiDA,SAAOL,GAAP;AACD,C","file":"getPensionRevisions.js","sourcesContent":["import { Router } from \"express\";\nimport { requestInfoToResponseInfo } from \"../utils\";\nimport { mergePensionRevisionResults } from \"../utils/search\";\nimport isEmpty from \"lodash/isEmpty\";\nimport get from \"lodash/get\";\nimport some from \"lodash/some\";\nimport { actions } from \"../utils/search\";\nimport envVariables from \"../envVariables\";\nimport mdmsData from \"../utils/mdmsData\";\nimport filter from \"lodash/filter\";\nconst asyncHandler = require(\"express-async-handler\");\n\nimport logger from \"../config/logger\";\n\nexport default ({ config, db }) => {\n  let api = Router();\n  api.post(\n    \"/_getPensionRevisions\",\n    asyncHandler(async (request, res, next) => {  \n      \n      let response = {\n        ResponseInfo: requestInfoToResponseInfo(request.body.RequestInfo, true),\n        ProcessInstances: []\n      };      \n     \n      const queryObj = JSON.parse(JSON.stringify(request.query));\n      \n\n      let text =\"select pp.tenantid, pp.pensioner_number, pr.pensioner_id, pe.date_of_birth, pe.date_of_retirement, pr.pensioner_final_calculated_benefit_id, pr.uuid, pr.effective_start_year, pr.effective_start_month, pr.effective_end_year, pr.effective_end_month, pension_arrear, miscellaneous, over_payment, income_tax, cess, basic_pension, additional_pension, commuted_pension, net_deductions, final_calculated_pension, interim_relief, da, total_pension, pension_deductions, fma, wound_extraordinary_pension, attendant_allowance from eg_pension_pensioner pp join eg_pension_revision pr on pp.uuid=pr.pensioner_id join eg_pension_employee pe on pe.uuid = pp.pension_employee_id where pp.active=true and pr.active=true\";\n               \n      if (queryObj.tenantId) {\n        text = `${text} and upper(pp.tenantid) = '${String(queryObj.tenantId).toUpperCase()}' `;\n      }\n      \n      let sqlQuery = text;\n      \n      \n\n      let pensionerPensionRevision=[];      \n      let processInstances=[];\n      db.query(sqlQuery, async (err, dbRes) => {\n        if (err) {\n          logger.error(err.stack);\n        } else {\n          \n          pensionerPensionRevision =\n            dbRes.rows && !isEmpty(dbRes.rows)\n              ? await mergePensionRevisionResults(\n                  dbRes.rows,\n                  request.query,\n                  request.body.RequestInfo\n                )\n              : [];   \n              \n              let pensionRevision={                \n                pensionRevision:pensionerPensionRevision   \n              };\n              processInstances.push(pensionRevision);  \n              response.ProcessInstances=processInstances;                                                              \n              res.json(response); \n        }\n      });\n       \n    })\n  );\n  return api;\n};\n"]}