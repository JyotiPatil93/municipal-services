{"version":3,"sources":["../../src/api/getPensionEmployees.js"],"names":["asyncHandler","require","config","db","api","post","request","res","next","text","query","queryObj","JSON","parse","stringify","tenantId","code","name","String","toUpperCase","dob","modifiedQueryDobNum","departments","sqlQuery","employees","err","dbRes","logger","error","stack","rows","body","RequestInfo","response","ResponseInfo","Employees","json"],"mappings":";;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;;;AACA;;;;AACA;;;;AAEA;;AACA;;;;AACA;;;;AACA;;;;AAGA;;;;;;AAFA,IAAMA,eAAeC,QAAQ,uBAAR,CAArB;;kBAIe,gBAAoB;AAAA,MAAjBC,MAAiB,QAAjBA,MAAiB;AAAA,MAATC,EAAS,QAATA,EAAS;;AACjC,MAAIC,MAAM,sBAAV;AACAA,MAAIC,IAAJ,CACE,uBADF,EAEEL;AAAA,yFAAa,kBAAOM,OAAP,EAAgBC,GAAhB,EAAqBC,IAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAGRC,kBAHQ,GAGF,kgBAHE;;;AAKZ,kBAAGH,QAAQI,KAAX,EAAkB;AACXC,wBADW,GACAC,KAAKC,KAAL,CAAWD,KAAKE,SAAL,CAAeR,QAAQI,KAAvB,CAAX,CADA;;;AAGjBD,uBAAUA,IAAV;;AAEA,oBAAIE,SAASI,QAAb,EAAuB;AACrBN,yBAAUA,IAAV,wBAAiCE,SAASI,QAA1C;AACD;AACD,oBAAIJ,SAASK,IAAb,EAAmB;AACjBP,yBAAUA,IAAV,sCAA+CE,SAASK,IAAxD;AACD;AACD,oBAAIL,SAASM,IAAb,EAAmB;AACjBR,yBAAUA,IAAV,mCAA4CS,OAAOP,SAASM,IAAhB,EAAsBE,WAAtB,EAA5C;AACD;AACD,oBAAIR,SAASS,GAAb,EAAkB;AACZC,qCADY,GACU,sBAAUV,SAASS,GAAnB,CADV;AAEhB;;AACAX,yBAAUA,IAAV,gCAAyCY,mBAAzC;AACD;;AAED,oBAAIV,SAASW,WAAb,EAA0B;AACxBb,yBAAUA,IAAV,+BAAwCS,OAAOP,SAASW,WAAhB,CAAxC;AACD;AAED;AACIC,sBA9BO,GA8BId,IA9BJ;AAgCPe,uBAhCO,GAgCG,EAhCH;;AAiCXrB,iBAAGO,KAAH,CAASa,QAAT;AAAA,qGAAmB,iBAAOE,GAAP,EAAYC,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACbD,GADa;AAAA;AAAA;AAAA;;AAEfE,2CAAOC,KAAP,CAAaH,IAAII,KAAjB;AAFe;AAAA;;AAAA;AAAA,gCAKXH,MAAMI,IAAN,IAAc,CAAC,uBAAQJ,MAAMI,IAAd,CALJ;AAAA;AAAA;AAAA;;AAAA;AAAA,iCAMD,yCACJJ,MAAMI,IADF,EAEJxB,QAAQI,KAFJ,EAGJJ,QAAQyB,IAAR,CAAaC,WAHT,CANC;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,wCAWP,EAXO;;AAAA;AAIfR,mCAJe;AAaXS,kCAbW,GAaA;AACbC,0CAAc,sCAA0B5B,QAAQyB,IAAR,CAAaC,WAAvC,EAAoD,IAApD,CADD;AAEbG,uCAAWX;AAFE,2BAbA;;AAiBfjB,8BAAI6B,IAAJ,CAASH,QAAT;;AAjBe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAnB;;AAAA;AAAA;AAAA;AAAA;;AAjCW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAb;;AAAA;AAAA;AAAA;AAAA,MAFF;AA0DA,SAAO7B,GAAP;AACD,C","file":"getPensionEmployees.js","sourcesContent":["import { Router } from \"express\";\nimport { requestInfoToResponseInfo, adjust530 } from \"../utils\";\nimport { mergeSearchEmployee,mergeAssignmentResults,mergeServiceHistoryResults,mergePensionEmployeeResults } from \"../utils/search\";\nimport isEmpty from \"lodash/isEmpty\";\nimport get from \"lodash/get\";\nimport some from \"lodash/some\";\nimport { actions } from \"../utils/search\";\nimport { validatePensionNotificationRegisterSearchModel } from \"../utils/modelValidation\";\nimport envVariables from \"../envVariables\";\nimport mdmsData from \"../utils/mdmsData\";\nimport filter from \"lodash/filter\";\nconst asyncHandler = require(\"express-async-handler\");\n\nimport logger from \"../config/logger\";\n\nexport default ({ config, db }) => {\n  let api = Router();\n  api.post(\n    \"/_getPensionEmployees\",\n    asyncHandler(async (request, res, next) => {     \n      \n     \n     let text =\"SELECT pe.uuid, pe.tenantid, pe.employee_hrms_id, pe.employee_hrms_code, pe.name, pe.date_of_birth, pe.date_of_retirement, pe.date_of_death, pe.active, pe.created_by, pe.last_modified_by, pe.created_date, pe.last_modified_date, pe.employee_hrms_uuid, pe.salutation, pe.gender, pe.employee_status, pe.employee_type, pe.date_of_appointment, pea.department, pea.designation FROM eg_pension_employee pe join eg_pension_employee_assignment pea on pea.pension_employee_id = pe.uuid and pea.is_pension_applicable = true\"\n      \n     if(request.query ){\n      const queryObj = JSON.parse(JSON.stringify(request.query));\n\n      text = `${text} WHERE`;\n\n      if (queryObj.tenantId) {\n        text = `${text} pe.tenantid = '${queryObj.tenantId}'`;\n      }\n      if (queryObj.code) {\n        text = `${text} and pe.employee_hrms_code = '${queryObj.code}'`;\n      }\n      if (queryObj.name) {\n        text = `${text} and upper(pe.name) like '%${String(queryObj.name).toUpperCase()}%'`;\n      }\n      if (queryObj.dob) {\n        let modifiedQueryDobNum = adjust530(queryObj.dob);\n        //text = `${text} and date_of_birth = ${queryObj.dob}`;\n        text = `${text} and pe.date_of_birth = ${modifiedQueryDobNum}`;\n      }\n\n      if (queryObj.departments) {\n        text = `${text} and pea.department = '${String(queryObj.departments)}'`;\n      }\n\n     }\n      let sqlQuery = text;      \n      \n      let employees=[];\n      db.query(sqlQuery, async (err, dbRes) => {\n        if (err) {\n          logger.error(err.stack);\n        } else {        \n          employees =\n              dbRes.rows && !isEmpty(dbRes.rows)\n                ? await mergePensionEmployeeResults(\n                    dbRes.rows,\n                    request.query,\n                    request.body.RequestInfo\n                  )\n                : [];  \n                \n          let response = {\n            ResponseInfo: requestInfoToResponseInfo(request.body.RequestInfo, true),\n            Employees: employees\n          };                                \n          res.json(response);          \n        }  \n      });    \n      \n    })\n  );\n  return api;\n};\n"]}