{"version":3,"sources":["../../src/api/pushEmployeesToPensionNotificationRegister.js"],"names":["asyncHandler","require","config","db","api","post","res","next","body","pensionNotApplicableFromYear","envVariables","EGOV_PENSION_NOT_APPLICABLE_FROM_YEAR","RequestInfo","EGOV_PENSION_SCHEDULAR_TENANTID","hrmsResponse","hrmsEmployees","Employees","x","dateOfAppointment","Date","getFullYear","serviceHistory","length","serviceFrom","pensionResponse","pensionEmployeesList","nextNMonths","EGOV_PENSION_PNR_SCHEDULAR_NEXT_N_MONTHS","today","createdDate","getMonth","getDate","nextNMonthEndDate","queryResult","pensionEmployees","i","user","dob","pensionEmployeesFilter","code","tenantId","dateOfSuperannuation","actualDateOfSuperannuation","actualDob","employee","pensionEmployeeId","id","name","dateOfRetirement","dateOfDeath","uuid","salutation","gender","employeeStatus","employeeType","pensionEmployeeAuditId","active","notificationRegister","pensionNotificationRegisterId","isInitiated","pensionNotificationRegisterAuditId","auditDetails","createdBy","userInfo","lastModifiedBy","lastModifiedDate","push","logger","debug","JSON","stringify","requestBody","response","json"],"mappings":"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","file":"pushEmployeesToPensionNotificationRegister.js","sourcesContent":["import { Router } from \"express\";\r\nimport producer from \"../kafka/producer\";\r\nimport { requestInfoToResponseInfo, epochToYmd,convertDateToEpoch,uuidv1,getEmployeeDetails,getPensionEmployees,saveEmployeeToPensionNotificationRegister} from \"../utils\";\r\nimport envVariables from \"../envVariables\";\r\nimport mdmsData from \"../utils/mdmsData\";\r\nimport { Message} from \"../utils/message\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport set from \"lodash/set\";\r\nimport get from \"lodash/get\";\r\nimport filter from \"lodash/filter\";\r\nimport { intConversion} from \"../utils/search\";\r\nimport {userDetails} from \"../services/userService.js\";\r\nconst asyncHandler = require(\"express-async-handler\");\r\n\r\nimport logger from \"../config/logger\";\r\n\r\nexport default ({ config, db }) => {\r\n  let api = Router();\r\n  api.post(\r\n    \"/_pushEmployeesToPensionNotificationRegister\",\r\n    asyncHandler(async ({ body }, res, next) => {      \r\n      \r\n      \r\n     \r\n      let pensionNotApplicableFromYear=envVariables.EGOV_PENSION_NOT_APPLICABLE_FROM_YEAR;\r\n      let hrmsResponse=await getEmployeeDetails(body.RequestInfo,envVariables.EGOV_PENSION_SCHEDULAR_TENANTID);      \r\n      \r\n      let hrmsEmployees=[];\r\n      hrmsEmployees=hrmsResponse.Employees;\r\n      hrmsEmployees=filter(hrmsEmployees,function(x){return (x.dateOfAppointment!=null && new Date(epochToYmd(intConversion(x.dateOfAppointment))).getFullYear()<pensionNotApplicableFromYear)\r\n                            || (x.serviceHistory!=null && x.serviceHistory.length>0 && x.serviceHistory[0].serviceFrom!=null && new Date(epochToYmd(intConversion(x.serviceHistory[0].serviceFrom))).getFullYear()<pensionNotApplicableFromYear);});\r\n\r\n      \r\n      let pensionResponse=await getPensionEmployees(body.RequestInfo,envVariables.EGOV_PENSION_SCHEDULAR_TENANTID);   \r\n      let pensionEmployeesList=pensionResponse.Employees;\r\n      \r\n            \r\n      let nextNMonths=envVariables.EGOV_PENSION_PNR_SCHEDULAR_NEXT_N_MONTHS;\r\n      let today=new Date();  \r\n      let createdDate=convertDateToEpoch(`${today.getFullYear()}-${today.getMonth()+1}-${today.getDate()}`,\"dob\");\r\n      \r\n      let nextNMonthEndDate=new Date(today.getFullYear(),today.getMonth()+nextNMonths,today.getDate());  \r\n    \r\n      let queryResult=hrmsEmployees;  \r\n      let pensionEmployees=[];\r\n      \r\n      for (var i = 0; i < queryResult.length; i++) {    \r\n        if(queryResult[i].user!=null && queryResult[i].user.dob!=null){\r\n        \r\n          let pensionEmployeesFilter=[];\r\n          if(pensionEmployeesList.length>0){\r\n            pensionEmployeesFilter=filter(pensionEmployeesList,function(x){return x.code==queryResult[i].code;})\r\n          }\r\n\r\n          \r\n\r\n          //employee not exist in pension module\r\n          if(pensionEmployeesFilter.length==0){     \r\n            \r\n            let tenantId=queryResult[i].tenantId;\r\n            let dob=queryResult[i].user.dob;\r\n            let dateOfSuperannuation=queryResult[i].dateOfSuperannuation;\r\n            let actualDateOfSuperannuation=new Date(epochToYmd(intConversion(dateOfSuperannuation))); \r\n          \r\n            let actualDob=new Date(epochToYmd(intConversion(dob)));                    \r\n\r\n            \r\n\r\n            if(actualDateOfSuperannuation<=nextNMonthEndDate && actualDateOfSuperannuation>today){\r\n              let employee={\r\n                pensionEmployeeId: uuidv1(),\r\n                tenantId: tenantId,\r\n                id: queryResult[i].id,\r\n                code: queryResult[i].code,\r\n                name: queryResult[i].user.name,\r\n                dob: dob,\r\n                //dateOfRetirement: dateOfRetirement,\r\n                dateOfRetirement: dateOfSuperannuation,\r\n                dateOfDeath: null,          \r\n                uuid: queryResult[i].uuid,  \r\n                salutation: queryResult[i].user.salutation,      \r\n                gender: queryResult[i].user.gender, \r\n                employeeStatus: queryResult[i].employeeStatus, \r\n                employeeType: queryResult[i].employeeType, \r\n                dateOfAppointment: queryResult[i].dateOfAppointment, \r\n                pensionEmployeeAuditId: uuidv1(),    \r\n                active: true,    \r\n                notificationRegister: {\r\n                  pensionNotificationRegisterId: uuidv1(),      \r\n                  isInitiated: null,        \r\n                  pensionNotificationRegisterAuditId: uuidv1()        \r\n                },      \r\n                auditDetails: {\r\n                  createdBy: body.RequestInfo.userInfo.uuid,\r\n                  lastModifiedBy: null,\r\n                  createdDate: createdDate,      \r\n                  lastModifiedDate: null        \r\n                }      \r\n              };\r\n          \r\n              pensionEmployees.push(employee);\r\n\r\n            }\r\n          }        \r\n        }\r\n      }\r\n      \r\n      logger.debug(\"pensionEmployees\", JSON.stringify(pensionEmployees));\r\n\r\n      let requestBody = {\r\n        RequestInfo: body.RequestInfo,\r\n        Employees: pensionEmployees\r\n      };\r\n      \r\n      let response=await saveEmployeeToPensionNotificationRegister(requestBody);\r\n      res.json(response);\r\n                      \r\n    })\r\n  );\r\n  return api;\r\n};\r\n"]}