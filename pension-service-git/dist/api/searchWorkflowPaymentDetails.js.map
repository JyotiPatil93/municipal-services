{"version":3,"sources":["../../src/api/searchWorkflowPaymentDetails.js"],"names":["asyncHandler","require","config","db","api","post","request","res","next","queryObj","JSON","parse","stringify","query","body","RequestInfo","tenantId","businessIds","workflowSearchResponse","logger","debug","processInstances","ProcessInstances","businessService","businessId","paymentOrderNumber","String","substring","length","date","Date","day","getDate","month","getMonth","formatted_date","getFullYear","bankAccountNumber","bankDetails","bankIfsc","dependents","dependentEligibleForPension","envVariables","EGOV_PENSION_RRP_BUSINESS_SERVICE","EGOV_PENSION_DOE_BUSINESS_SERVICE","EGOV_PENSION_DOP_BUSINESS_SERVICE","employeeOtherDetails","accountNumber","bankName","x","isEligibleForPension","paymentDetails","name","employee","user","dob","designation","assignments","department","dateOfRetirement","dateOfDeath","permanentAddress","permanentCity","permanentPinCode","fatherOrHusbandName","dateOfAppointment","reasonForRetirement","lpd","totalNoPayLeavesYears","totalNoPayLeavesMonths","totalNoPayLeavesDays","bankAddress","gqsYearVerified","pensionCalculationUpdateDetails","gqsMonthVerified","gqsDayVerified","nqsYearVerified","nqsMonthVerified","nqsDayVerified","pensionEligibleDependentName","benefits","pensionCalculationDetails","interimReliefApplicable","push","interimReliefLpdSystem","basicPensionApplicable","basicPensionVerified","basicPensionExpression","commutedPensionApplicable","commutedPensionVerified","commutedPensionExpression","pensionDeductionsApplicable","pensionDeductionsVerified","pensionDeductionsExpression","commutationValueApplicable","commutedValueVerified","commutationValueExpression","daApplicable","daVerified","daExpression","dcrgApplicable","dcrgVerified","dcrgExpression","additionalPensionApplicable","additionalPensionVerified","additionalPensionExpression","compassionatePensionApplicable","compassionatePensionVerified","compassionatePensionExpression","compensationPensionApplicable","compensationPensionVerified","compensationPensionExpression","terminalBenefitApplicable","terminalBenefitVerified","terminalBenefitExpression","duesDeductionsApplicable","duesDeductionsVerified","duesDeductionsExpression","netDeductionsApplicable","netDeductionsVerified","netDeductionsExpression","totalPensionApplicable","totalPensionVerified","totalPensionExpression","finalCalculatedPensionApplicable","finalCalculatedPensionVerified","finalCalculatedPensionExpression","finalCalculatedGratuityApplicable","finalCalculatedGratuityVerified","finalCalculatedGratuityExpression","familyPensionIApplicable","familyPensionIVerified","familyPensionIExpression","familyPensionIIApplicable","familyPensionIIVerified","familyPensionIIExpression","pensionerFamilyPensionApplicable","pensionerFamilyPensionVerified","pensionerFamilyPensionExpression","exGratiaApplicable","exGratiaVerified","exGratiaExpression","provisionalPensionApplicable","provisionalPensionVerified","provisionalPensionExpression","invalidPensionApplicable","invalidPensionVerified","invalidPensionExpression","woundExtraordinaryPensionApplicable","woundExtraordinaryPensionVerified","woundExtraordinaryPensionExpression","attendantAllowanceApplicable","attendantAllowanceVerified","attendantAllowanceExpression","response","ResponseInfo","PaymentDetails","json"],"mappings":"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","file":"searchWorkflowPaymentDetails.js","sourcesContent":["import { Router } from \"express\";\r\nimport producer from \"../kafka/producer\";\r\nimport { requestInfoToResponseInfo, searchPensionWorkflow,epochToDmy} from \"../utils\";\r\nimport envVariables from \"../envVariables\";\r\nimport mdmsData from \"../utils/mdmsData\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport set from \"lodash/set\";\r\nimport get from \"lodash/get\";\r\nimport filter from \"lodash/filter\";\r\nimport orderBy from \"lodash/orderBy\";\r\nimport { intConversion} from \"../utils/search\";\r\nconst asyncHandler = require(\"express-async-handler\");\r\n\r\nimport logger from \"../config/logger\";\r\n\r\nexport default ({ config, db }) => {\r\n  let api = Router();\r\n  api.post(\r\n    \"/_searchWorkflowPaymentDetails\",\r\n    asyncHandler(async (request, res, next) => {              \r\n      //getting mdms data\r\n           \r\n      const queryObj = JSON.parse(JSON.stringify(request.query));\r\n      \r\n      let workflowSearchResponse = await searchPensionWorkflow(request.body.RequestInfo, queryObj.tenantId,queryObj.businessIds);\r\n      \r\n      logger.debug(\"workflowSearchResponse\", JSON.stringify(workflowSearchResponse));\r\n              \r\n      let processInstances=workflowSearchResponse.ProcessInstances;\r\n      let businessService=processInstances[0].businessService;\r\n      let businessId=processInstances[0].businessId;\r\n      let paymentOrderNumber=String(businessId).substring(0,6);\r\n      paymentOrderNumber=paymentOrderNumber+String(businessId).substring(String(businessId).length-6,String(businessId).length);\r\n      let date=new Date();\r\n      let day = date.getDate() < 10 ? `0${date.getDate()}` : date.getDate();\r\n      let month =date.getMonth() + 1 < 10 ? `0${date.getMonth() + 1}` : date.getMonth() + 1;      \r\n      var formatted_date =day + \"/\" +  month + \"/\" + date.getFullYear();\r\n      \r\n      let bankAccountNumber;\r\n      let bankDetails;\r\n      let bankIfsc;\r\n      let dependents=processInstances[0].dependents;\r\n      let dependentEligibleForPension=[];      \r\n      \r\n      switch(businessService){\r\n        case envVariables.EGOV_PENSION_RRP_BUSINESS_SERVICE:\r\n          bankAccountNumber= processInstances[0].employeeOtherDetails.accountNumber;\r\n          bankDetails= processInstances[0].employeeOtherDetails.bankName;\r\n          bankIfsc= processInstances[0].employeeOtherDetails.bankIfsc;\r\n          break;\r\n        case envVariables.EGOV_PENSION_DOE_BUSINESS_SERVICE:\r\n          dependentEligibleForPension=filter(dependents,function(x){return x.isEligibleForPension==true;});        \r\n          bankAccountNumber=dependentEligibleForPension.length>0?dependentEligibleForPension[0].bankAccountNumber:null;\r\n          bankDetails=dependentEligibleForPension.length>0?dependentEligibleForPension[0].bankName:null;      \r\n          bankIfsc=dependentEligibleForPension.length>0?dependentEligibleForPension[0].bankIfsc:null;      \r\n          break;\r\n        case envVariables.EGOV_PENSION_DOP_BUSINESS_SERVICE:\r\n          dependentEligibleForPension=filter(dependents,function(x){return x.isEligibleForPension==true;});\r\n          bankAccountNumber=dependentEligibleForPension.length>0?dependentEligibleForPension[0].bankAccountNumber:null;\r\n          bankDetails=dependentEligibleForPension.length>0?dependentEligibleForPension[0].bankName:null;              \r\n          bankIfsc=dependentEligibleForPension.length>0?dependentEligibleForPension[0].bankIfsc:null;              \r\n          break;\r\n      }\r\n      let paymentDetails={         \r\n        businessId: processInstances[0].businessId, \r\n        date:formatted_date,\r\n        paymentOrderNumber:paymentOrderNumber,      \r\n        name: processInstances[0].employee.user.name,  \r\n        dob: epochToDmy(intConversion(processInstances[0].employee.user.dob)) ,\r\n        designation:processInstances[0].employee.assignments[0].designation,\r\n        department:processInstances[0].employee.assignments[0].department,\r\n        dateOfRetirement: epochToDmy(intConversion(processInstances[0].employee.dateOfRetirement)) ,                             \r\n        dateOfDeath: epochToDmy(intConversion(processInstances[0].employee.dateOfDeath)) , \r\n        permanentAddress: processInstances[0].employee.user.permanentAddress,\r\n        permanentCity: processInstances[0].employee.user.permanentCity,\r\n        permanentPinCode: processInstances[0].employee.user.permanentPinCode,\r\n        fatherOrHusbandName: processInstances[0].employee.user.fatherOrHusbandName,\r\n        dateOfAppointment: epochToDmy(intConversion( processInstances[0].employee.dateOfAppointment)) ,                                \r\n        reasonForRetirement: processInstances[0].employeeOtherDetails.reasonForRetirement,\r\n        lpd: processInstances[0].employeeOtherDetails.lpd,  \r\n        totalNoPayLeavesYears: processInstances[0].employeeOtherDetails.totalNoPayLeavesYears,\r\n        totalNoPayLeavesMonths: processInstances[0].employeeOtherDetails.totalNoPayLeavesMonths,\r\n        totalNoPayLeavesDays: processInstances[0].employeeOtherDetails.totalNoPayLeavesDays,   \r\n        accountNumber: bankAccountNumber,\r\n        bankAddress: bankDetails,   \r\n        bankIfsc: bankIfsc,   \r\n        gqsYearVerified: processInstances[0].pensionCalculationUpdateDetails.gqsYearVerified==null?0:processInstances[0].pensionCalculationUpdateDetails.gqsYearVerified,\r\n        gqsMonthVerified: processInstances[0].pensionCalculationUpdateDetails.gqsMonthVerified==null?0:processInstances[0].pensionCalculationUpdateDetails.gqsMonthVerified,\r\n        gqsDayVerified: processInstances[0].pensionCalculationUpdateDetails.gqsDayVerified==null?0:processInstances[0].pensionCalculationUpdateDetails.gqsDayVerified,          \r\n        nqsYearVerified: processInstances[0].pensionCalculationUpdateDetails.nqsYearVerified==null?0:processInstances[0].pensionCalculationUpdateDetails.nqsYearVerified,\r\n        nqsMonthVerified: processInstances[0].pensionCalculationUpdateDetails.nqsMonthVerified==null?0:processInstances[0].pensionCalculationUpdateDetails.nqsMonthVerified,\r\n        nqsDayVerified: processInstances[0].pensionCalculationUpdateDetails.nqsDayVerified==null?0:processInstances[0].pensionCalculationUpdateDetails.nqsDayVerified,  \r\n        pensionEligibleDependentName:dependentEligibleForPension.length>0?dependentEligibleForPension[0].name:null,      \r\n        benefits:[]       \r\n      };\r\n      let benefits=[];\r\n      let pensionCalculationDetails=processInstances[0].pensionCalculationDetails;\r\n      let pensionCalculationUpdateDetails=processInstances[0].pensionCalculationUpdateDetails;\r\n      if(pensionCalculationDetails.interimReliefApplicable){\r\n        benefits.push({\r\n          \"code\":\"IR\",\r\n          \"name\":\"IR\",\r\n          \"value\":pensionCalculationDetails.interimReliefLpdSystem,\r\n          \"expression\":\"\"\r\n        })\r\n      }\r\n\r\n      if(pensionCalculationDetails.basicPensionApplicable){\r\n        benefits.push({\r\n          \"code\":\"BASIC_PENSION\",\r\n          \"name\":\"Basic Pension\",\r\n          \"value\":pensionCalculationUpdateDetails.basicPensionVerified,\r\n          \"expression\":pensionCalculationDetails.basicPensionExpression\r\n        })\r\n      }\r\n\r\n      if(pensionCalculationDetails.commutedPensionApplicable){\r\n        benefits.push({\r\n          \"code\":\"COMMUTED_PENSION\",\r\n          \"name\":\"Commuted Pension\",\r\n          \"value\":pensionCalculationUpdateDetails.commutedPensionVerified,\r\n          \"expression\":pensionCalculationDetails.commutedPensionExpression\r\n        })\r\n      }\r\n\r\n      if(pensionCalculationDetails.pensionDeductionsApplicable){\r\n        benefits.push({\r\n          \"code\":\"PENSION_DEDUCTION\",\r\n          \"name\":\"Pension Deduction\",\r\n          \"value\":pensionCalculationUpdateDetails.pensionDeductionsVerified,\r\n          \"expression\":pensionCalculationDetails.pensionDeductionsExpression\r\n        })\r\n      }\r\n\r\n      if(pensionCalculationDetails.commutationValueApplicable){\r\n        benefits.push({\r\n          \"code\":\"COMMUTATION_VALUE\",\r\n          \"name\":\"Commutation Value\",\r\n          \"value\":pensionCalculationUpdateDetails.commutedValueVerified,\r\n          \"expression\":pensionCalculationDetails.commutationValueExpression\r\n        })\r\n      }\r\n\r\n      if(pensionCalculationDetails.daApplicable){\r\n        benefits.push({\r\n          \"code\":\"PENSION_DA\",\r\n          \"name\":\"DA\",\r\n          \"value\":pensionCalculationUpdateDetails.daVerified,\r\n          \"expression\":pensionCalculationDetails.daExpression\r\n        })\r\n      }\r\n\r\n      if(pensionCalculationDetails.dcrgApplicable){\r\n        benefits.push({\r\n          \"code\":\"DCRG\",\r\n          \"name\":\"DCRG\",\r\n          \"value\":pensionCalculationUpdateDetails.dcrgVerified,\r\n          \"expression\":pensionCalculationDetails.dcrgExpression\r\n        })\r\n      }\r\n\r\n      if(pensionCalculationDetails.additionalPensionApplicable){\r\n        benefits.push({\r\n          \"code\":\"ADDITIONAL_PENSION\",\r\n          \"name\":\"Additional Pension\",\r\n          \"value\":pensionCalculationUpdateDetails.additionalPensionVerified,\r\n          \"expression\":pensionCalculationDetails.additionalPensionExpression\r\n        })\r\n      }\r\n\r\n      if(pensionCalculationDetails.compassionatePensionApplicable){\r\n        benefits.push({\r\n          \"code\":\"COMPASSIONATE_PENSION\",\r\n          \"name\":\"Compassionate Pension\",\r\n          \"value\":pensionCalculationUpdateDetails.compassionatePensionVerified,\r\n          \"expression\":pensionCalculationDetails.compassionatePensionExpression\r\n        })\r\n      }\r\n\r\n      if(pensionCalculationDetails.compensationPensionApplicable){\r\n        benefits.push({\r\n          \"code\":\"COMPENSATION_PENSION\",\r\n          \"name\":\"Compensation Pension\",\r\n          \"value\":pensionCalculationUpdateDetails.compensationPensionVerified,\r\n          \"expression\":pensionCalculationDetails.compensationPensionExpression\r\n        })\r\n      }\r\n\r\n      if(pensionCalculationDetails.terminalBenefitApplicable){\r\n        benefits.push({\r\n          \"code\":\"TERMINAL_BENEFIT\",\r\n          \"name\":\"Terminal Benefit\",\r\n          \"value\":pensionCalculationUpdateDetails.terminalBenefitVerified,\r\n          \"expression\":pensionCalculationDetails.terminalBenefitExpression\r\n        })\r\n      }\r\n\r\n      if(pensionCalculationDetails.duesDeductionsApplicable){\r\n        benefits.push({\r\n          \"code\":\"DCRG_DUES_DEDUCTION\",\r\n          \"name\":\"DCRG Dues Deduction\",\r\n          \"value\":pensionCalculationUpdateDetails.duesDeductionsVerified,\r\n          \"expression\":pensionCalculationDetails.duesDeductionsExpression\r\n        })\r\n      }\r\n\r\n      if(pensionCalculationDetails.netDeductionsApplicable){\r\n        benefits.push({\r\n          \"code\":\"NET_DEDUCTION\",\r\n          \"name\":\"Net Deduction\",\r\n          \"value\":pensionCalculationUpdateDetails.netDeductionsVerified,\r\n          \"expression\":pensionCalculationDetails.netDeductionsExpression\r\n        })\r\n      }\r\n\r\n      if(pensionCalculationDetails.totalPensionApplicable){\r\n        benefits.push({\r\n          \"code\":\"TOTAL_PENSION\",\r\n          \"name\":\"Total Pension\",\r\n          \"value\":pensionCalculationUpdateDetails.totalPensionVerified,\r\n          \"expression\":pensionCalculationDetails.totalPensionExpression\r\n        })\r\n      }\r\n\r\n      if(pensionCalculationDetails.finalCalculatedPensionApplicable){\r\n        benefits.push({\r\n          \"code\":\"FINAL_CALCULATED_PENSION\",\r\n          \"name\":\"Net Pension\",\r\n          \"value\":pensionCalculationUpdateDetails.finalCalculatedPensionVerified,\r\n          \"expression\":pensionCalculationDetails.finalCalculatedPensionExpression\r\n        })\r\n      }\r\n\r\n      if(pensionCalculationDetails.finalCalculatedGratuityApplicable){\r\n        benefits.push({\r\n          \"code\":\"FINAL_CALCULATED_GRATUITY\",\r\n          \"name\":\"Net Gratuity\",\r\n          \"value\":pensionCalculationUpdateDetails.finalCalculatedGratuityVerified,\r\n          \"expression\":pensionCalculationDetails.finalCalculatedGratuityExpression\r\n        })\r\n      }\r\n\r\n      if(pensionCalculationDetails.familyPensionIApplicable){\r\n        benefits.push({\r\n          \"code\":\"FAMILY_PENSION_1\",\r\n          \"name\":\"Family Pension I\",\r\n          \"value\":pensionCalculationUpdateDetails.familyPensionIVerified,\r\n          \"expression\":pensionCalculationDetails.familyPensionIExpression\r\n        })\r\n      }\r\n\r\n      if(pensionCalculationDetails.familyPensionIIApplicable){\r\n        benefits.push({\r\n          \"code\":\"FAMILY_PENSION_2\",\r\n          \"name\":\"Family Pension II\",\r\n          \"value\":pensionCalculationUpdateDetails.familyPensionIIVerified,\r\n          \"expression\":pensionCalculationDetails.familyPensionIIExpression\r\n        })\r\n      }\r\n\r\n      if(pensionCalculationDetails.pensionerFamilyPensionApplicable){\r\n        benefits.push({\r\n          \"code\":\"PENSIONER_FAMILY_PENSION\",\r\n          \"name\":\"Pensioner Family Pension\",\r\n          \"value\":pensionCalculationUpdateDetails.pensionerFamilyPensionVerified,\r\n          \"expression\":pensionCalculationDetails.pensionerFamilyPensionExpression\r\n        })\r\n      }\r\n\r\n      if(pensionCalculationDetails.exGratiaApplicable){\r\n        benefits.push({\r\n          \"code\":\"EX_GRATIA\",\r\n          \"name\":\"Ex Gratia\",\r\n          \"value\":pensionCalculationUpdateDetails.exGratiaVerified,\r\n          \"expression\":pensionCalculationDetails.exGratiaExpression\r\n        })\r\n      }\r\n\r\n      if(pensionCalculationDetails.provisionalPensionApplicable){\r\n        benefits.push({\r\n          \"code\":\"PROVISIONAL_PENSION\",\r\n          \"name\":\"Provisional Pension\",\r\n          \"value\":pensionCalculationUpdateDetails.provisionalPensionVerified,\r\n          \"expression\":pensionCalculationDetails.provisionalPensionExpression\r\n        })\r\n      }\r\n\r\n      if(pensionCalculationDetails.invalidPensionApplicable){\r\n        benefits.push({\r\n          \"code\":\"INVALID_PENSION\",\r\n          \"name\":\"Invalid Pension\",\r\n          \"value\":pensionCalculationUpdateDetails.invalidPensionVerified,\r\n          \"expression\":pensionCalculationDetails.invalidPensionExpression\r\n        })\r\n      }\r\n\r\n      if(pensionCalculationDetails.woundExtraordinaryPensionApplicable){\r\n        benefits.push({\r\n          \"code\":\"WOUND_EXTRAORDINARY_PENSION\",\r\n          \"name\":\"Wound or Extraordinary Pension\",\r\n          \"value\":pensionCalculationUpdateDetails.woundExtraordinaryPensionVerified,\r\n          \"expression\":pensionCalculationDetails.woundExtraordinaryPensionExpression\r\n        })\r\n      }\r\n\r\n      if(pensionCalculationDetails.attendantAllowanceApplicable){\r\n        benefits.push({\r\n          \"code\":\"ATTENDANT_ALLOWANCE\",\r\n          \"name\":\"Attendant Allowance\",\r\n          \"value\":pensionCalculationUpdateDetails.attendantAllowanceVerified,\r\n          \"expression\":pensionCalculationDetails.attendantAllowanceExpression\r\n        })\r\n      }\r\n\r\n      paymentDetails.benefits=benefits;\r\n\r\n\r\n\r\n      let response = {\r\n        ResponseInfo: requestInfoToResponseInfo(request.body.RequestInfo, true),\r\n        PaymentDetails: paymentDetails          \r\n      };\r\n      \r\n      \r\n      res.json(response);     \r\n        \r\n    })\r\n  );\r\n  return api;\r\n};\r\n"]}