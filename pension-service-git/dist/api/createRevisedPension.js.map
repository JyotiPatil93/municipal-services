{"version":3,"sources":["../../src/api/createRevisedPension.js"],"names":["asyncHandler","require","config","db","api","post","res","next","body","payloads","processInstance","tenantId","ProcessInstances","pensioner","pensionRevision","lastPensionRevision","processInstances","push","RequestInfo","pensionerNumber","pensionRevisionResponse","pensionRevisionList","length","x","effectiveEndYear","effectiveEndMonth","topic","envVariables","KAFKA_TOPICS_CREATE_REVISED_PENSION","messages","JSON","stringify","producer","send","err","data","response","ResponseInfo","json"],"mappings":";;;;;;;;;;;;;;AAAA;;AACA;;;;AACA;;AACA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;AAGA;;;;;;AAFA,IAAMA,eAAeC,QAAQ,uBAAR,CAArB;;kBAIe,gBAAoB;AAAA,MAAjBC,MAAiB,QAAjBA,MAAiB;AAAA,MAATC,EAAS,QAATA,EAAS;;AACjC,MAAIC,MAAM,sBAAV;AACAA,MAAIC,IAAJ,CACE,wBADF,EAEEL;AAAA,yFAAa,wBAAiBM,GAAjB,EAAsBC,IAAtB;AAAA,UAASC,IAAT,SAASA,IAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AACPC,sBADO,GACI,EADJ;AAGPC,6BAHO,GAGS;AAClBC,0BAAUH,KAAKI,gBAAL,CAAsB,CAAtB,EAAyBD,QADjB;AAElBE,2BAAWL,KAAKI,gBAAL,CAAsB,CAAtB,EAAyBC,SAFlB;AAGlBC,iCAAiBN,KAAKI,gBAAL,CAAsB,CAAtB,EAAyBE,eAHxB;AAIlBC,qCAAqB;AAJH,eAHT;AAUPC,8BAVO,GAUU,EAVV;;AAWXA,+BAAiBC,IAAjB,CAAsBP,eAAtB;AACAF,mBAAKI,gBAAL,GAAsBI,gBAAtB;;AAZW;AAAA,qBAcyB,8CAAkCR,KAAKU,WAAvC,EAAmDV,KAAKI,gBAAL,CAAsB,CAAtB,EAAyBD,QAA5E,EAAqFH,KAAKI,gBAAL,CAAsB,CAAtB,EAAyBC,SAAzB,CAAmCM,eAAxH,CAdzB;;AAAA;AAcPC,qCAdO;AAePC,iCAfO,GAeaD,wBAAwBR,gBAAxB,CAAyC,CAAzC,EAA4CE,eAfzD;;AAgBX,kBAAGO,oBAAoBC,MAApB,GAA2B,CAA9B,EAAgC;AAC9BD,sCAAoB,sBAAOA,mBAAP,EAA2B,UAASE,CAAT,EAAW;AAAC,yBAAOA,EAAEC,gBAAF,IAAoB,IAApB,IAA4BD,EAAEE,iBAAF,IAAqB,IAAxD;AAA8D,iBAArG,CAApB;AACD;;AAlBU,oBAoBRJ,uBAAuBA,oBAAoBC,MAApB,GAA2B,CApB1C;AAAA;AAAA;AAAA;;AAqBLP,iCArBK,GAqBe,EArBf;;AAsBTA,kCAAoBE,IAApB,CAAyBI,oBAAoB,CAApB,CAAzB;;AAGAb,mBAAKI,gBAAL,CAAsB,CAAtB,EAAyBG,mBAAzB,GAA6CA,mBAA7C;AAzBS;AAAA,qBA0BI,2DAA8CP,IAA9C,CA1BJ;;AAAA;AA0BTA,kBA1BS;;AAAA;AAAA;AAAA,qBA6BE,wDAA2CA,IAA3C,CA7BF;;AAAA;AA6BXA,kBA7BW;;;AAiCXC,uBAASQ,IAAT,CAAc;AACZS,uBAAOC,uBAAaC,mCADR;AAEZC,0BAAUC,KAAKC,SAAL,CAAevB,IAAf;AAFE,eAAd;AAIAwB,iCAASC,IAAT,CAAcxB,QAAd,EAAwB,UAASyB,GAAT,EAAcC,IAAd,EAAoB;AAC1C,oBAAIC,WAAW;AACbC,gCAAc,sCAA0B7B,KAAKU,WAA/B,EAA4C,IAA5C,CADD;AAEbN,oCAAkBJ,KAAKI;AAFV,iBAAf;AAIAN,oBAAIgC,IAAJ,CAASF,QAAT;AACD,eAND;;AArCW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAb;;AAAA;AAAA;AAAA;AAAA,MAFF;AAgDA,SAAOhC,GAAP;AACD,C","file":"createRevisedPension.js","sourcesContent":["import { Router } from \"express\";\nimport producer from \"../kafka/producer\";\nimport { requestInfoToResponseInfo,searchPensionerForPensionRevision} from \"../utils\";\nimport envVariables from \"../envVariables\";\nimport mdmsData from \"../utils/mdmsData\";\nimport { addUUIDAndAuditDetailsCloseLastRevisedPension,addUUIDAndAuditDetailsCreateRevisedPension } from \"../utils/create\";\nimport set from \"lodash/set\";\nimport get from \"lodash/get\";\nimport filter from \"lodash/filter\";\nconst asyncHandler = require(\"express-async-handler\");\n\nimport logger from \"../config/logger\";\n\nexport default ({ config, db }) => {\n  let api = Router();\n  api.post(\n    \"/_createRevisedPension\",\n    asyncHandler(async ({ body }, res, next) => {\n      let payloads = [];\n      \n      let processInstance={\n        tenantId: body.ProcessInstances[0].tenantId,\n        pensioner: body.ProcessInstances[0].pensioner,\n        pensionRevision: body.ProcessInstances[0].pensionRevision,   \n        lastPensionRevision: []     \n      };  \n\n      let processInstances=[];\n      processInstances.push(processInstance);\n      body.ProcessInstances=processInstances;\n\n      let pensionRevisionResponse = await searchPensionerForPensionRevision(body.RequestInfo,body.ProcessInstances[0].tenantId,body.ProcessInstances[0].pensioner.pensionerNumber); \n      let pensionRevisionList=pensionRevisionResponse.ProcessInstances[0].pensionRevision;    \n      if(pensionRevisionList.length>0){\n        pensionRevisionList=filter(pensionRevisionList,function(x){return x.effectiveEndYear==null && x.effectiveEndMonth==null;})\n      }  \n\n      if(pensionRevisionList && pensionRevisionList.length>0){\n        let lastPensionRevision=[];\n        lastPensionRevision.push(pensionRevisionList[0]);  \n        \n\n        body.ProcessInstances[0].lastPensionRevision=lastPensionRevision;     \n        body = await addUUIDAndAuditDetailsCloseLastRevisedPension(body);\n      }\n\n      body = await addUUIDAndAuditDetailsCreateRevisedPension(body);\n      \n      \n      \n      payloads.push({\n        topic: envVariables.KAFKA_TOPICS_CREATE_REVISED_PENSION, \n        messages: JSON.stringify(body)\n      });\n      producer.send(payloads, function(err, data) {\n        let response = {\n          ResponseInfo: requestInfoToResponseInfo(body.RequestInfo, true),\n          ProcessInstances: body.ProcessInstances\n        };\n        res.json(response);\n      });\n    })\n  );\n  return api;\n};\n"]}