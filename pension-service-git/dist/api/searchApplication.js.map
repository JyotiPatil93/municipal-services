{"version":3,"sources":["../../src/api/searchApplication.js"],"names":["asyncHandler","require","config","db","api","post","request","res","next","response","ResponseInfo","body","RequestInfo","Applications","text","query","queryObj","JSON","parse","stringify","tenantId","code","businessId","businessService","sqlQuery","applications","err","dbRes","logger","error","stack","rows","json"],"mappings":";;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAGA;;;;;;AAFA,IAAMA,eAAeC,QAAQ,uBAAR,CAArB;;kBAIe,gBAAoB;AAAA,MAAjBC,MAAiB,QAAjBA,MAAiB;AAAA,MAATC,EAAS,QAATA,EAAS;;AACjC,MAAIC,MAAM,sBAAV;AACAA,MAAIC,IAAJ,CACE,qBADF,EAEEL;AAAA,yFAAa,kBAAOM,OAAP,EAAgBC,GAAhB,EAAqBC,IAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAEPC,sBAFO,GAEI;AACbC,8BAAc,sCAA0BJ,QAAQK,IAAR,CAAaC,WAAvC,EAAoD,IAApD,CADD;AAEbC,8BAAc;AAFD,eAFJ;AAOPC,kBAPO,GAOD,wSAPC;;AAQX,kBAAGR,QAAQS,KAAX,EAAkB;AACVC,wBADU,GACCC,KAAKC,KAAL,CAAWD,KAAKE,SAAL,CAAeb,QAAQS,KAAvB,CAAX,CADD;;;AAGhBD,uBAAUA,IAAV;;AAEA,oBAAIE,SAASI,QAAb,EAAuB;AACrBN,yBAAUA,IAAV,yBAAkCE,SAASI,QAA3C;AACD;AACD,oBAAIJ,SAASK,IAAb,EAAmB;AACjBP,yBAAUA,IAAV,sCAA+CE,SAASK,IAAxD;AACD;AACD,oBAAIL,SAASM,UAAb,EAAyB;AACvBR,yBAAUA,IAAV,uCAAgDE,SAASM,UAAzD;AACD;AACD,oBAAIN,SAASO,eAAb,EAA8B;AAC5BT,yBAAUA,IAAV,kCAA2CE,SAASO,eAApD;AACD;AACF;;AAEGC,sBA3BO,GA2BIV,IA3BJ;AA+BPW,0BA/BO,GA+BM,EA/BN;;;AAiCXtB,iBAAGY,KAAH,CAASS,QAAT;AAAA,qGAAmB,iBAAOE,GAAP,EAAYC,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA,+BACbD,GADa;AAAA;AAAA;AAAA;;AAEfE,2CAAOC,KAAP,CAAaH,IAAII,KAAjB;AAFe;AAAA;;AAAA;AAAA,gCAMbH,MAAMI,IAAN,IAAc,CAAC,uBAAQJ,MAAMI,IAAd,CANF;AAAA;AAAA;AAAA;;AAAA;AAAA,iCAOH,2CACJJ,MAAMI,IADF,EAEJzB,QAAQS,KAFJ,EAGJT,QAAQK,IAAR,CAAaC,WAHT,CAPG;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,wCAYT,EAZS;;AAAA;AAKfa,sCALe;;;AAcfhB,mCAASI,YAAT,GAAsBY,YAAtB;AACAlB,8BAAIyB,IAAJ,CAASvB,QAAT;;AAfe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAnB;;AAAA;AAAA;AAAA;AAAA;;AAjCW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAb;;AAAA;AAAA;AAAA;AAAA,MAFF;AAuDA,SAAOL,GAAP;AACD,C","file":"searchApplication.js","sourcesContent":["import { Router } from \"express\";\nimport { requestInfoToResponseInfo} from \"../utils\";\nimport { mergeSearchApplicationResults } from \"../utils/search\";\nimport isEmpty from \"lodash/isEmpty\";\nimport get from \"lodash/get\";\nimport some from \"lodash/some\";\nimport envVariables from \"../envVariables\";\nimport mdmsData from \"../utils/mdmsData\";\nimport filter from \"lodash/filter\";\nconst asyncHandler = require(\"express-async-handler\");\n\nimport logger from \"../config/logger\";\n\nexport default ({ config, db }) => {\n  let api = Router();\n  api.post(\n    \"/_searchApplication\",\n    asyncHandler(async (request, res, next) => {     \n      \n      let response = {\n        ResponseInfo: requestInfoToResponseInfo(request.body.RequestInfo, true),\n        Applications: []\n      };\n      \n      let text =\"SELECT pwh.uuid, pwh.tenantid, pwh.pension_employee_id, pwh.workflow_type, pwh.application_number, pwh.application_date, pwh.last_modified_date, pwh.workflow_state, pe.employee_hrms_code, pe.name FROM eg_pension_workflow_header pwh JOIN eg_pension_employee pe ON pwh.pension_employee_id=pe.uuid\";        \n      if(request.query ){\n        const queryObj = JSON.parse(JSON.stringify(request.query));\n\n        text = `${text} WHERE`;\n            \n        if (queryObj.tenantId) {\n          text = `${text} pwh.tenantid = '${queryObj.tenantId}'`;\n        }\n        if (queryObj.code) {\n          text = `${text} AND pe.employee_hrms_code = '${queryObj.code}'`;\n        }\n        if (queryObj.businessId) {\n          text = `${text} AND pwh.application_number = '${queryObj.businessId}'`;\n        }\n        if (queryObj.businessService) {\n          text = `${text} AND pwh.workflow_type = '${queryObj.businessService}'`;\n        } \n      } \n       \n      let sqlQuery = text;\n      \n      \n\n      let applications=[];\n\n      db.query(sqlQuery, async (err, dbRes) => {\n        if (err) {\n          logger.error(err.stack);\n        } else {\n          \n          applications =\n            dbRes.rows && !isEmpty(dbRes.rows)\n              ? await mergeSearchApplicationResults(\n                  dbRes.rows,\n                  request.query,\n                  request.body.RequestInfo\n                )\n              : [];\n              \n          response.Applications=applications;\n          res.json(response);\n        }\n      });\n    })\n  );\n  return api;\n};\n"]}