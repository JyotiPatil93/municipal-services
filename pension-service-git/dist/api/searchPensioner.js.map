{"version":3,"sources":["../../src/api/searchPensioner.js"],"names":["asyncHandler","require","config","db","api","post","request","res","next","response","ResponseInfo","body","RequestInfo","Pensioners","queryObj","JSON","parse","stringify","query","tenantId","mdms","text","pensionerNumber","name","String","toUpperCase","dob","modifiedQueryDobNum","departments","sqlQuery","pensioners","err","dbRes","logger","error","stack","rows","json"],"mappings":"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","file":"searchPensioner.js","sourcesContent":["import { Router } from \"express\";\nimport { requestInfoToResponseInfo, adjust530 } from \"../utils\";\nimport { mergeSearchPensionerResults } from \"../utils/search\";\nimport isEmpty from \"lodash/isEmpty\";\nimport get from \"lodash/get\";\nimport some from \"lodash/some\";\nimport { actions } from \"../utils/search\";\nimport envVariables from \"../envVariables\";\nimport mdmsData from \"../utils/mdmsData\";\nimport filter from \"lodash/filter\";\nconst asyncHandler = require(\"express-async-handler\");\n\nimport logger from \"../config/logger\";\n\nexport default ({ config, db }) => {\n  let api = Router();\n  api.post(\n    \"/_searchPensioner\",\n    asyncHandler(async (request, res, next) => {     \n      \n      let response = {\n        ResponseInfo: requestInfoToResponseInfo(request.body.RequestInfo, true),\n        Pensioners: []\n      };\n\n      const queryObj = JSON.parse(JSON.stringify(request.query));\n\n      let mdms = await mdmsData(request.body.RequestInfo, queryObj.tenantId);                \n\n      let text =\"SELECT pp.uuid, pp.tenantid, pp.pensioner_number, pp.business_service, pe.name, pe.employee_hrms_code, pe.date_of_birth, pe.gender, pe.date_of_retirement, pe.date_of_death, pe.date_of_appointment, ppad.lpd, ppad.ltc, ppad.wef,\";\n      text = `${text} (SELECT name FROM eg_pension_dependent WHERE pension_employee_id=pp.pension_employee_id AND is_eligible_for_pension=true AND active=true) AS claimant_name,`;\n      text = `${text} (SELECT dob FROM eg_pension_dependent WHERE pension_employee_id=pp.pension_employee_id AND is_eligible_for_pension=true AND active=true) AS claimant_dob,`;\n      text = `${text} CASE WHEN pp.business_service='RRP_SERVICE'`;\n      text = `${text} THEN (SELECT correspondence_address FROM eg_pension_employee_contact_details WHERE pension_employee_id=pp.pension_employee_id AND active=true)`;\n      text = `${text} ELSE (SELECT address FROM eg_pension_dependent WHERE pension_employee_id=pp.pension_employee_id AND is_eligible_for_pension=true AND active=true)`;\n      text = `${text} END AS address,`;\n      text = `${text} CASE WHEN pp.business_service='RRP_SERVICE'`;\n      text = `${text} THEN ppad.bank_address`;\n      text = `${text} ELSE (SELECT bank_details FROM eg_pension_dependent WHERE pension_employee_id=pp.pension_employee_id AND is_eligible_for_pension=true AND active=true)`;\n      text = `${text} END AS bank_details,`;\n      text = `${text} CASE WHEN pp.business_service='RRP_SERVICE'`;\n      text = `${text} THEN ppad.account_number`;\n      text = `${text} ELSE (SELECT bank_account_number FROM eg_pension_dependent WHERE pension_employee_id=pp.pension_employee_id AND is_eligible_for_pension=true AND active=true)`;\n      text = `${text} END AS bank_account_number,`;\n      text = `${text} CASE WHEN pp.business_service='RRP_SERVICE'`;\n      text = `${text} THEN ppad.bank_code`;\n      text = `${text} ELSE (SELECT bank_code FROM eg_pension_dependent WHERE pension_employee_id=pp.pension_employee_id AND is_eligible_for_pension=true AND active=true)`;\n      text = `${text} END AS bank_code,`;\n      text = `${text} CASE WHEN pp.business_service='RRP_SERVICE'`;\n      text = `${text} THEN ppad.bank_ifsc`;\n      text = `${text} ELSE (SELECT bank_ifsc FROM eg_pension_dependent WHERE pension_employee_id=pp.pension_employee_id AND is_eligible_for_pension=true AND active=true)`;\n      text = `${text} END AS bank_ifsc,`;\n      text = `${text} pea.department, pea.designation`;      \n      text = `${text} FROM eg_pension_pensioner pp`;\n      text = `${text} INNER JOIN eg_pension_employee pe ON pp.pension_employee_id=pe.uuid`;\n      text = `${text} INNER JOIN eg_pension_pensioner_application_details ppad ON pp.uuid=ppad.pensioner_id`;\n      text = `${text} INNER JOIN eg_pension_employee_assignment pea ON pea.pension_employee_id=pe.uuid AND pea.is_pension_applicable=true`;\n      \n      text = `${text} WHERE pp.active=true`;\n               \n      if (queryObj.tenantId) {\n        text = `${text} AND pp.tenantid = '${queryObj.tenantId}'`;\n      }\n      if (queryObj.pensionerNumber) {\n        text = `${text} AND pp.pensioner_number = '${queryObj.pensionerNumber}'`;\n      }\n      if (queryObj.name) {\n        text = `${text} AND upper(pe.name) like '%${String(queryObj.name).toUpperCase()}%'`;\n      }\n      if (queryObj.dob) {\n        let modifiedQueryDobNum = adjust530(queryObj.dob);\n        //text = `${text} AND pe.date_of_birth = ${queryObj.dob}`;\n        text = `${text} AND pe.date_of_birth = ${modifiedQueryDobNum}`;\n      }\n      if (queryObj.departments) {\n        text = `${text} AND pea.department = '${queryObj.departments}'`;\n      }\n      let sqlQuery = text;\n      \n      \n\n      let pensioners=[];\n\n      db.query(sqlQuery, async (err, dbRes) => {\n        if (err) {\n          logger.error(err.stack);\n        } else {\n          \n          pensioners =\n            dbRes.rows && !isEmpty(dbRes.rows)\n              ? await mergeSearchPensionerResults(\n                  dbRes.rows,\n                  request.query,\n                  request.body.RequestInfo,\n                  mdms\n                )\n              : [];\n             \n          response.Pensioners=pensioners;\n          res.json(response);\n        }\n      });\n       \n    })\n  );\n  return api;\n};\n"]}