{"version":3,"sources":["../../src/api/searchClosedApplication.js"],"names":["asyncHandler","require","config","db","api","post","request","res","next","response","ResponseInfo","body","RequestInfo","ProcessInstances","queryObj","JSON","parse","stringify","query","text","tenantId","businessService","businessId","name","String","toUpperCase","startDate","endDate","Number","sqlQuery","processInstances","err","dbRes","logger","error","stack","rows","json"],"mappings":";;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAGA;;;;;;AAFA,IAAMA,eAAeC,QAAQ,uBAAR,CAArB;;kBAIe,gBAAoB;AAAA,MAAjBC,MAAiB,QAAjBA,MAAiB;AAAA,MAATC,EAAS,QAATA,EAAS;;AACjC,MAAIC,MAAM,sBAAV;AACAA,MAAIC,IAAJ,CACE,2BADF,EAEEL;AAAA,yFAAa,kBAAOM,OAAP,EAAgBC,GAAhB,EAAqBC,IAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAEPC,sBAFO,GAEI;AACbC,8BAAc,sCAA0BJ,QAAQK,IAAR,CAAaC,WAAvC,EAAoD,IAApD,CADD;AAEbC,kCAAkB;AAFL,eAFJ;AAOLC,sBAPK,GAOMC,KAAKC,KAAL,CAAWD,KAAKE,SAAL,CAAeX,QAAQY,KAAvB,CAAX,CAPN;AAYPC,kBAZO,GAYD,mhBAZC;;;AAcXA,qBAAUA,IAAV;;AAEA,kBAAIL,SAASM,QAAb,EAAuB;AACrBD,uBAAUA,IAAV,6BAAsCL,SAASM,QAA/C;AACD;AACD,kBAAIN,SAASO,eAAb,EAA8B;AAC5BF,uBAAUA,IAAV,kCAA2CL,SAASO,eAApD;AACD;AACD,kBAAIP,SAASQ,UAAb,EAAyB;AACvBH,uBAAUA,IAAV,uCAAgDL,SAASQ,UAAzD;AACD;AACD,kBAAIR,SAASS,IAAb,EAAmB;AACjBJ,uBAAUA,IAAV,mCAA4CK,OAAOV,SAASS,IAAhB,EAAsBE,WAAtB,EAA5C;AACD;AACD,kBAAIX,SAASY,SAAT,IAAsBZ,SAASa,OAAnC,EAA4C;AAC1CR,uBAAUA,IAAV,sCAA+CS,OAAOd,SAASY,SAAhB,CAA/C,qCAAyGE,OAAOd,SAASa,OAAhB,CAAzG;AACD;;AAEGE,sBAhCO,GAgCIV,IAhCJ;AAoCPW,8BApCO,GAoCU,EApCV;;;AAsCX3B,iBAAGe,KAAH,CAASW,QAAT;AAAA,qGAAmB,iBAAOE,GAAP,EAAYC,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA,+BACbD,GADa;AAAA;AAAA;AAAA;;AAEfE,2CAAOC,KAAP,CAAaH,IAAII,KAAjB;AAFe;AAAA;;AAAA;AAAA,gCAMbH,MAAMI,IAAN,IAAc,CAAC,uBAAQJ,MAAMI,IAAd,CANF;AAAA;AAAA;AAAA;;AAAA;AAAA,iCAOH,iDACJJ,MAAMI,IADF,EAEJ9B,QAAQY,KAFJ,EAGJZ,QAAQK,IAAR,CAAaC,WAHT,CAPG;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,wCAYT,EAZS;;AAAA;AAKfkB,0CALe;;;AAcfrB,mCAASI,gBAAT,GAA0BiB,gBAA1B;AACAvB,8BAAI8B,IAAJ,CAAS5B,QAAT;;AAfe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAnB;;AAAA;AAAA;AAAA;AAAA;;AAtCW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAb;;AAAA;AAAA;AAAA;AAAA,MAFF;AA4DA,SAAOL,GAAP;AACD,C","file":"searchClosedApplication.js","sourcesContent":["import { Router } from \"express\";\nimport { requestInfoToResponseInfo} from \"../utils\";\nimport { mergeSearchClosedApplicationResults } from \"../utils/search\";\nimport isEmpty from \"lodash/isEmpty\";\nimport get from \"lodash/get\";\nimport some from \"lodash/some\";\nimport envVariables from \"../envVariables\";\nimport mdmsData from \"../utils/mdmsData\";\nimport filter from \"lodash/filter\";\nconst asyncHandler = require(\"express-async-handler\");\n\nimport logger from \"../config/logger\";\n\nexport default ({ config, db }) => {\n  let api = Router();\n  api.post(\n    \"/_searchClosedApplication\",\n    asyncHandler(async (request, res, next) => {     \n      \n      let response = {\n        ResponseInfo: requestInfoToResponseInfo(request.body.RequestInfo, true),\n        ProcessInstances: []\n      };\n\n      const queryObj = JSON.parse(JSON.stringify(request.query));\n      \n\n      \n                       \n      let text =\"SELECT pwh.uuid, pwh.tenantid, pwh.pension_employee_id, pwh.workflow_type, pwh.application_number, pwh.application_date, pwh.last_modified_date, pwh.workflow_state, pwhnew.application_number as recomputed_application_number, pe.employee_hrms_code,pe.name FROM eg_pension_workflow_header pwh JOIN eg_pension_employee pe ON pwh.pension_employee_id=pe.uuid LEFT JOIN eg_pension_recomputation_register prr ON pwh.uuid=prr.closed_workflow_header_id LEFT JOIN eg_pension_workflow_header pwhnew ON prr.new_workflow_header_id=pwhnew.uuid\";        \n      \n      text = `${text} WHERE pwh.workflow_state='CLOSED'`;\n\n      if (queryObj.tenantId) {\n        text = `${text} AND pwh.tenantid = '${queryObj.tenantId}'`;\n      }\n      if (queryObj.businessService) {\n        text = `${text} AND pwh.workflow_type = '${queryObj.businessService}'`;\n      }  \n      if (queryObj.businessId) {\n        text = `${text} AND pwh.application_number = '${queryObj.businessId}'`;\n      } \n      if (queryObj.name) {\n        text = `${text} and upper(pe.name) like '%${String(queryObj.name).toUpperCase()}%'`;\n      }\n      if (queryObj.startDate && queryObj.endDate) {\n        text = `${text} AND pwh.last_modified_date >=${Number(queryObj.startDate)} AND pwh.last_modified_date<=${Number(queryObj.endDate)}`;\n      }             \n            \n      let sqlQuery = text;\n      \n      \n\n      let processInstances=[];\n\n      db.query(sqlQuery, async (err, dbRes) => {\n        if (err) {\n          logger.error(err.stack);\n        } else {\n          \n          processInstances =\n            dbRes.rows && !isEmpty(dbRes.rows)\n              ? await mergeSearchClosedApplicationResults(\n                  dbRes.rows,\n                  request.query,\n                  request.body.RequestInfo\n                )\n              : [];\n              \n          response.ProcessInstances=processInstances;\n          res.json(response);\n        }\n      });\n    })\n  );\n  return api;\n};\n"]}