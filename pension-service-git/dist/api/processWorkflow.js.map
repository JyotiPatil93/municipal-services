{"version":3,"sources":["../../src/api/processWorkflow.js"],"names":["asyncHandler","require","config","db","api","post","res","next","body","payloads","message","businessService","ProcessInstances","action","notificationPayLoadSMS","notificationPayLoadEMAIL","errorMessage","currentState","nextState","envVariables","EGOV_PENSION_WORKFLOW_ACTION_INITIATE","RequestInfo","tenantId","businessId","workflowSearchResponse","state","employee","code","searchApplicationResponse","applicationList","Applications","length","x","PARALLEL_WORLFLOW_EXIST_INITIATE_NA","replace","String","errors","errorType","errorReponse","ResponseInfo","Errors","EGOV_PENSION_DOE_BUSINESS_SERVICE","pensionResponse","pensionEmployeesList","Employees","hrmsResponse","hrmsEmployee","pensionEmployeeId","uuid","assignments","i","id","active","serviceHistory","user","employeeContactDetailsId","dob","dateOfDeath","employeeAudit","pensionEmployeeAuditId","auditDetails","createdBy","lastModifiedBy","createdDate","Date","getTime","lastModifiedDate","dateOfSuperannuation","lastAssignments","lastAssignment","fromDate","isPrimaryAssignment","push","isPensionApplicable","name","dateOfRetirement","salutation","gender","employeeStatus","employeeType","dateOfAppointment","employeeOtherDetails","accountNumber","dependents","bankAccountNumber","workflowResponse","workflowHeader","topic","eventResponse","EGOV_PENSION_RRP_BUSINESS_SERVICE","EGOV_PENSION_DOP_BUSINESS_SERVICE","KAFKA_TOPICS_RRP_INITIATE","releaseWorkFlowResponse","KAFKA_TOPICS_SAVE_RRP_INITIATED","EGOV_PENSION_WORKFLOW_ACTION_FORWARD","eventDescription","RRP_STARTED_USER_EVENT_DESCRIPTION","logger","debug","KAFKA_TOPICS_SAVE_PENDING_FOR_DETAILS_VERIFICATION","KAFKA_TOPICS_SAVE_PENDING_FOR_DETAILS_REVIEW","EGOV_PENSION_WORKFLOW_ACTION_SEND_BACK","KAFKA_TOPICS_CLEAR_BENEFIT","KAFKA_TOPICS_SAVE_PENDING_FOR_CALCULATION","KAFKA_TOPICS_UPDATE_PENSION_WORKFLOW_STATE","KAFKA_TOPICS_SAVE_PENDING_FOR_CALCULATION_REVIEW","KAFKA_TOPICS_DOE_INITIATE","KAFKA_TOPICS_SAVE_DEATH_INITIATED","KAFKA_TOPICS_DOP_INITIATE","messages","JSON","stringify","producer","send","err","data","response","json"],"mappings":"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","file":"processWorkflow.js","sourcesContent":["import { Router } from \"express\";\r\nimport producer from \"../kafka/producer\";\r\nimport { requestInfoToResponseInfo, createWorkFlow ,searchWorkflow,createUserEventToUser,epochToYmd,convertDateToEpoch,uuidv1,getEmployeeDetails,releaseWorkFlow,getPensionEmployees,closeWorkflowByUser,searchApplication,adjust530AddForDeathRegistration, adjust530AddForDob} from \"../utils\";\r\nimport envVariables from \"../envVariables\";\r\nimport mdmsData from \"../utils/mdmsData\";\r\nimport { addUUIDAndAuditDetails } from \"../utils/create\";\r\nimport { Message} from \"../utils/message\";\r\nimport workflowTemplateInterfaceSMS from \"../utils/notificaitonTemplateSMS\";\r\nimport workflowTemplateInterfaceEMAIL from \"../utils/notificaitonTemplateEMAIL\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport set from \"lodash/set\";\r\nimport get from \"lodash/get\";\r\nimport filter from \"lodash/filter\";\r\nimport orderBy from \"lodash/orderBy\";\r\nimport { intConversion} from \"../utils/search\";\r\nimport {encrypt} from \"../utils/encryption\";\r\n\r\nconst asyncHandler = require(\"express-async-handler\");\r\n\r\nimport logger from \"../config/logger\";\r\n\r\nexport default ({ config, db }) => {\r\n  let api = Router();\r\n  api.post(\r\n    \"/_processWorkflow\",\r\n    asyncHandler(async ({ body }, res, next) => {\r\n      let payloads = [];\r\n      \r\n      const message=Message();\r\n     \r\n      let businessService=body.ProcessInstances[0].businessService;\r\n      let action=body.ProcessInstances[0].action;          \r\n      let notificationPayLoadSMS;\r\n      let notificationPayLoadEMAIL;\r\n      let errorMessage=\"\";\r\n                   \r\n      let currentState=\"\";     \r\n      let nextState=\"\" ;\r\n      if(action!=envVariables.EGOV_PENSION_WORKFLOW_ACTION_INITIATE)//workflow exist, then fetch current state\r\n      {        \r\n        let workflowSearchResponse = await searchWorkflow(body.RequestInfo, body.ProcessInstances[0].tenantId,body.ProcessInstances[0].businessId);\r\n        currentState=workflowSearchResponse.ProcessInstances[0].state.state;\r\n        \r\n      }         \r\n      else {      //initiate\r\n        //parallel application checking\r\n        let searchApplicationResponse = await searchApplication(body.RequestInfo,body.ProcessInstances[0].tenantId,body.ProcessInstances[0].employee.code);   \r\n        let applicationList=searchApplicationResponse.Applications;\r\n        \r\n        if(applicationList.length>0)   {\r\n          applicationList=filter(applicationList,function(x){return x.state!=\"CLOSED\" && x.state!=\"REJECTED\" ;});          \r\n          if(applicationList.length>0)   {\r\n            let errorMessage=message.PARALLEL_WORLFLOW_EXIST_INITIATE_NA;\r\n            errorMessage=errorMessage.replace(/\\{0}/g,String(applicationList[0].businessId));\r\n            let errors = errorMessage;\r\n            if (errors.length > 0) {\r\n              next({\r\n                errorType: \"custom\",\r\n                errorReponse: {\r\n                  ResponseInfo: requestInfoToResponseInfo(\r\n                    body.RequestInfo,\r\n                    true\r\n                  ),\r\n                  Errors: errors\r\n                }\r\n              });\r\n              return;\r\n            }\r\n          }\r\n\r\n        }\r\n\r\n        switch(businessService){\r\n          case envVariables.EGOV_PENSION_DOE_BUSINESS_SERVICE:  //Death of an employee\r\n\r\n          //search employee in Pension module  \r\n          let pensionResponse = await getPensionEmployees(body.RequestInfo,body.ProcessInstances[0].tenantId,body.ProcessInstances[0].employee.code);   \r\n          let pensionEmployeesList=pensionResponse.Employees;                    \r\n         \r\n          if(pensionEmployeesList.length>0){  \r\n              \r\n              //fetch assignment, service history & contact details from hrms\r\n              //if these data not exist then data will be inserted into pension module\r\n              let hrmsResponse = await getEmployeeDetails(body.RequestInfo, body.ProcessInstances[0].tenantId,body.ProcessInstances[0].employee.code);              \r\n              \r\n              let hrmsEmployee=hrmsResponse.Employees[0];                                                    \r\n\r\n              if(hrmsEmployee){            \r\n\r\n                let pensionEmployeeId=pensionEmployeesList[0].uuid;                      \r\n\r\n                let assignments=[];\r\n                if(hrmsEmployee.assignments && !isEmpty(hrmsEmployee.assignments)){\r\n                  assignments=hrmsEmployee.assignments;\r\n                  for (var i = 0; i <assignments.length; i++){\r\n                    assignments[i].id=uuidv1(); \r\n                    assignments[i].tenantId=hrmsEmployee.tenantId;                    \r\n                    assignments[i].active=true;      \r\n                    assignments[i].pensionEmployeeId=pensionEmployeeId;\r\n                  }\r\n                }\r\n\r\n                let serviceHistory=[];\r\n                if(hrmsEmployee.serviceHistory && !isEmpty(hrmsEmployee.serviceHistory)){\r\n                  serviceHistory=hrmsEmployee.serviceHistory;\r\n                  for (var i = 0; i <serviceHistory.length; i++){\r\n                    serviceHistory[i].id=uuidv1();     \r\n                    serviceHistory[i].tenantId=hrmsEmployee.tenantId;                  \r\n                    serviceHistory[i].active=true;        \r\n                    serviceHistory[i].pensionEmployeeId=pensionEmployeeId;            \r\n                  }                  \r\n                }\r\n\r\n                let user=hrmsEmployee.user;\r\n                user.employeeContactDetailsId=uuidv1(); \r\n                user.dob=adjust530AddForDob(user.dob);\r\n                user.tenantId=hrmsEmployee.tenantId;                 \r\n                user.active=true; \r\n\r\n\r\n                let employee={\r\n                  pensionEmployeeId: pensionEmployeeId,                                            \r\n                  uuid: hrmsEmployee.uuid,                    \r\n                  code: hrmsEmployee.code,\r\n                  dateOfDeath: adjust530AddForDeathRegistration(body.ProcessInstances[0].employee.dateOfDeath),\r\n                  tenantId: hrmsEmployee.tenantId,\r\n                  assignments: assignments,\r\n                  serviceHistory: serviceHistory,      \r\n                  user: user,                                   \r\n                  employeeAudit: {\r\n                    pensionEmployeeAuditId: uuidv1()\r\n                  },\r\n                  auditDetails: {\r\n                    createdBy: get(body.RequestInfo, \"userInfo.uuid\", \"\"),\r\n                    lastModifiedBy: null,\r\n                    createdDate: new Date().getTime(),      \r\n                    lastModifiedDate: null        \r\n                  }      \r\n                }; \r\n                body.ProcessInstances[0].employee=employee;\r\n              }\r\n          }\r\n          else{\r\n            \r\n            //search employee from hrms and push that employee in pension module                  \r\n              let hrmsResponse = await getEmployeeDetails(body.RequestInfo, body.ProcessInstances[0].tenantId,body.ProcessInstances[0].employee.code);              \r\n              \r\n              let hrmsEmployee=hrmsResponse.Employees[0];                                                    \r\n\r\n              if(hrmsEmployee){\r\n\r\n                //let maxRetirementAge=envVariables.EGOV_PENSION_MAX_RETIREMENT_AGE;              \r\n\r\n                let pensionEmployeeId=uuidv1();                      \r\n\r\n                let dob=adjust530AddForDob(hrmsEmployee.user.dob);\r\n                //let actualDob=new Date(epochToYmd(intConversion(dob)));    \r\n                //let dorYYYYMMDD=`${actualDob.getFullYear()+maxRetirementAge}-${actualDob.getMonth()+1}-${actualDob.getDate()}`;    \r\n                //let dateOfRetirement=convertDateToEpoch(dorYYYYMMDD,\"dob\");  \r\n                \r\n                let dateOfSuperannuation=hrmsEmployee.dateOfSuperannuation;\r\n\r\n                let assignments=[];\r\n                if(hrmsEmployee.assignments && !isEmpty(hrmsEmployee.assignments)){\r\n                  assignments=hrmsEmployee.assignments;\r\n                  let lastAssignments=[];\r\n                  let lastAssignment=[];\r\n                  if(assignments.length>1) {    \r\n                    assignments=orderBy(assignments,['fromDate'],['desc']);      \r\n                    lastAssignments=filter(assignments,function(x){return x.fromDate==assignments[0].fromDate;}); \r\n                    if(lastAssignments.length>1){\r\n                      lastAssignments=filter(lastAssignments,function(x){return x.isPrimaryAssignment==true;}); \r\n                      if(lastAssignments.length>0){\r\n                        lastAssignment.push(lastAssignments[0]); \r\n                      }\r\n                      else{\r\n                        lastAssignments=filter(assignments,function(x){return x.fromDate==assignments[0].fromDate;}); \r\n                        lastAssignment.push(lastAssignments[0]);\r\n                      }                          \r\n                    }                                                                                                                                                                        \r\n                  }\r\n                  else{\r\n                    lastAssignment=assignments;\r\n                  }\r\n                  for (var i = 0; i <assignments.length; i++){\r\n                    if(assignments[i].id==lastAssignment[0].id){\r\n                      assignments[i].isPensionApplicable=true;\r\n                    }\r\n                    assignments[i].id=uuidv1(); \r\n                    assignments[i].tenantId=hrmsEmployee.tenantId;                    \r\n                    assignments[i].active=true;      \r\n                    assignments[i].pensionEmployeeId=pensionEmployeeId;\r\n                  }\r\n                }\r\n\r\n                let serviceHistory=[];\r\n                if(hrmsEmployee.serviceHistory && !isEmpty(hrmsEmployee.serviceHistory)){\r\n                  serviceHistory=hrmsEmployee.serviceHistory;\r\n                  for (var i = 0; i <serviceHistory.length; i++){\r\n                    serviceHistory[i].id=uuidv1();     \r\n                    serviceHistory[i].tenantId=hrmsEmployee.tenantId;                  \r\n                    serviceHistory[i].active=true;        \r\n                    serviceHistory[i].pensionEmployeeId=pensionEmployeeId;            \r\n                  }                  \r\n                }\r\n\r\n                let user=hrmsEmployee.user;\r\n                user.employeeContactDetailsId=uuidv1();     \r\n                user.tenantId=hrmsEmployee.tenantId;                 \r\n                user.active=true; \r\n\r\n                let employee={\r\n                  pensionEmployeeId: pensionEmployeeId,                          \r\n                  id: hrmsEmployee.id,\r\n                  uuid: hrmsEmployee.uuid,                    \r\n                  code: hrmsEmployee.code,\r\n                  name: hrmsEmployee.user.name,\r\n                  dob: dob,\r\n                  //dateOfRetirement: dateOfRetirement,\r\n                  dateOfRetirement: dateOfSuperannuation,\r\n                  dateOfDeath: adjust530AddForDeathRegistration(body.ProcessInstances[0].employee.dateOfDeath),                                      \r\n                  tenantId: hrmsEmployee.tenantId, \r\n                  salutation: hrmsEmployee.user.salutation,      \r\n                  gender: hrmsEmployee.user.gender, \r\n                  employeeStatus: hrmsEmployee.employeeStatus,\r\n                  employeeType: hrmsEmployee.employeeType,\r\n                  dateOfAppointment: hrmsEmployee.dateOfAppointment,\r\n                  assignments: assignments,\r\n                  serviceHistory: serviceHistory,      \r\n                  user: user,                 \r\n                  active: true,\r\n                  employeeAudit: {\r\n                    pensionEmployeeAuditId: uuidv1()\r\n                  },\r\n                  auditDetails: {\r\n                    createdBy: get(body.RequestInfo, \"userInfo.uuid\", \"\"),\r\n                    lastModifiedBy: null,\r\n                    createdDate: new Date().getTime(),      \r\n                    lastModifiedDate: null        \r\n                  }      \r\n                }; \r\n                \r\n                body.ProcessInstances[0].employee=employee;                                                                                    \r\n            }        \r\n          }         \r\n        }\r\n      }\r\n      \r\n      body = await addUUIDAndAuditDetails(body,currentState);      \r\n      \r\n\r\n      body.ProcessInstances[0].employeeOtherDetails.accountNumber = body.ProcessInstances[0].employeeOtherDetails.accountNumber!=null? encrypt(body.ProcessInstances[0].employeeOtherDetails.accountNumber):body.ProcessInstances[0].employeeOtherDetails.accountNumber;\r\n\r\n\r\n      if(body.ProcessInstances[0].dependents){\r\n\r\n      for (var i = 0; i < body.ProcessInstances[0].dependents.length; i++) {                    \r\n        body.ProcessInstances[0].dependents[i].bankAccountNumber = body.ProcessInstances[0].dependents[i].bankAccountNumber!=null?encrypt(body.ProcessInstances[0].dependents[i].bankAccountNumber):body.ProcessInstances[0].dependents[i].bankAccountNumber;\r\n      } \r\n    }\r\n\r\n      let workflowResponse;        \r\n      if(action!=\"\")//workkflow has an action, _transition endpoint of workflow service should be called\r\n      {\r\n        workflowResponse=await createWorkFlow(body); //workflow transition        \r\n        nextState=workflowResponse.ProcessInstances[0].state.state;        \r\n      }      \r\n      body.ProcessInstances[0].workflowHeader.state=nextState!=\"\"?nextState:currentState;\r\n\r\n      \r\n            \r\n      let topic=\"\";\r\n      let eventResponse;\r\n      switch(businessService)\r\n      {\r\n        case envVariables.EGOV_PENSION_RRP_BUSINESS_SERVICE:  //Regular Retirement pension\r\n          if(action==envVariables.EGOV_PENSION_WORKFLOW_ACTION_INITIATE)  //initiate\r\n          {            \r\n            topic=envVariables.KAFKA_TOPICS_RRP_INITIATE;\r\n          }\r\n          else{             \r\n            //Release Workflow                       \r\n            if(action!=\"\"){\r\n              let releaseWorkFlowResponse = await releaseWorkFlow(body);              \r\n            }           \r\n            switch(currentState)\r\n            {\r\n              case \"INITIATED\": //PMS_DDO                        \r\n                topic=envVariables.KAFKA_TOPICS_SAVE_RRP_INITIATED;  \r\n                if(action==envVariables.EGOV_PENSION_WORKFLOW_ACTION_FORWARD){\r\n                  //eventResponse=await createUserEventToUser(body,body.ProcessInstances[0].employee.tenantId,message.RRP_STARTED_USER_EVENT_NAME,message.RRP_STARTED_USER_EVENT_DESCRIPTION,body.ProcessInstances[0].employee.uuid); \r\n                  let eventDescription=message.RRP_STARTED_USER_EVENT_DESCRIPTION;\r\n                  eventDescription=eventDescription.replace(/\\{0}/g,String(body.ProcessInstances[0].businessId) );\r\n                  //eventResponse=createUserEventToUser(body,body.ProcessInstances[0].employee.tenantId,message.RRP_STARTED_USER_EVENT_NAME,eventDescription,body.ProcessInstances[0].employee.uuid); \r\n                  notificationPayLoadSMS=workflowTemplateInterfaceSMS(body.ProcessInstances[0]);\r\n                  notificationPayLoadEMAIL=workflowTemplateInterfaceEMAIL(body.ProcessInstances[0]);\r\n                  logger.debug(notificationPayLoadSMS);\r\n                  logger.debug(notificationPayLoadEMAIL);\r\n                  payloads.push(notificationPayLoadSMS);\r\n                  payloads.push(notificationPayLoadEMAIL);\r\n                }                \r\n                break;\r\n              case \"PENDING_FOR_DETAILS_VERIFICATION\": //ACCOUNTS_OFFICER\r\n                topic=envVariables.KAFKA_TOPICS_SAVE_PENDING_FOR_DETAILS_VERIFICATION;  \r\n                break;\r\n              case \"PENDING_FOR_DETAILS_REVIEW\": //SENIOR_ASSISTANT\r\n                topic=envVariables.KAFKA_TOPICS_SAVE_PENDING_FOR_DETAILS_REVIEW;  \r\n                break;\r\n              case \"PENDING_FOR_CALCULATION\": //CLERK  \r\n                if(action==envVariables.EGOV_PENSION_WORKFLOW_ACTION_SEND_BACK) {\r\n                  topic=envVariables.KAFKA_TOPICS_CLEAR_BENEFIT;  \r\n                }           \r\n                else{\r\n                  topic=envVariables.KAFKA_TOPICS_SAVE_PENDING_FOR_CALCULATION;  \r\n                }                    \r\n                break;\r\n              case \"PENDING_FOR_CALCULATION_VERIFICATION\": //SENIOR_ASSISTANT                 \r\n                break;\r\n              case \"PENDING_FOR_CALCULATION_APPROVAL\": //ACCOUNTS_OFFICER      \r\n                topic=envVariables.KAFKA_TOPICS_UPDATE_PENSION_WORKFLOW_STATE;                 \r\n                break;\r\n              case \"PENDING_FOR_CALCULATION_REVIEW\": //ACCOUNTS_OFFICER  \r\n                topic=envVariables.KAFKA_TOPICS_SAVE_PENDING_FOR_CALCULATION_REVIEW;                                               \r\n                break;\r\n              case \"PENDING_FOR_APPROVAL\": //ADDITIONAL_COMMISSIONER    \r\n                topic=envVariables.KAFKA_TOPICS_UPDATE_PENSION_WORKFLOW_STATE;                                            \r\n                break;\r\n              case \"PENDING_FOR_AUDIT\": //ACCOUNTS_OFFICER    \r\n                topic=envVariables.KAFKA_TOPICS_UPDATE_PENSION_WORKFLOW_STATE;                                            \r\n                break;\r\n              case \"PENDING_FOR_CONTINGENT_BILL_PREPARATION_WITH_ACCOUNTS_OFFICER\": //ACCOUNTS_OFFICER                                            \r\n                topic=envVariables.KAFKA_TOPICS_UPDATE_PENSION_WORKFLOW_STATE;    \r\n                break;     \r\n              case \"PENDING_FOR_CONTINGENT_BILL_PREPARATION_WITH_SENIOR_ASSISTANT\": //SENIOR_ASSISTANT                                            \r\n                topic=envVariables.KAFKA_TOPICS_UPDATE_PENSION_WORKFLOW_STATE;    \r\n                break;   \r\n              case \"PENDING_FOR_CONTINGENT_BILL_PREPARATION_WITH_CLERK\": //CLERK       \r\n                await closeWorkflowByUser(body); //close workflow  \r\n                topic=envVariables.KAFKA_TOPICS_UPDATE_PENSION_WORKFLOW_STATE;                                  \r\n                break;              \r\n              default:\r\n                break;\r\n            }           \r\n          }          \r\n        break;\r\n        case envVariables.EGOV_PENSION_DOE_BUSINESS_SERVICE:  //Death of an employee        \r\n          if(action===envVariables.EGOV_PENSION_WORKFLOW_ACTION_INITIATE)  //initiate\r\n          {                                                             \r\n            topic=envVariables.KAFKA_TOPICS_DOE_INITIATE;            \r\n          }\r\n          else{ \r\n            //Release Workflow                       \r\n            if(action!=\"\"){\r\n              let releaseWorkFlowResponse = await releaseWorkFlow(body);              \r\n            }                \r\n            switch(currentState)\r\n            {\r\n              case \"INITIATED\": //PMS_DDO                           \r\n                topic=envVariables.KAFKA_TOPICS_SAVE_DEATH_INITIATED;    \r\n                if(action==envVariables.EGOV_PENSION_WORKFLOW_ACTION_FORWARD){                  \r\n                  workflowTemplateInterfaceSMS(body.ProcessInstances[0]);\r\n                }                           \r\n                break;\r\n              case \"PENDING_FOR_DETAILS_VERIFICATION\":\r\n                topic=envVariables.KAFKA_TOPICS_SAVE_PENDING_FOR_DETAILS_VERIFICATION;  \r\n                break;\r\n              case \"PENDING_FOR_DETAILS_REVIEW\":\r\n                topic=envVariables.KAFKA_TOPICS_SAVE_PENDING_FOR_DETAILS_REVIEW;  \r\n                break;\r\n              case \"PENDING_FOR_CALCULATION\": //CLERK              \r\n                if(action==envVariables.EGOV_PENSION_WORKFLOW_ACTION_SEND_BACK) {\r\n                  topic=envVariables.KAFKA_TOPICS_CLEAR_BENEFIT;  \r\n                }           \r\n                else{\r\n                  topic=envVariables.KAFKA_TOPICS_SAVE_PENDING_FOR_CALCULATION;  \r\n                }       \r\n                break;\r\n              case \"PENDING_FOR_CALCULATION_VERIFICATION\":   \r\n                topic=envVariables.KAFKA_TOPICS_UPDATE_PENSION_WORKFLOW_STATE;               \r\n                break;\r\n              case \"PENDING_FOR_CALCULATION_APPROVAL\":\r\n                topic=envVariables.KAFKA_TOPICS_UPDATE_PENSION_WORKFLOW_STATE;                  \r\n                break;\r\n              case \"PENDING_FOR_CALCULATION_REVIEW\": //ACCOUNTS_OFFICER  \r\n                topic=envVariables.KAFKA_TOPICS_SAVE_PENDING_FOR_CALCULATION_REVIEW;                                               \r\n                break;\r\n              case \"PENDING_FOR_APPROVAL\": //ADDITIONAL_COMMISSIONER   \r\n                topic=envVariables.KAFKA_TOPICS_UPDATE_PENSION_WORKFLOW_STATE;                                         \r\n                break;\r\n              case \"PENDING_FOR_AUDIT\": //ACCOUNTS_OFFICER    \r\n                topic=envVariables.KAFKA_TOPICS_UPDATE_PENSION_WORKFLOW_STATE;                                        \r\n                break;\r\n              case \"PENDING_FOR_CONTINGENT_BILL_PREPARATION_WITH_ACCOUNTS_OFFICER\": //ACCOUNTS_OFFICER                                            \r\n                topic=envVariables.KAFKA_TOPICS_UPDATE_PENSION_WORKFLOW_STATE;\r\n                break;     \r\n              case \"PENDING_FOR_CONTINGENT_BILL_PREPARATION_WITH_SENIOR_ASSISTANT\": //SENIOR_ASSISTANT                                            \r\n                topic=envVariables.KAFKA_TOPICS_UPDATE_PENSION_WORKFLOW_STATE;\r\n                break;   \r\n              case \"PENDING_FOR_CONTINGENT_BILL_PREPARATION_WITH_CLERK\": //CLERK \r\n                await closeWorkflowByUser(body); //close workflow  \r\n                topic=envVariables.KAFKA_TOPICS_UPDATE_PENSION_WORKFLOW_STATE;                                         \r\n                break;              \r\n              default:\r\n                break;\r\n            }\r\n            \r\n                          \r\n\r\n          }\r\n        \r\n        break;\r\n        case envVariables.EGOV_PENSION_DOP_BUSINESS_SERVICE:  //Death of a pensioner        \r\n          if(action===envVariables.EGOV_PENSION_WORKFLOW_ACTION_INITIATE)  //initiate\r\n          {                                                             \r\n            topic=envVariables.KAFKA_TOPICS_DOP_INITIATE;            \r\n          }\r\n          else{ \r\n            //Release Workflow                       \r\n            if(action!=\"\"){\r\n              let releaseWorkFlowResponse = await releaseWorkFlow(body);              \r\n            }                \r\n            switch(currentState)\r\n            {\r\n              case \"INITIATED\": //PMS_DDO                           \r\n                topic=envVariables.KAFKA_TOPICS_SAVE_DEATH_INITIATED; \r\n                if(action==envVariables.EGOV_PENSION_WORKFLOW_ACTION_FORWARD){                  \r\n                  workflowTemplateInterfaceSMS(body.ProcessInstances[0]);\r\n                }                             \r\n                break;\r\n              case \"PENDING_FOR_DETAILS_VERIFICATION\":\r\n                topic=envVariables.KAFKA_TOPICS_SAVE_PENDING_FOR_DETAILS_VERIFICATION;  \r\n                break;\r\n              case \"PENDING_FOR_DETAILS_REVIEW\":\r\n                topic=envVariables.KAFKA_TOPICS_SAVE_PENDING_FOR_DETAILS_REVIEW;  \r\n                break;\r\n              case \"PENDING_FOR_CALCULATION\": //CLERK              \r\n                if(action==envVariables.EGOV_PENSION_WORKFLOW_ACTION_SEND_BACK) {\r\n                  topic=envVariables.KAFKA_TOPICS_CLEAR_BENEFIT;  \r\n                }           \r\n                else{\r\n                  topic=envVariables.KAFKA_TOPICS_SAVE_PENDING_FOR_CALCULATION;  \r\n                }  \r\n                break;\r\n              case \"PENDING_FOR_CALCULATION_VERIFICATION\":     \r\n                topic=envVariables.KAFKA_TOPICS_UPDATE_PENSION_WORKFLOW_STATE;             \r\n                break;\r\n              case \"PENDING_FOR_CALCULATION_APPROVAL\":   \r\n                topic=envVariables.KAFKA_TOPICS_UPDATE_PENSION_WORKFLOW_STATE;               \r\n                break;\r\n              case \"PENDING_FOR_CALCULATION_REVIEW\": //ACCOUNTS_OFFICER  \r\n                topic=envVariables.KAFKA_TOPICS_SAVE_PENDING_FOR_CALCULATION_REVIEW;                                               \r\n                break;\r\n              case \"PENDING_FOR_APPROVAL\": //ADDITIONAL_COMMISSIONER    \r\n                topic=envVariables.KAFKA_TOPICS_UPDATE_PENSION_WORKFLOW_STATE;                                        \r\n                break;\r\n              case \"PENDING_FOR_AUDIT\": //ACCOUNTS_OFFICER     \r\n                topic=envVariables.KAFKA_TOPICS_UPDATE_PENSION_WORKFLOW_STATE;                                       \r\n                break;\r\n              case \"PENDING_FOR_CONTINGENT_BILL_PREPARATION_WITH_ACCOUNTS_OFFICER\": //ACCOUNTS_OFFICER                                            \r\n                topic=envVariables.KAFKA_TOPICS_UPDATE_PENSION_WORKFLOW_STATE;\r\n                break;     \r\n              case \"PENDING_FOR_CONTINGENT_BILL_PREPARATION_WITH_SENIOR_ASSISTANT\": //SENIOR_ASSISTANT                                            \r\n                topic=envVariables.KAFKA_TOPICS_UPDATE_PENSION_WORKFLOW_STATE;\r\n                break;   \r\n              case \"PENDING_FOR_CONTINGENT_BILL_PREPARATION_WITH_CLERK\": //CLERK   \r\n                await closeWorkflowByUser(body); //close workflow  \r\n                topic=envVariables.KAFKA_TOPICS_UPDATE_PENSION_WORKFLOW_STATE;                                       \r\n                break;             \r\n              default:\r\n                break;\r\n            }\r\n            \r\n                          \r\n\r\n          }\r\n        \r\n        break;\r\n\r\n      }\r\n      \r\n\r\n      payloads.push({\r\n        topic: topic,\r\n        messages: JSON.stringify(body)\r\n      });\r\n      producer.send(payloads, function(err, data) {\r\n        let response = {\r\n          ResponseInfo: requestInfoToResponseInfo(body.RequestInfo, true),\r\n          ProcessInstances: body.ProcessInstances\r\n        };\r\n        res.json(response);\r\n      });\r\n      \r\n\r\n        \r\n    })\r\n  );\r\n  return api;\r\n};\r\n"]}