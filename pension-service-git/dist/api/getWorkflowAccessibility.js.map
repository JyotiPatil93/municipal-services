{"version":3,"sources":["../../src/api/getWorkflowAccessibility.js"],"names":["asyncHandler","require","config","db","api","post","request","res","next","response","ResponseInfo","body","RequestInfo","ProcessInstances","queryObj","JSON","parse","stringify","query","errors","length","errorType","errorReponse","Errors","text","tenantId","businessIds","sqlQuery","err","dbRes","logger","error","stack","rows","workflowAccessibilty","processInstances","push","json"],"mappings":";;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;;;AACA;;;;AACA;;;;AAEA;;AACA;;;;AACA;;;;AACA;;;;AAGA;;;;;;AAFA,IAAMA,eAAeC,QAAQ,uBAAR,CAArB;;kBAIe,gBAAoB;AAAA,MAAjBC,MAAiB,QAAjBA,MAAiB;AAAA,MAATC,EAAS,QAATA,EAAS;;AACjC,MAAIC,MAAM,sBAAV;AACAA,MAAIC,IAAJ,CACE,4BADF,EAEEL;AAAA,yFAAa,kBAAOM,OAAP,EAAgBC,GAAhB,EAAqBC,IAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAEPC,sBAFO,GAEI;AACbC,8BAAc,sCAA0BJ,QAAQK,IAAR,CAAaC,WAAvC,EAAoD,IAApD,CADD;AAEbC,kCAAkB;AAFL,eAFJ;AAOLC,sBAPK,GAOMC,KAAKC,KAAL,CAAWD,KAAKE,SAAL,CAAeX,QAAQY,KAAvB,CAAX,CAPN;AAUPC,oBAVO,GAUE,kDAA4BL,QAA5B,CAVF;;AAAA,oBAWPK,OAAOC,MAAP,GAAgB,CAXT;AAAA;AAAA;AAAA;;AAYTZ,mBAAK;AACHa,2BAAW,QADR;AAEHC,8BAAc;AACZZ,gCAAc,sCACZJ,QAAQK,IAAR,CAAaC,WADD,EAEZ,IAFY,CADF;AAKZW,0BAAQJ;AALI;AAFX,eAAL;AAZS;;AAAA;AAwBPK,kBAxBO,GAyBT,+IAzBS;;;AA2BX,kBAAI,CAAC,uBAAQV,QAAR,CAAL,EAAwB;AACtBU,uBAAOA,OAAO,SAAd;AACD;AACD,kBAAIV,SAASW,QAAb,EAAuB;AACrBD,uBAAUA,IAAV,yBAAkCV,SAASW,QAA3C;AACD;AACD,kBAAIX,SAASY,WAAb,EAA0B;AACxBF,uBAAUA,IAAV,uCAAgDV,SAASY,WAAzD;AACD;AACDF,qBAAUA,IAAV;;AAGIG,sBAvCO,GAuCIH,IAvCJ;;;AA0CXrB,iBAAGe,KAAH,CAASS,QAAT;AAAA,qGAAmB,iBAAOC,GAAP,EAAYC,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACbD,GADa;AAAA;AAAA;AAAA;;AAEfE,2CAAOC,KAAP,CAAaH,IAAII,KAAjB;AAFe;AAAA;;AAAA;AAAA,gCAMbH,MAAMI,IAAN,IAAc,CAAC,uBAAQJ,MAAMI,IAAd,CANF;AAAA;AAAA;AAAA;;AAAA;AAAA,iCAOH,uCACJJ,MAAMI,IADF,EAEJ3B,QAAQY,KAFJ,EAGJZ,QAAQK,IAAR,CAAaC,WAHT,CAPG;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,wCAYT,EAZS;;AAAA;AAKTsB,8CALS;AAcPC,0CAdO,GAcU,EAdV;;AAeXA,2CAAiBC,IAAjB,CAAsBF,oBAAtB;AACAzB,mCAASI,gBAAT,GAA0BsB,gBAA1B;AACA5B,8BAAI8B,IAAJ,CAAS5B,QAAT;;AAjBW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAnB;;AAAA;AAAA;AAAA;AAAA;;AA1CW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAb;;AAAA;AAAA;AAAA;AAAA,MAFF;AAmEA,SAAOL,GAAP;AACD,C","file":"getWorkflowAccessibility.js","sourcesContent":["import { Router } from \"express\";\nimport { requestInfoToResponseInfo} from \"../utils\";\nimport { mergeWorkflowAccessibilty } from \"../utils/search\";\nimport isEmpty from \"lodash/isEmpty\";\nimport get from \"lodash/get\";\nimport some from \"lodash/some\";\nimport { actions } from \"../utils/search\";\nimport { validateWorkflowSearchModel} from \"../utils/modelValidation\";\nimport envVariables from \"../envVariables\";\nimport mdmsData from \"../utils/mdmsData\";\nimport filter from \"lodash/filter\";\nconst asyncHandler = require(\"express-async-handler\");\n\nimport logger from \"../config/logger\";\n\nexport default ({ config, db }) => {\n  let api = Router();\n  api.post(\n    \"/_getWorkflowAccessibility\",\n    asyncHandler(async (request, res, next) => {     \n      \n      let response = {\n        ResponseInfo: requestInfoToResponseInfo(request.body.RequestInfo, true),\n        ProcessInstances: []\n      };\n\n      const queryObj = JSON.parse(JSON.stringify(request.query));\n      \n     \n      let errors = validateWorkflowSearchModel(queryObj);\n      if (errors.length > 0) {\n        next({\n          errorType: \"custom\",\n          errorReponse: {\n            ResponseInfo: requestInfoToResponseInfo(\n              request.body.RequestInfo,\n              true\n            ),\n            Errors: errors\n          }\n        });\n        return;\n      }    \n      let text =\n        \"select pe.employee_hrms_code, pwh.assignee from eg_pension_workflow_header pwh join eg_pension_employee pe on pwh.pension_employee_id=pe.uuid\";\n\n      if (!isEmpty(queryObj)) {\n        text = text + \" where \";\n      }\n      if (queryObj.tenantId) {\n        text = `${text} pwh.tenantid = '${queryObj.tenantId}'`;\n      }\n      if (queryObj.businessIds) {\n        text = `${text} and pwh.application_number = '${queryObj.businessIds}'`;\n      }             \n      text = `${text} and pwh.active = true`;\n      \n      \n      let sqlQuery = text;      \n      \n     \n      db.query(sqlQuery, async (err, dbRes) => {\n        if (err) {\n          logger.error(err.stack);\n        } else {          \n                  \n            let workflowAccessibilty =\n            dbRes.rows && !isEmpty(dbRes.rows)\n              ? await mergeWorkflowAccessibilty(\n                  dbRes.rows,\n                  request.query,\n                  request.body.RequestInfo\n                )\n              : {};        \n\n              let processInstances=[];\n              processInstances.push(workflowAccessibilty);\n              response.ProcessInstances=processInstances;      \n              res.json(response);\n                           \n        }\n      });  \n    })\n  );\n  return api;\n};\n"]}