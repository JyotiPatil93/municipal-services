{"version":3,"sources":["../../src/api/updatePensionRevisionBulk.js"],"names":["asyncHandler","require","config","db","api","post","res","next","body","payloads","tenantId","Parameters","effectiveYear","Number","effectiveMonth","modifyDA","Boolean","modifyIR","modifyFMA","FMA","effetiveDate","Date","RequestInfo","pensionRevisionResponse","pensionRevisions","ProcessInstances","pensionRevision","logger","debug","newPensionRevisions","oldPensionRevisions","i","length","effectiveStartDate","effectiveStartYear","effectiveStartMonth","effectiveEndDate","effectiveEndYear","effectiveEndMonth","oldPensionRevision","newPensionRevision","updatedFMA","fma","mdms","irPercentage","updatedIR","interimRelief","Math","round","basicPension","updatedAdditionalPension","additionalPension","additionalPensionPercentage","dateOfBirth","ceil","daPercentage","updatedDA","da","updatedCommutedPension","commutedPension","retirementStartedYear","dateOfRetirement","updatedTotalPension","miscellaneous","woundExtraOrdinaryPension","attendantAllowance","updatedNetPension","netDeductions","push","pensionerId","pensionRevisionId","pensionArrear","overPayment","over_payment","incomeTax","income_tax","cess","finalCalculatedPension","active","totalPension","pensionDeductions","pensionerFinalCalculatedBenefitId","topic","envVariables","KAFKA_TOPICS_CREATE_REVISED_PENSION_BULK","messages","JSON","stringify","producer","send","err","data","response","ResponseInfo","json"],"mappings":"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","file":"updatePensionRevisionBulk.js","sourcesContent":["import { Router } from \"express\";\r\nimport producer from \"../kafka/producer\";\r\nimport { requestInfoToResponseInfo,getPensionRevisions} from \"../utils\";\r\nimport { mergePensionRevisionResults } from \"../utils/search\";\r\nimport envVariables from \"../envVariables\";\r\nimport mdmsData from \"../utils/mdmsData\";\r\nimport { addUUIDAndAuditDetailsCreatePensionRevisionBulk } from \"../utils/create\";\r\nimport set from \"lodash/set\";\r\nimport get from \"lodash/get\";\r\nimport filter from \"lodash/filter\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport { getYearOfService,getDAPercentage,getCommutationPercentage,getCommutationMultiplier,getIRPercentage,getAdditionalPensionPercentage,getPensionConfigurationValue,getDOJ, getMonthsDaysInRange,getAge,isEldestDependent,getAdditionalPensionPercentageForFamily,getHalfYearOfService, getAdditionalPensionPercentageAfterRetirement, getYearDifference } from \"../utils/calculationHelper\";\r\n\r\nconst asyncHandler = require(\"express-async-handler\");\r\n\r\nimport logger from \"../config/logger\";\r\n\r\nexport default ({ config, db }) => {\r\n  let api = Router();\r\n  api.post(\r\n    \"/_updatePensionRevisionBulk\",\r\n    asyncHandler(async ({ body }, res, next) => {\r\n      let payloads = [];\r\n      \r\n      \r\n      \r\n      \r\n      let tenantId=body.Parameters.tenantId;\r\n      let effectiveYear=Number(body.Parameters.effectiveYear);\r\n      let effectiveMonth=Number(body.Parameters.effectiveMonth);\r\n      let modifyDA=Boolean(body.Parameters.modifyDA);\r\n      let modifyIR=Boolean(body.Parameters.modifyIR);\r\n      let modifyFMA=Boolean(body.Parameters.modifyFMA);\r\n      let FMA=Number(body.Parameters.FMA);\r\n      let effetiveDate=new Date(effectiveYear,effectiveMonth-1,1);\r\n\r\n      let pensionRevisionResponse = await getPensionRevisions(body.RequestInfo,body.Parameters.tenantId); \r\n      let pensionRevisions=pensionRevisionResponse.ProcessInstances[0].pensionRevision;\r\n      logger.debug(\"pensionRevisions\",pensionRevisions);\r\n      let newPensionRevisions=[];\r\n      let oldPensionRevisions=[];\r\n      \r\n      for (var i = 0; i < pensionRevisions.length; i++) { \r\n        let pensionRevision=pensionRevisions[i];\r\n        let effectiveStartDate=new Date(pensionRevision.effectiveStartYear,pensionRevision.effectiveStartMonth-1,1);\r\n        let effectiveEndDate=pensionRevision.effectiveEndYear!=null? new Date(pensionRevision.effectiveEndYear,pensionRevision.effectiveEndMonth-1,1):effetiveDate;\r\n        let oldPensionRevision;\r\n        let newPensionRevision;\r\n\r\n\r\n        if(effetiveDate>=effectiveStartDate && effetiveDate<=effectiveEndDate){\r\n\r\n          oldPensionRevision=pensionRevision;\r\n          newPensionRevision=pensionRevision;\r\n\r\n          if(effectiveMonth==1){\r\n            oldPensionRevision.effectiveEndMonth=12;\r\n          }else{\r\n            oldPensionRevision.effectiveEndMonth=effectiveMonth-1;\r\n          }\r\n\r\n          if(effectiveMonth==1){\r\n            oldPensionRevision.effectiveEndYear=effectiveYear-1;\r\n          }else{\r\n            oldPensionRevision.effectiveEndYear=effectiveYear;\r\n          }                    \r\n\r\n          let updatedFMA = pensionRevision.fma;\r\n\r\n          if(modifyFMA){\r\n            updatedFMA=FMA;\r\n          }\r\n\r\n          //newPensionRevision.fma = updatedFMA;\r\n\r\n          let mdms = await mdmsData(body.RequestInfo, tenantId);\r\n\r\n          let irPercentage = getIRPercentage(effetiveDate, mdms);\r\n\r\n          let updatedIR = pensionRevision.interimRelief;\r\n\r\n          if(modifyIR){\r\n            updatedIR=Math.round(pensionRevision.basicPension*irPercentage/100);\r\n          }\r\n\r\n          let updatedAdditionalPension = pensionRevision.additionalPension;\r\n\r\n          let additionalPensionPercentage=getAdditionalPensionPercentageAfterRetirement(new Date(Number(pensionRevision.dateOfBirth)),effetiveDate,mdms);\r\n\r\n          updatedAdditionalPension=Math.ceil((pensionRevision.basicPension+updatedIR)*additionalPensionPercentage/100);\r\n\r\n          let daPercentage = getDAPercentage(effetiveDate, mdms);\r\n\r\n          let updatedDA = pensionRevision.da;\r\n\r\n          if(modifyDA){\r\n            updatedDA=Math.round((pensionRevision.basicPension+updatedIR+updatedAdditionalPension)*daPercentage/100);\r\n          }\r\n\r\n          let updatedCommutedPension = pensionRevision.commutedPension;\r\n\r\n          if(pensionRevision.commutedPension > 0){\r\n\r\n            let retirementStartedYear = getYearDifference(new Date(Number(pensionRevision.dateOfRetirement)), effetiveDate)\r\n\r\n            if (retirementStartedYear>15){\r\n              updatedCommutedPension=0;\r\n\r\n            }\r\n\r\n          }          \r\n\r\n          if(updatedFMA!=pensionRevision.fma || updatedDA!=pensionRevision.da\r\n            || updatedIR!=pensionRevision.interimRelief || updatedAdditionalPension!=pensionRevision.additionalPension\r\n            || updatedCommutedPension!=pensionRevision.commutedPension\r\n            || (pensionRevision.effectiveStartYear==effectiveYear \r\n              && pensionRevision.effectiveStartMonth==effectiveMonth)){\r\n\r\n              \r\n          let updatedTotalPension = pensionRevision.basicPension+updatedDA-updatedCommutedPension+updatedAdditionalPension+updatedIR+updatedFMA+pensionRevision.miscellaneous+pensionRevision.woundExtraOrdinaryPension+pensionRevision.attendantAllowance;\r\n\r\n          let updatedNetPension = updatedTotalPension-pensionRevision.netDeductions;\r\n          \r\n          if(oldPensionRevision.effectiveStartYear==effectiveYear \r\n            && oldPensionRevision.effectiveStartMonth==effectiveMonth ) {}\r\n            else{\r\n          oldPensionRevisions.push(oldPensionRevision);\r\n            }\r\n\r\n          newPensionRevisions.push(\r\n            {\r\n            tenantId: tenantId,\r\n            pensionerId: pensionRevision.pensionerId,\r\n            pensionRevisionId: pensionRevision.pensionRevisionId,                  \r\n            effectiveStartYear: effectiveYear,\r\n            effectiveStartMonth: effectiveMonth,\r\n            effectiveEndYear: null,\r\n            effectiveEndMonth:null,\r\n            pensionArrear:pensionRevision.pensionArrear,\r\n            fma:updatedFMA,\r\n            miscellaneous:pensionRevision.miscellaneous,\r\n            overPayment:pensionRevision.over_payment,\r\n            incomeTax:pensionRevision.income_tax,\r\n            cess:pensionRevision.cess,\r\n            basicPension:pensionRevision.basicPension,\r\n            commutedPension:updatedCommutedPension,\r\n            additionalPension:updatedAdditionalPension,\r\n            netDeductions:pensionRevision.netDeductions,\r\n            finalCalculatedPension:updatedNetPension,\r\n            active:true,\r\n            interimRelief:updatedIR,\r\n            da:updatedDA,\r\n            totalPension:updatedTotalPension,\r\n            pensionDeductions:pensionRevision.pensionDeductions,\r\n            pensionerFinalCalculatedBenefitId:pensionRevision.pensionerFinalCalculatedBenefitId,\r\n            woundExtraOrdinaryPension:pensionRevision.woundExtraOrdinaryPension,\r\n            attendantAllowance:pensionRevision.attendantAllowance\r\n\r\n\r\n\r\n          }\r\n          );\r\n        }\r\n\r\n        }\r\n      }\r\n      \r\n \r\n      body.Parameters.oldPensionRevisions=oldPensionRevisions;\r\n      body.Parameters.newPensionRevisions=newPensionRevisions;\r\n      \r\n      body = await addUUIDAndAuditDetailsCreatePensionRevisionBulk(body);        \r\n      \r\n      \r\n      payloads.push({\r\n        topic: envVariables.KAFKA_TOPICS_CREATE_REVISED_PENSION_BULK, \r\n        messages: JSON.stringify(body)\r\n      });\r\n\r\n      producer.send(payloads, function(err, data) {\r\n        let response = {\r\n          ResponseInfo: requestInfoToResponseInfo(body.RequestInfo, true),\r\n          ProcessInstances: body.Parameters\r\n        };\r\n        res.json(response);\r\n      });\r\n\r\n\r\n\r\n\r\n\r\n    })\r\n  );\r\n  return api;\r\n};\r\n"]}