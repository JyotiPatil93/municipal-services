{"version":3,"sources":["../../src/api/claimWorkflow.js"],"names":["asyncHandler","require","config","db","api","post","res","next","body","payloads","logger","debug","topic","envVariables","KAFKA_TOPICS_CLAIM_WORKFLOW","push","messages","JSON","stringify","producer","send","err","data","response","ResponseInfo","RequestInfo","ProcessInstances","json"],"mappings":";;;;;;;;;;;;;;AAAA;;AACA;;;;AACA;;AACA;;AACA;;;;AAGA;;;;;;AAFA,IAAMA,eAAeC,QAAQ,uBAAR,CAArB;;kBAIe,gBAAoB;AAAA,MAAjBC,MAAiB,QAAjBA,MAAiB;AAAA,MAATC,EAAS,QAATA,EAAS;;AACjC,MAAIC,MAAM,sBAAV;AACAA,MAAIC,IAAJ,CACE,iBADF,EAEEL;AAAA,yFAAa,wBAAiBM,GAAjB,EAAsBC,IAAtB;AAAA,UAASC,IAAT,SAASA,IAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AACPC,sBADO,GACI,EADJ;AAAA;AAAA,qBAKE,wDAA2CD,IAA3C,CALF;;AAAA;AAKXA,kBALW;;AAMXE,+BAAOC,KAAP,CAAa,MAAb,EAAoBH,IAApB;AACII,mBAPO,GAODC,uBAAaC,2BAPZ;;;AASXL,uBAASM,IAAT,CAAc;AACZH,uBAAOA,KADK;AAEZI,0BAAUC,KAAKC,SAAL,CAAeV,IAAf;AAFE,eAAd;AAIAW,iCAASC,IAAT,CAAcX,QAAd,EAAwB,UAASY,GAAT,EAAcC,IAAd,EAAoB;AAC1C,oBAAIC,WAAW;AACbC,gCAAc,sCAA0BhB,KAAKiB,WAA/B,EAA4C,IAA5C,CADD;AAEbC,oCAAkBlB,KAAKkB;AAFV,iBAAf;AAIApB,oBAAIqB,IAAJ,CAASJ,QAAT;AACD,eAND;;AAbW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAb;;AAAA;AAAA;AAAA;AAAA,MAFF;AA2BA,SAAOnB,GAAP;AACD,C","file":"claimWorkflow.js","sourcesContent":["import { Router } from \"express\";\nimport producer from \"../kafka/producer\";\nimport { requestInfoToResponseInfo, } from \"../utils\";\nimport { addUUIDAndAuditDetailsClaimReleaseWorkflow } from \"../utils/create\";\nimport envVariables from \"../envVariables\";\nconst asyncHandler = require(\"express-async-handler\");\n\nimport logger from \"../config/logger\";\n\nexport default ({ config, db }) => {\n  let api = Router();\n  api.post(\n    \"/_claimWorkflow\",\n    asyncHandler(async ({ body }, res, next) => {\n      let payloads = [];\n     \n      \n           \n      body = await addUUIDAndAuditDetailsClaimReleaseWorkflow(body);      \n      logger.debug(\"body\",body);\n      let topic=envVariables.KAFKA_TOPICS_CLAIM_WORKFLOW;\n      \n      payloads.push({\n        topic: topic,\n        messages: JSON.stringify(body)\n      });\n      producer.send(payloads, function(err, data) {\n        let response = {\n          ResponseInfo: requestInfoToResponseInfo(body.RequestInfo, true),\n          ProcessInstances: body.ProcessInstances\n        };\n        res.json(response);\n      });\n      \n\n        \n    })\n  );\n  return api;\n};\n"]}