{"version":3,"sources":["../../src/api/saveEmployeeDisability.js"],"names":["asyncHandler","require","config","db","api","post","res","next","body","payloads","RequestInfo","Employees","tenantId","mdms","mdmsDisability","disability","x","code","severityOfDisability","length","message","errors","DISABILITY_PERCENTAGE_NOT_SET","errorType","errorReponse","ResponseInfo","Errors","disabilityPercentage","Number","value","pensionEmployeeId","pensionResponse","pensionEmployeesList","uuid","push","topic","envVariables","KAFKA_TOPICS_SAVE_DISABILITY_DETAILS","messages","JSON","stringify","producer","send","err","data","response","json"],"mappings":";;;;;;;;;;;;;;AAAA;;AACA;;;;AACA;;AACA;;AACA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA,IAAMA,eAAeC,QAAQ,uBAAR,CAArB;;kBAEe,gBAAoB;AAAA,MAAjBC,MAAiB,QAAjBA,MAAiB;AAAA,MAATC,EAAS,QAATA,EAAS;;AACjC,MAAIC,MAAM,sBAAV;AACAA,MAAIC,IAAJ,CACE,0BADF,EAEEL;AAAA,yFAAa,wBAAiBM,GAAjB,EAAsBC,IAAtB;AAAA,UAASC,IAAT,SAASA,IAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AACPC,sBADO,GACI,EADJ;AAEX;;AAEC;;AAJU;AAAA,qBAKO,wBAASD,KAAKE,WAAd,EAA2BF,KAAKG,SAAL,CAAe,CAAf,EAAkBC,QAA7C,CALP;;AAAA;AAKNC,kBALM;AAOJC,4BAPI,GAOW,mBAAID,IAAJ,EAAS,4BAAT,CAPX;AAQNE,wBARM,GAQK,sBAAOD,cAAP,EAAsB,UAASE,CAAT,EAAW;AAAC,uBAAOA,EAAEC,IAAF,IAAQT,KAAKG,SAAL,CAAe,CAAf,EAAkBO,oBAAjC;AAAuD,eAAzF,CARL;;AAAA,oBASPH,WAAWI,MAAX,IAAmB,CATZ;AAAA;AAAA;AAAA;;AAWHC,qBAXG,GAWK,uBAXL;AAaLC,oBAbK,GAaID,QAAQE,6BAbZ;;AAAA,oBAcLD,OAAOF,MAAP,GAAgB,CAdX;AAAA;AAAA;AAAA;;AAePZ,mBAAK;AACHgB,2BAAW,QADR;AAEHC,8BAAc;AACZC,gCAAc,sCACZjB,KAAKE,WADO,EAEZ,IAFY,CADF;AAKZgB,0BAAQL;AALI;AAFX,eAAL;AAfO;;AAAA;AA6BNM,kCA7BM,GA6BeC,OAAOb,WAAW,CAAX,EAAcc,KAArB,CA7Bf;;AA8BVrB,mBAAKG,SAAL,CAAe,CAAf,EAAkBgB,oBAAlB,GAAuCA,oBAAvC;;AAEIG,+BAhCM,GAgCY,EAhCZ;AAAA;AAAA,qBAiCgB,gCAAoBtB,KAAKE,WAAzB,EAAqCF,KAAKG,SAAL,CAAe,CAAf,EAAkBC,QAAvD,EAAgEJ,KAAKG,SAAL,CAAe,CAAf,EAAkBM,IAAlF,CAjChB;;AAAA;AAiCNc,6BAjCM;AAkCNC,kCAlCM,GAkCeD,gBAAgBpB,SAlC/B;;AAmCV,kBAAGqB,qBAAqBb,MAArB,GAA4B,CAA/B,EAAiC;AAChCW,oCAAkBE,qBAAqB,CAArB,EAAwBC,IAA1C;AACAzB,qBAAKG,SAAL,CAAe,CAAf,EAAkBsB,IAAlB,GAAuBH,iBAAvB;AACA;;AAtCS;AAAA,qBAwCG,0DAA6CtB,IAA7C,CAxCH;;AAAA;AAwCVA,kBAxCU;;;AA0CVC,uBAASyB,IAAT,CAAc;AACbC,uBAAOC,uBAAaC,oCADP;AAEbC,0BAAUC,KAAKC,SAAL,CAAehC,IAAf;AAFG,eAAd;AAIDiC,iCAASC,IAAT,CAAcjC,QAAd,EAAwB,UAASkC,GAAT,EAAcC,IAAd,EAAoB;AAC1C,oBAAIC,WAAW;AACbpB,gCAAc,sCAA0BjB,KAAKE,WAA/B,EAA4C,IAA5C,CADD;AAEbC,6BAAWH,KAAKG;AAFH,iBAAf;AAIAL,oBAAIwC,IAAJ,CAASD,QAAT;AACD,eAND;;AA9CW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAb;;AAAA;AAAA;AAAA;AAAA,MAFF;AA4DA,SAAOzC,GAAP;AACD,C","file":"saveEmployeeDisability.js","sourcesContent":["import { Router } from \"express\";\r\nimport producer from \"../kafka/producer\";\r\nimport { requestInfoToResponseInfo,getPensionEmployees} from \"../utils\";\r\nimport { addUUIDAndAuditDetailsDisabilityRegistration } from \"../utils/create\";\r\nimport envVariables from \"../envVariables\";\r\nimport mdmsData from \"../utils/mdmsData\";\r\nimport { Message} from \"../utils/message\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport set from \"lodash/set\";\r\nimport get from \"lodash/get\";\r\nimport filter from \"lodash/filter\";\r\nimport { intConversion} from \"../utils/search\";\r\nconst asyncHandler = require(\"express-async-handler\");\r\n\r\nexport default ({ config, db }) => {\r\n  let api = Router();\r\n  api.post(\r\n    \"/_saveEmployeeDisability\",\r\n    asyncHandler(async ({ body }, res, next) => {\r\n      let payloads = [];\r\n      //getting mdms data      \r\n         \r\n       //getting mdms data\r\n       let mdms = await mdmsData(body.RequestInfo, body.Employees[0].tenantId);\r\n       \r\n       const mdmsDisability=get(mdms,\"MdmsRes.pension.Disability\");  \r\n       let disability=filter(mdmsDisability,function(x){return x.code==body.Employees[0].severityOfDisability;});\r\n       if(disability.length==0){\r\n\r\n        const message=Message();                  \r\n        \r\n        let errors = message.DISABILITY_PERCENTAGE_NOT_SET;\r\n        if (errors.length > 0) {\r\n          next({\r\n            errorType: \"custom\",\r\n            errorReponse: {\r\n              ResponseInfo: requestInfoToResponseInfo(\r\n                body.RequestInfo,\r\n                true\r\n              ),\r\n              Errors: errors\r\n            }\r\n          });\r\n          return;\r\n        }      \r\n       }\r\n      \r\n       let disabilityPercentage=Number(disability[0].value);\r\n       body.Employees[0].disabilityPercentage=disabilityPercentage;\r\n\r\n       let pensionEmployeeId=\"\";\r\n       let pensionResponse=await getPensionEmployees(body.RequestInfo,body.Employees[0].tenantId,body.Employees[0].code);\r\n       let pensionEmployeesList=pensionResponse.Employees;\r\n       if(pensionEmployeesList.length>0){\r\n        pensionEmployeeId=pensionEmployeesList[0].uuid;\r\n        body.Employees[0].uuid=pensionEmployeeId;\r\n       }\r\n       \r\n       body = await addUUIDAndAuditDetailsDisabilityRegistration(body);\r\n\r\n       payloads.push({\r\n        topic: envVariables.KAFKA_TOPICS_SAVE_DISABILITY_DETAILS,\r\n        messages: JSON.stringify(body)\r\n      });\r\n      producer.send(payloads, function(err, data) {\r\n        let response = {\r\n          ResponseInfo: requestInfoToResponseInfo(body.RequestInfo, true),\r\n          Employees: body.Employees\r\n        };\r\n        res.json(response);\r\n      });\r\n       \r\n\r\n     \r\n    })\r\n  );\r\n  return api;\r\n};\r\n"]}