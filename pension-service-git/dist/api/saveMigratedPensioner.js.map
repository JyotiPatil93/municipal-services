{"version":3,"sources":["../../src/api/saveMigratedPensioner.js"],"names":["asyncHandler","require","config","db","api","post","res","next","body","payloads","text","sqlQuery","pensioner","query","err","dbRes","logger","error","stack","rows","RequestInfo","Pensioner","push","topic","envVariables","KAFKA_TOPICS_SAVE_MIGRATED_PENSIONER","messages","JSON","stringify","producer","send","data","response","ResponseInfo","json"],"mappings":";;;;;;;;;;;;;;AAAA;;AACA;;;;AACA;;AACA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;AAGA;;;;;;AAFA,IAAMA,eAAeC,QAAQ,uBAAR,CAArB;;kBAIe,gBAAoB;AAAA,MAAjBC,MAAiB,QAAjBA,MAAiB;AAAA,MAATC,EAAS,QAATA,EAAS;;AACjC,MAAIC,MAAM,sBAAV;AACAA,MAAIC,IAAJ,CACE,yBADF,EAEEL;AAAA,yFAAa,yBAAiBM,GAAjB,EAAsBC,IAAtB;AAAA,UAASC,IAAT,SAASA,IAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AACPC,sBADO,GACI,EADJ;AAKPC,kBALO,GAMX,4iFANW;AAQPC,sBARO,GAQID,IARJ;AAWPE,uBAXO,GAWG,EAXH;;AAYXT,iBAAGU,KAAH,CAASF,QAAT;AAAA,qGAAmB,iBAAOG,GAAP,EAAYC,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA,+BACbD,GADa;AAAA;AAAA;AAAA;;AAEfE,2CAAOC,KAAP,CAAaH,IAAII,KAAjB;AAFe;AAAA;;AAAA;AAAA,gCAKfH,MAAMI,IAAN,IAAc,CAAC,uBAAQJ,MAAMI,IAAd,CALA;AAAA;AAAA;AAAA;;AAAA;AAAA,iCAML,2CACJJ,MAAMI,IADF,EAEJ,IAFI,EAGJX,KAAKY,WAHD,CANK;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,wCAWX,EAXW;;AAAA;AAIfR,mCAJe;;;AAabJ,+BAAKa,SAAL,GAAeT,SAAf;AAba;AAAA,iCAcA,qDAAwCJ,IAAxC,CAdA;;AAAA;AAcbA,8BAda;;;AAiBbC,mCAASa,IAAT,CAAc;AACZC,mCAAOC,uBAAaC,oCADR;AAEZC,sCAAUC,KAAKC,SAAL,CAAepB,IAAf;AAFE,2BAAd;;AAKAqB,6CAASC,IAAT,CAAcrB,QAAd,EAAwB,UAASK,GAAT,EAAciB,IAAd,EAAoB;AAC1C,gCAAIC,WAAW;AACbC,4CAAc,sCAA0BzB,KAAKY,WAA/B,EAA4C,IAA5C,CADD;AAEbC,yCAAWb,KAAKa;AAFH,6BAAf;AAIAf,gCAAI4B,IAAJ,CAASF,QAAT;AACD,2BAND;;AAtBa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAnB;;AAAA;AAAA;AAAA;AAAA;;AAZW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAb;;AAAA;AAAA;AAAA;AAAA,MAFF;AAiDA,SAAO5B,GAAP;AACD,C","file":"saveMigratedPensioner.js","sourcesContent":["import { Router } from \"express\";\nimport producer from \"../kafka/producer\";\nimport { requestInfoToResponseInfo} from \"../utils\";\nimport envVariables from \"../envVariables\";\nimport mdmsData from \"../utils/mdmsData\";\nimport { addUUIDAndAuditDetailsMigratedPensioner } from \"../utils/create\";\nimport isEmpty from \"lodash/isEmpty\";\nimport set from \"lodash/set\";\nimport get from \"lodash/get\";\nimport { intConversion,mergeMigratedPensionerResults} from \"../utils/search\";\nconst asyncHandler = require(\"express-async-handler\");\n\nimport logger from \"../config/logger\";\n\nexport default ({ config, db }) => {\n  let api = Router();\n  api.post(\n    \"/_saveMigratedPensioner\",\n    asyncHandler(async ({ body }, res, next) => {\n      let payloads = [];\n    \n\n           \n      let text =\n      \"SELECT \\\"Sl No\\\" As sl_no, \\\"Name\\\" As name, \\\"Employee Code\\\" AS code, \\\"Date of Birth\\\" AS date_of_birth, \\\"Gender\\\" AS gender, \\\"Date of Death (if applicable)\\\" AS date_of_death, \\\"Mobile Number\\\" AS mobile_number, \\\"Email\\\" As email, \\\"Address\\\" As address, \\\"Bank Details\\\" AS bank_details, \\\"Bank Account Number\\\" AS bank_account_number, \\\"Bank IFSC\\\" AS bank_ifsc, \\\"Bank Code\\\" AS bank_code, \\\"Employee Status\\\" AS employee_status, \\\"Employee Type\\\" AS employee_type, \\\"Employee Group\\\" As employee_group, \\\"Designation\\\" As designation, \\\"Department\\\" AS department, \\\"Date of Joining\\\" AS date_of_joining, \\\"Service End Date\\\" AS service_end_date, \\\"Date of Retirement\\\" AS date_of_retirement, \\\"Date of Commencement\\\" As date_of_contingent, \\\"Claimant Name\\\" AS claimant_name, \\\"Claimant Date of Birth\\\" As claimant_dob, \\\"Claimant Relationship\\\" AS claimant_relationship, \\\"Claimant Mobile Number\\\" As claimant_mobile_number, \\\"Claimant Adddress\\\" AS claimant_address, \\\"Claimant Bank Details\\\" AS claimant_bank_details, \\\"Claimant Bank Account Number\\\" As claimant_bank_account_number, \\\"Claimant Bank IFSC\\\" As claimant_bank_ifsc, \\\"Claimant Bank Code\\\" As claimant_bank_code, \\\"NQS Year\\\" AS nqs_year, \\\"NQS Month\\\" AS nqs_month, \\\"NQS Days\\\" AS nqs_days, \\\"LPD\\\" AS lpd, \\\"Commuted Value\\\" AS commuted_value, \\\"DCRG\\\" AS dcrg, \\\"DCRG Dues Deduction\\\" AS dcrg_dues_deductions, \\\"Net Gratuity\\\" AS net_gratuity, \\\"Terminal Benefit\\\" AS terminal_benefit, \\\"Family Pension I Start Date\\\" AS family_pension_i_start_date, \\\"Family Pension I End Date\\\" AS family_pension_i_end_date, \\\"Family Pension II Start Date\\\" AS family_pension_ii_start_date, \\\"Ex Gratia\\\" AS ex_gratia, \\\"LTC\\\" AS ltc, \\\"Whether DA Medical Admissible\\\" AS is_da_medical_admissible, \\\"Pensioner Number\\\" AS pensioner_number, \\\"Start Year\\\" As start_year, \\\"Start Month\\\" AS start_month, \\\"End Year\\\" AS end_year, \\\"End Month\\\" AS end_month, \\\"Basic Pension\\\" AS basic_pension, \\\"DA\\\" AS da, \\\"Commuted Pension\\\" AS commuted_pension, \\\"Additional Pension\\\" AS additional_pension, \\\"IR\\\" AS ir, \\\"FMA\\\" AS fma, \\\"Misc\\\" AS misc, \\\"Wound or Extraordinary Pension (in case of disability)\\\" AS wound_extraordinary_pension, \\\"Attendant Allowance (in case of disability)\\\" AS attendant_allowance, \\\"Total Pension\\\" AS total_pension, \\\"Over Payment\\\" AS over_payment, \\\"Income Tax\\\" AS income_tax, \\\"CESS\\\" AS cess, \\\"Pension Deductions\\\" AS pension_deductions, \\\"Net Deductions\\\" AS net_deductions, \\\"Net Pension\\\" AS net_pension, \\\"Bill Code\\\" AS bill_code FROM eg_pension_pensioner_migration_draft WHERE \\\"Sl No\\\" IS NOT NULL\";                                    \n      \n      let sqlQuery = text;     \n      \n\n      let pensioner=[];\n      db.query(sqlQuery, async (err, dbRes) => {\n        if (err) {\n          logger.error(err.stack);\n        } else {        \n          pensioner =\n          dbRes.rows && !isEmpty(dbRes.rows)\n            ? await mergeMigratedPensionerResults(\n                dbRes.rows,\n                null,\n                body.RequestInfo\n              )\n            : [];  \n            \n            body.Pensioner=pensioner;            \n            body = await addUUIDAndAuditDetailsMigratedPensioner(body); \n            \n                     \n            payloads.push({\n              topic: envVariables.KAFKA_TOPICS_SAVE_MIGRATED_PENSIONER,\n              messages: JSON.stringify(body)\n            });\n              \n            producer.send(payloads, function(err, data) {\n              let response = {\n                ResponseInfo: requestInfoToResponseInfo(body.RequestInfo, true),\n                Pensioner: body.Pensioner\n              };\n              res.json(response);\n            });\n                                                  \n        }\n      });      \n      \n    })\n  );\n  return api;\n};\n"]}