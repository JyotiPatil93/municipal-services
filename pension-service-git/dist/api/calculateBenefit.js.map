{"version":3,"sources":["../../src/api/calculateBenefit.js"],"names":["asyncHandler","require","config","db","api","post","res","next","body","tenantId","ProcessInstances","businessService","businessId","RequestInfo","workflowSearchResponse","logger","debug","JSON","stringify","processInstance","reasonForRetirement","envVariables","EGOV_PENSION_RRP_BUSINESS_SERVICE","EGOV_PENSION_DOE_BUSINESS_SERVICE","EGOV_PENSION_DOP_BUSINESS_SERVICE","employeeOtherDetails","employee","dob","user","employeeType","dateOfRetirement","dateOfDeath","lastDesignation","totalNoPayLeavesDays","Number","totalNoPayLeavesMonths","totalNoPayLeavesYears","lpd","fma","dues","medicalRelief","miscellaneous","overPayment","incomeTax","cess","isCommutationOpted","isEmploymentActive","isConvictedSeriousCrimeOrGraveMisconduct","isAnyJudicialProceedingIsContinuing","isAnyMisconductInsolvencyInefficiency","isEmployeeDiesInTerroristAttack","isEmployeeDiesInAccidentalDeath","isDuesPresent","isDuesAmountDecided","isTakenMonthlyPensionAndGratuity","isTakenGratuityCommutationTerminalBenefit","isTakenCompensationPensionAndGratuity","diesInExtremistsDacoitsSmugglerAntisocialAttack","isCompassionatePensionGranted","noDuesForAvailGovtAccomodation","employeeGroup","employeeDisability","disabilityPercentage","woundExtraordinaryPension","attendantAllowanceGranted","serviceHistory","dependents","i","length","push","serviceFrom","serviceTo","name","address","mobileNumber","relationship","isDisabled","maritalStatus","isHollyDependent","noSpouseNoChildren","isGrandChildFromDeceasedSon","isEligibleForGratuity","isEligibleForPension","gratuityPercentage","benefitRespone","benefits","EmployeeBenefits","pensionCalculationDetails","String","benefitCode","toUpperCase","interimReliefLpdSystem","finalBenefitValue","interimReliefSystem","interimReliefApplicable","benefitApplicable","interimReliefExpression","benefitFormulaExpression","basicPensionSystem","basicPensionApplicable","basicPensionExpression","commutedPensionSystem","commutedPensionApplicable","commutedPensionExpression","pensionDeductionsSystem","pensionDeductionsApplicable","pensionDeductionsExpression","commutedValueSystem","commutationValueApplicable","commutationValueExpression","daLpdSystem","daSystem","daApplicable","daExpression","dcrgSystem","dcrgApplicable","dcrgExpression","additionalPensionSystem","additionalPensionApplicable","additionalPensionExpression","compassionatePensionSystem","compassionatePensionApplicable","compassionatePensionExpression","compensationPensionSystem","compensationPensionApplicable","compensationPensionExpression","terminalBenefitSystem","terminalBenefitApplicable","terminalBenefitExpression","duesDeductionsSystem","duesDeductionsApplicable","duesDeductionsExpression","netDeductionsSystem","netDeductionsApplicable","netDeductionsExpression","totalPensionSystem","totalPensionApplicable","totalPensionExpression","finalCalculatedPensionSystem","finalCalculatedPensionApplicable","finalCalculatedPensionExpression","finalCalculatedGratuitySystem","finalCalculatedGratuityApplicable","finalCalculatedGratuityExpression","familyPensionISystem","familyPensionIApplicable","familyPensionIExpression","familyPensionIISystem","familyPensionIIApplicable","familyPensionIIExpression","pensionerFamilyPensionSystem","pensionerFamilyPensionApplicable","pensionerFamilyPensionExpression","familyPensionIStartDateSystem","familyPensionIEndDateSystem","familyPensionIIStartDateSystem","exGratiaSystem","exGratiaApplicable","exGratiaExpression","provisionalPensionSystem","provisionalPensionApplicable","provisionalPensionExpression","invalidPensionSystem","invalidPensionApplicable","invalidPensionExpression","woundExtraordinaryPensionSystem","woundExtraordinaryPensionApplicable","woundExtraordinaryPensionExpression","attendantAllowanceSystem","attendantAllowanceApplicable","attendantAllowanceExpression","processInstances","pensionCalculationUpdateDetails","nqsYearVerified","nqsYearSystem","nqsMonthVerified","nqsMonthSystem","nqsDayVerified","nqsDaySystem","basicPensionVerified","pensionDeductionsVerified","additionalPensionVerified","commutedPensionVerified","commutedValueVerified","familyPensionIVerified","familyPensionIIVerified","dcrgVerified","netDeductionsVerified","totalPensionVerified","finalCalculatedPensionVerified","interimReliefVerified","daVerified","duesDeductionsVerified","compassionatePensionVerified","compensationPensionVerified","terminalBenefitVerified","finalCalculatedGratuityVerified","familyPensionIStartDateVerified","familyPensionIEndDateVerified","familyPensionIIStartDateVerified","exGratiaVerified","pensionerFamilyPensionVerified","provisionalPensionVerified","invalidPensionVerified","woundExtraordinaryPensionVerified","attendantAllowanceVerified","gqsYearVerified","gqsYearSystem","gqsMonthVerified","gqsMonthSystem","gqsDayVerified","gqsDaySystem","notificationTextVerified","notificationTextSystem","interimReliefLpdVerified","daLpdVerified","response","ResponseInfo","json"],"mappings":"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","file":"calculateBenefit.js","sourcesContent":["import { Router } from \"express\";\r\nimport producer from \"../kafka/producer\";\r\nimport { requestInfoToResponseInfo, searchPensionWorkflow,epochToYmd,calculateBenefit,convertDateToEpoch, convertDateToEpochForDeathDate} from \"../utils\";\r\nimport envVariables from \"../envVariables\";\r\nimport mdmsData from \"../utils/mdmsData\";\r\nimport { addUUIDAndAuditDetails } from \"../utils/create\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport set from \"lodash/set\";\r\nimport get from \"lodash/get\";\r\nimport orderBy from \"lodash/orderBy\";\r\nimport { intConversion} from \"../utils/search\";\r\nconst asyncHandler = require(\"express-async-handler\");\r\n\r\nimport logger from \"../config/logger\";\r\n\r\nexport default ({ config, db }) => {\r\n  let api = Router();\r\n  api.post(\r\n    \"/_calculateBenefit\",\r\n    asyncHandler(async ({ body }, res, next) => {              \r\n      //getting mdms data\r\n      \r\n           \r\n      let tenantId=body.ProcessInstances[0].tenantId;   \r\n      let businessService=body.ProcessInstances[0].businessService;\r\n      let businessId=body.ProcessInstances[0].businessId;\r\n      \r\n      let workflowSearchResponse = await searchPensionWorkflow(body.RequestInfo, tenantId,businessId);\r\n      \r\n      logger.debug(\"workflowSearchResponse\", JSON.stringify(workflowSearchResponse));\r\n              \r\n        let processInstance=workflowSearchResponse.ProcessInstances[0];\r\n        let reasonForRetirement=\"\";\r\n        switch(businessService){\r\n          case envVariables.EGOV_PENSION_RRP_BUSINESS_SERVICE:\r\n            reasonForRetirement=processInstance.employeeOtherDetails.reasonForRetirement;\r\n            break;\r\n          case envVariables.EGOV_PENSION_DOE_BUSINESS_SERVICE:\r\n            reasonForRetirement=\"DEATH_AS_EMPLOYEE\";\r\n            break;\r\n          case envVariables.EGOV_PENSION_DOP_BUSINESS_SERVICE:\r\n            reasonForRetirement=\"DEATH_AS_PENSIONER\";\r\n            break;\r\n\r\n        }\r\n\r\n        let employee ={\r\n          dob : epochToYmd(intConversion(processInstance.employee.user.dob)),\r\n          employeeType: processInstance.employee.employeeType,\r\n          dateOfRetirement: epochToYmd(intConversion(processInstance.employee.dateOfRetirement)),  \r\n          dateOfDeath : processInstance.employee.dateOfDeath && processInstance.employee.dateOfDeath!=0?epochToYmd(intConversion(processInstance.employee.dateOfDeath)):null,\r\n          reasonForRetirement : reasonForRetirement,//processInstance.employeeOtherDetails.reasonForRetirement, \r\n          lastDesignation : \"\",\r\n          totalNoPayLeavesDays :processInstance.employeeOtherDetails.totalNoPayLeavesDays!=null? Number(processInstance.employeeOtherDetails.totalNoPayLeavesDays):0 , \r\n          totalNoPayLeavesMonths :processInstance.employeeOtherDetails.totalNoPayLeavesMonths!=null? Number(processInstance.employeeOtherDetails.totalNoPayLeavesMonths):0 , \r\n          totalNoPayLeavesYears :processInstance.employeeOtherDetails.totalNoPayLeavesYears!=null? Number(processInstance.employeeOtherDetails.totalNoPayLeavesYears):0 , \r\n          lpd : processInstance.employeeOtherDetails.lpd!=null? Number(processInstance.employeeOtherDetails.lpd):0, \r\n          fma : processInstance.employeeOtherDetails.fma!=null? Number(processInstance.employeeOtherDetails.fma):0, \r\n          dues : processInstance.employeeOtherDetails.dues!=null? Number(processInstance.employeeOtherDetails.dues):0, \r\n          medicalRelief : processInstance.employeeOtherDetails.medicalRelief!=null? Number(processInstance.employeeOtherDetails.medicalRelief):0,          \r\n          miscellaneous : processInstance.employeeOtherDetails.miscellaneous!=null? Number(processInstance.employeeOtherDetails.miscellaneous):0,\r\n          overPayment :processInstance.employeeOtherDetails.overPayment!=null? Number(processInstance.employeeOtherDetails.overPayment):0,\r\n          incomeTax :processInstance.employeeOtherDetails.incomeTax!=null? Number(processInstance.employeeOtherDetails.incomeTax):0,\r\n          cess :processInstance.employeeOtherDetails.cess!=null? Number(processInstance.employeeOtherDetails.cess):0,\r\n          isCommutationOpted : processInstance.employeeOtherDetails.isCommutationOpted, \r\n          isEmploymentActive : processInstance.employeeOtherDetails.isEmploymentActive,\r\n          isConvictedSeriousCrimeOrGraveMisconduct : processInstance.employeeOtherDetails.isConvictedSeriousCrimeOrGraveMisconduct,\r\n          isAnyJudicialProceedingIsContinuing : processInstance.employeeOtherDetails.isAnyJudicialProceedingIsContinuing,\r\n          isAnyMisconductInsolvencyInefficiency : processInstance.employeeOtherDetails.isAnyMisconductInsolvencyInefficiency,\r\n          isEmployeeDiesInTerroristAttack : processInstance.employeeOtherDetails.isEmployeeDiesInTerroristAttack,\r\n          isEmployeeDiesInAccidentalDeath : processInstance.employeeOtherDetails.isEmployeeDiesInAccidentalDeath,\r\n          isDuesPresent : processInstance.employeeOtherDetails.isDuesPresent,\r\n          isDuesAmountDecided : processInstance.employeeOtherDetails.isDuesAmountDecided,\r\n          isTakenMonthlyPensionAndGratuity : processInstance.employeeOtherDetails.isTakenMonthlyPensionAndGratuity,\r\n          isTakenGratuityCommutationTerminalBenefit : processInstance.employeeOtherDetails.isTakenGratuityCommutationTerminalBenefit,\r\n          isTakenCompensationPensionAndGratuity : processInstance.employeeOtherDetails.isTakenCompensationPensionAndGratuity,\r\n          diesInExtremistsDacoitsSmugglerAntisocialAttack : processInstance.employeeOtherDetails.diesInExtremistsDacoitsSmugglerAntisocialAttack,\r\n          isCompassionatePensionGranted : processInstance.employeeOtherDetails.isCompassionatePensionGranted,\r\n          noDuesForAvailGovtAccomodation : processInstance.employeeOtherDetails.noDuesForAvailGovtAccomodation,\r\n          employeeGroup : processInstance.employeeOtherDetails.employeeGroup,\r\n          employeeDisability:{\r\n            disabilityPercentage:processInstance.employeeDisability.disabilityPercentage!=null?Number(processInstance.employeeDisability.disabilityPercentage):0,\r\n            woundExtraordinaryPension:processInstance.employeeDisability.woundExtraordinaryPension!=null?Number(processInstance.employeeDisability.woundExtraordinaryPension):0,\r\n            attendantAllowanceGranted:processInstance.employeeDisability.attendantAllowanceGranted!=null?processInstance.employeeDisability.attendantAllowanceGranted:false\r\n          },\r\n          serviceHistory: [],\r\n          dependents: []\r\n        };\r\n\r\n        let serviceHistory=[];\r\n        for (var i = 0; i < processInstance.employee.serviceHistory.length; i++) {                    \r\n          serviceHistory.push({\r\n            serviceFrom:  epochToYmd(intConversion(processInstance.employee.serviceHistory[i].serviceFrom)),\r\n            serviceTo: processInstance.employee.serviceHistory[i].serviceTo? epochToYmd(intConversion(processInstance.employee.serviceHistory[i].serviceTo)):null\r\n          });\r\n        } \r\n        employee.serviceHistory=serviceHistory;\r\n\r\n        let dependents=[];\r\n        if(processInstance.dependents){\r\n          for (var i = 0; i < processInstance.dependents.length; i++) {                    \r\n            dependents.push({\r\n              name:  processInstance.dependents[i].name,\r\n              dob:  epochToYmd(intConversion(processInstance.dependents[i].dob)),\r\n              address:  processInstance.dependents[i].address,\r\n              mobileNumber:  processInstance.dependents[i].mobileNumber,\r\n              relationship:  processInstance.dependents[i].relationship,\r\n              isDisabled:  processInstance.dependents[i].isDisabled,\r\n              maritalStatus:  processInstance.dependents[i].maritalStatus,\r\n              isHollyDependent:  processInstance.dependents[i].isHollyDependent,\r\n              noSpouseNoChildren:  processInstance.dependents[i].noSpouseNoChildren,\r\n              isGrandChildFromDeceasedSon:  processInstance.dependents[i].isGrandChildFromDeceasedSon,\r\n              isEligibleForGratuity:  processInstance.dependents[i].isEligibleForGratuity,\r\n              isEligibleForPension:  processInstance.dependents[i].isEligibleForPension,\r\n              gratuityPercentage:  processInstance.dependents[i].gratuityPercentage\r\n            });\r\n          } \r\n        }        \r\n        employee.dependents=dependents;\r\n\r\n        /*\r\n\r\n        let assignments=[];\r\n        for (var i = 0; i < processInstance.employee.assignments.length; i++) {                    \r\n            assignments.push({\r\n              fromDate:  epochToYmd(intConversion(processInstance.employee.assignments[i].fromDate)),\r\n              toDate: processInstance.employee.assignments[i].toDate? epochToYmd(intConversion(processInstance.employee.assignments[i].toDate)):null\r\n            });\r\n          } \r\n        assignments=orderBy(processInstance.employee.assignments,['fromDate'],['desc']);\r\n        let lastAssignment=assignments[0];\r\n        employee.lastDesignation=lastAssignment.designation;\r\n        */\r\n        employee.lastDesignation=\"\";\r\n              \r\n\r\n        body.ProcessInstances[0].employee=employee;\r\n        body.ProcessInstances[0].employee.businessService=businessService;\r\n              \r\n        \r\n\r\n        let benefitRespone=await calculateBenefit(body);\r\n        logger.debug(\"benefitRespone\",JSON.stringify(benefitRespone));\r\n\r\n        let benefits=benefitRespone.EmployeeBenefits[0].benefits;\r\n        let pensionCalculationDetails=benefitRespone.EmployeeBenefits[0].pensionCalculationDetails;\r\n        //let notifications=benefitRespone.EmployeeBenefits[0].notifications;\r\n\r\n        for (var i = 0; i < benefits.length; i++) {             \r\n            switch(String(benefits[i].benefitCode).toUpperCase()){  \r\n               \r\n               case \"IR\":\r\n                  pensionCalculationDetails.interimReliefLpdSystem=benefits[i].finalBenefitValue;\r\n                  //pensionCalculationDetails.interimReliefApplicable=benefits[i].benefitApplicable;\r\n                  //pensionCalculationDetails.interimReliefExpression=benefits[i].benefitFormulaExpression;\r\n                  break;     \r\n                \r\n                case \"PENSION_IR\":\r\n                  pensionCalculationDetails.interimReliefSystem=benefits[i].finalBenefitValue;\r\n                  pensionCalculationDetails.interimReliefApplicable=benefits[i].benefitApplicable;\r\n                  pensionCalculationDetails.interimReliefExpression=benefits[i].benefitFormulaExpression;\r\n                  break;                        \r\n                case \"BASIC_PENSION\":\r\n                  pensionCalculationDetails.basicPensionSystem=benefits[i].finalBenefitValue;  \r\n                  pensionCalculationDetails.basicPensionApplicable=benefits[i].benefitApplicable;\r\n                  pensionCalculationDetails.basicPensionExpression=benefits[i].benefitFormulaExpression;                \r\n                  break;\r\n                case \"COMMUTED_PENSION\":\r\n                  pensionCalculationDetails.commutedPensionSystem=benefits[i].finalBenefitValue;   \r\n                  pensionCalculationDetails.commutedPensionApplicable=benefits[i].benefitApplicable;\r\n                  pensionCalculationDetails.commutedPensionExpression=benefits[i].benefitFormulaExpression;                                  \r\n                  break;\r\n                case \"PENSION_DEDUCTION\":\r\n                  pensionCalculationDetails.pensionDeductionsSystem=benefits[i].finalBenefitValue;\r\n                  pensionCalculationDetails.pensionDeductionsApplicable=benefits[i].benefitApplicable;\r\n                  pensionCalculationDetails.pensionDeductionsExpression=benefits[i].benefitFormulaExpression;                  \r\n                  break;                  \r\n                case \"COMMUTATION_VALUE\":\r\n                  pensionCalculationDetails.commutedValueSystem=benefits[i].finalBenefitValue;\r\n                  pensionCalculationDetails.commutationValueApplicable=benefits[i].benefitApplicable;\r\n                  pensionCalculationDetails.commutationValueExpression=benefits[i].benefitFormulaExpression;\r\n                  break; \r\n                   \r\n                case \"DA\":\r\n                  pensionCalculationDetails.daLpdSystem=benefits[i].finalBenefitValue;\r\n                  break;\r\n                \r\n                case \"PENSION_DA\":\r\n                  pensionCalculationDetails.daSystem=benefits[i].finalBenefitValue;\r\n                  pensionCalculationDetails.daApplicable=benefits[i].benefitApplicable;\r\n                  pensionCalculationDetails.daExpression=benefits[i].benefitFormulaExpression; \r\n                  break;       \r\n                case \"DCRG\":\r\n                  pensionCalculationDetails.dcrgSystem=benefits[i].finalBenefitValue;\r\n                  pensionCalculationDetails.dcrgApplicable=benefits[i].benefitApplicable;\r\n                  pensionCalculationDetails.dcrgExpression=benefits[i].benefitFormulaExpression;\r\n                  break;      \r\n                case \"ADDITIONAL_PENSION\":\r\n                  pensionCalculationDetails.additionalPensionSystem=benefits[i].finalBenefitValue;   \r\n                  pensionCalculationDetails.additionalPensionApplicable=benefits[i].benefitApplicable;\r\n                  pensionCalculationDetails.additionalPensionExpression=benefits[i].benefitFormulaExpression;               \r\n                  break;  \r\n                case \"COMPASSIONATE_PENSION\":\r\n                  pensionCalculationDetails.compassionatePensionSystem=benefits[i].finalBenefitValue; \r\n                  pensionCalculationDetails.compassionatePensionApplicable=benefits[i].benefitApplicable;\r\n                  pensionCalculationDetails.compassionatePensionExpression=benefits[i].benefitFormulaExpression;                 \r\n                  break;  \r\n                case \"COMPENSATION_PENSION\":\r\n                  pensionCalculationDetails.compensationPensionSystem=benefits[i].finalBenefitValue;    \r\n                  pensionCalculationDetails.compensationPensionApplicable=benefits[i].benefitApplicable;\r\n                  pensionCalculationDetails.compensationPensionExpression=benefits[i].benefitFormulaExpression;                               \r\n                  break;\r\n                case \"TERMINAL_BENEFIT\":\r\n                  pensionCalculationDetails.terminalBenefitSystem=benefits[i].finalBenefitValue;\r\n                  pensionCalculationDetails.terminalBenefitApplicable=benefits[i].benefitApplicable;\r\n                  pensionCalculationDetails.terminalBenefitExpression=benefits[i].benefitFormulaExpression;                  \r\n                  break;                   \r\n                case \"DCRG_DUES_DEDUCTION\":\r\n                  pensionCalculationDetails.duesDeductionsSystem=benefits[i].finalBenefitValue;     \r\n                  pensionCalculationDetails.duesDeductionsApplicable=benefits[i].benefitApplicable;\r\n                  pensionCalculationDetails.duesDeductionsExpression=benefits[i].benefitFormulaExpression;               \r\n                  break;          \r\n                case \"NET_DEDUCTION\":\r\n                  pensionCalculationDetails.netDeductionsSystem=benefits[i].finalBenefitValue;\r\n                  pensionCalculationDetails.netDeductionsApplicable=benefits[i].benefitApplicable;\r\n                  pensionCalculationDetails.netDeductionsExpression=benefits[i].benefitFormulaExpression;                    \r\n                  break;\r\n                case \"TOTAL_PENSION\":\r\n                  pensionCalculationDetails.totalPensionSystem=benefits[i].finalBenefitValue;   \r\n                  pensionCalculationDetails.totalPensionApplicable=benefits[i].benefitApplicable;\r\n                  pensionCalculationDetails.totalPensionExpression=benefits[i].benefitFormulaExpression;               \r\n                  break; \r\n                case \"FINAL_CALCULATED_PENSION\":\r\n                  pensionCalculationDetails.finalCalculatedPensionSystem=benefits[i].finalBenefitValue;   \r\n                  pensionCalculationDetails.finalCalculatedPensionApplicable=benefits[i].benefitApplicable;\r\n                  pensionCalculationDetails.finalCalculatedPensionExpression=benefits[i].benefitFormulaExpression;                    \r\n                  break; \r\n                case \"FINAL_CALCULATED_GRATUITY\":\r\n                  pensionCalculationDetails.finalCalculatedGratuitySystem=benefits[i].finalBenefitValue;  \r\n                  pensionCalculationDetails.finalCalculatedGratuityApplicable=benefits[i].benefitApplicable;\r\n                  pensionCalculationDetails.finalCalculatedGratuityExpression=benefits[i].benefitFormulaExpression;                       \r\n                  break; \r\n                case \"FAMILY_PENSION_1\":\r\n                  pensionCalculationDetails.familyPensionISystem=benefits[i].finalBenefitValue; \r\n                  pensionCalculationDetails.familyPensionIApplicable=benefits[i].benefitApplicable;\r\n                  pensionCalculationDetails.familyPensionIExpression=benefits[i].benefitFormulaExpression;                  \r\n                  break;\r\n                case \"FAMILY_PENSION_2\":\r\n                  pensionCalculationDetails.familyPensionIISystem=benefits[i].finalBenefitValue;    \r\n                  pensionCalculationDetails.familyPensionIIApplicable=benefits[i].benefitApplicable;\r\n                  pensionCalculationDetails.familyPensionIIExpression=benefits[i].benefitFormulaExpression;               \r\n                  break;\r\n                case \"PENSIONER_FAMILY_PENSION\":\r\n                  pensionCalculationDetails.pensionerFamilyPensionSystem=benefits[i].finalBenefitValue;     \r\n                  pensionCalculationDetails.pensionerFamilyPensionApplicable=benefits[i].benefitApplicable;\r\n                  pensionCalculationDetails.pensionerFamilyPensionExpression=benefits[i].benefitFormulaExpression;             \r\n                  break;                \r\n                case \"FAMILY_PENSION_1_START_DATE\":\r\n                  pensionCalculationDetails.familyPensionIStartDateSystem=benefits[i].finalBenefitValue!=null?intConversion(convertDateToEpochForDeathDate(benefits[i].finalBenefitValue,\"dob\")) :null;                                    \r\n                  break;\r\n                case \"FAMILY_PENSION_1_END_DATE\":\r\n                  pensionCalculationDetails.familyPensionIEndDateSystem=benefits[i].finalBenefitValue!=null?intConversion(convertDateToEpochForDeathDate(benefits[i].finalBenefitValue,\"dob\")):null;                                   \r\n                  break;\r\n                case \"FAMILY_PENSION_2_START_DATE\":\r\n                  pensionCalculationDetails.familyPensionIIStartDateSystem=benefits[i].finalBenefitValue!=null?intConversion(convertDateToEpochForDeathDate(benefits[i].finalBenefitValue,\"dob\")):null;                                   \r\n                  break;                                             \r\n                case \"EX_GRATIA\":\r\n                  pensionCalculationDetails.exGratiaSystem=benefits[i].finalBenefitValue;    \r\n                  pensionCalculationDetails.exGratiaApplicable=benefits[i].benefitApplicable;\r\n                  pensionCalculationDetails.exGratiaExpression=benefits[i].benefitFormulaExpression;               \r\n                  break;\r\n                case \"PROVISIONAL_PENSION\":\r\n                  pensionCalculationDetails.provisionalPensionSystem=benefits[i].finalBenefitValue;\r\n                  pensionCalculationDetails.provisionalPensionApplicable=benefits[i].benefitApplicable;\r\n                  pensionCalculationDetails.provisionalPensionExpression=benefits[i].benefitFormulaExpression;                  \r\n                  break;\r\n                case \"INVALID_PENSION\":\r\n                  pensionCalculationDetails.invalidPensionSystem=benefits[i].finalBenefitValue;\r\n                  pensionCalculationDetails.invalidPensionApplicable=benefits[i].benefitApplicable;\r\n                  pensionCalculationDetails.invalidPensionExpression=benefits[i].benefitFormulaExpression;                  \r\n                  break;\r\n                case \"WOUND_EXTRAORDINARY_PENSION\":\r\n                  pensionCalculationDetails.woundExtraordinaryPensionSystem=benefits[i].finalBenefitValue;\r\n                  pensionCalculationDetails.woundExtraordinaryPensionApplicable=benefits[i].benefitApplicable;\r\n                  pensionCalculationDetails.woundExtraordinaryPensionExpression=benefits[i].benefitFormulaExpression;                  \r\n                  break;\r\n                case \"ATTENDANT_ALLOWANCE\":\r\n                  pensionCalculationDetails.attendantAllowanceSystem=benefits[i].finalBenefitValue;\r\n                  pensionCalculationDetails.attendantAllowanceApplicable=benefits[i].benefitApplicable;\r\n                  pensionCalculationDetails.attendantAllowanceExpression=benefits[i].benefitFormulaExpression;                  \r\n                  break;\r\n\r\n            }\r\n            \r\n        }\r\n\r\n        \r\n        /*\r\n        let notificationText=\"\";\r\n        for (var i = 0; i < notifications.length; i++) {    \r\n          notificationText=`${notificationText}${notifications[i].notificationText} `\r\n        }\r\n        */\r\n\r\n        let processInstances=[];\r\n        processInstances.push({\r\n            pensionCalculationDetails: pensionCalculationDetails,\r\n            pensionCalculationUpdateDetails: {\r\n                nqsYearVerified: pensionCalculationDetails.nqsYearSystem,\r\n                nqsMonthVerified: pensionCalculationDetails.nqsMonthSystem,\r\n                nqsDayVerified: pensionCalculationDetails.nqsDaySystem,\r\n                basicPensionVerified: pensionCalculationDetails.basicPensionSystem,\r\n                pensionDeductionsVerified: pensionCalculationDetails.pensionDeductionsSystem,\r\n                additionalPensionVerified: pensionCalculationDetails.additionalPensionSystem,\r\n                commutedPensionVerified: pensionCalculationDetails.commutedPensionSystem,\r\n                commutedValueVerified: pensionCalculationDetails.commutedValueSystem,\r\n                familyPensionIVerified: pensionCalculationDetails.familyPensionISystem,\r\n                familyPensionIIVerified: pensionCalculationDetails.familyPensionIISystem,\r\n                dcrgVerified: pensionCalculationDetails.dcrgSystem,\r\n                netDeductionsVerified: pensionCalculationDetails.netDeductionsSystem,\r\n                totalPensionVerified: pensionCalculationDetails.totalPensionSystem,\r\n                finalCalculatedPensionVerified: pensionCalculationDetails.finalCalculatedPensionSystem,\r\n                interimReliefVerified: pensionCalculationDetails.interimReliefSystem,\r\n                daVerified: pensionCalculationDetails.daSystem,\r\n                duesDeductionsVerified: pensionCalculationDetails.duesDeductionsSystem,\r\n                compassionatePensionVerified: pensionCalculationDetails.compassionatePensionSystem,\r\n                compensationPensionVerified: pensionCalculationDetails.compensationPensionSystem,\r\n                terminalBenefitVerified: pensionCalculationDetails.terminalBenefitSystem,\r\n                finalCalculatedGratuityVerified: pensionCalculationDetails.finalCalculatedGratuitySystem,                \r\n                familyPensionIStartDateVerified: pensionCalculationDetails.familyPensionIStartDateSystem,\r\n                familyPensionIEndDateVerified: pensionCalculationDetails.familyPensionIEndDateSystem,\r\n                familyPensionIIStartDateVerified: pensionCalculationDetails.familyPensionIIStartDateSystem,\r\n                exGratiaVerified: pensionCalculationDetails.exGratiaSystem,\r\n                pensionerFamilyPensionVerified: pensionCalculationDetails.pensionerFamilyPensionSystem,                \r\n                provisionalPensionVerified: pensionCalculationDetails.provisionalPensionSystem,\r\n                invalidPensionVerified: pensionCalculationDetails.invalidPensionSystem,\r\n                woundExtraordinaryPensionVerified: pensionCalculationDetails.woundExtraordinaryPensionSystem,\r\n                attendantAllowanceVerified: pensionCalculationDetails.attendantAllowanceSystem,\r\n                gqsYearVerified: pensionCalculationDetails.gqsYearSystem,\r\n                gqsMonthVerified: pensionCalculationDetails.gqsMonthSystem,\r\n                gqsDayVerified: pensionCalculationDetails.gqsDaySystem,\r\n                notificationTextVerified: pensionCalculationDetails.notificationTextSystem,\r\n                interimReliefLpdVerified: pensionCalculationDetails.interimReliefLpdSystem,\r\n                daLpdVerified: pensionCalculationDetails.daLpdSystem\r\n            }//,\r\n            //notifications: {\r\n            //  notificationText: notificationText\r\n            //}\r\n        });\r\n\r\n        let response = {\r\n          ResponseInfo: requestInfoToResponseInfo(body.RequestInfo, true),\r\n          ProcessInstances: processInstances          \r\n        };\r\n        \r\n        \r\n        res.json(response);     \r\n        \r\n    })\r\n  );\r\n  return api;\r\n};\r\n"]}