{"version":3,"sources":["../../src/api/createMonthlyPensionRegister.js"],"names":["asyncHandler","require","config","db","api","post","res","next","body","payloads","processInstance","tenantId","ProcessInstances","effectiveYear","effectiveMonth","pensionRegister","processInstances","push","Number","effetiveDate","Date","RequestInfo","pensionRevisionResponse","pensionRevisions","pensionRevision","logger","debug","i","length","effectiveStartDate","effectiveStartYear","effectiveStartMonth","effectiveEndDate","effectiveEndYear","effectiveEndMonth","pensionRevisionId","topic","envVariables","KAFKA_TOPICS_CREATE_MONTHLY_PENSION_REGISTER","messages","JSON","stringify","producer","send","err","data","response","ResponseInfo","json"],"mappings":"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","file":"createMonthlyPensionRegister.js","sourcesContent":["import { Router } from \"express\";\r\nimport producer from \"../kafka/producer\";\r\nimport { requestInfoToResponseInfo,getPensionRevisions} from \"../utils\";\r\nimport { mergePensionRevisionResults } from \"../utils/search\";\r\nimport envVariables from \"../envVariables\";\r\nimport mdmsData from \"../utils/mdmsData\";\r\nimport { addUUIDAndAuditDetailsCreateMonthlyPensionRegister } from \"../utils/create\";\r\nimport set from \"lodash/set\";\r\nimport get from \"lodash/get\";\r\nimport filter from \"lodash/filter\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nconst asyncHandler = require(\"express-async-handler\");\r\n\r\nimport logger from \"../config/logger\";\r\n\r\nexport default ({ config, db }) => {\r\n  let api = Router();\r\n  api.post(\r\n    \"/_createMonthlyPensionRegister\",\r\n    asyncHandler(async ({ body }, res, next) => {\r\n      let payloads = [];\r\n      \r\n      \r\n      let processInstance={  \r\n        tenantId: body.ProcessInstances[0].tenantId,       \r\n        effectiveYear:body.ProcessInstances[0].effectiveYear,\r\n        effectiveMonth:body.ProcessInstances[0].effectiveMonth,\r\n        pensionRegister: []     \r\n      };  \r\n      \r\n\r\n      let processInstances=[];\r\n      processInstances.push(processInstance);\r\n      body.ProcessInstances=processInstances;\r\n            \r\n      let tenantId=body.ProcessInstances[0].tenantId;\r\n      let effectiveYear=Number(body.ProcessInstances[0].effectiveYear);\r\n      let effectiveMonth=Number(body.ProcessInstances[0].effectiveMonth);\r\n      let effetiveDate=new Date(effectiveYear,effectiveMonth,1);\r\n\r\n      let pensionRevisionResponse = await getPensionRevisions(body.RequestInfo,body.ProcessInstances[0].tenantId); \r\n      let pensionRevisions=pensionRevisionResponse.ProcessInstances[0].pensionRevision;\r\n      logger.debug(\"pensionRevisions\",pensionRevisions);\r\n      let pensionRegister=[];\r\n      \r\n      for (var i = 0; i < pensionRevisions.length; i++) { \r\n        let pensionRevision=pensionRevisions[i];\r\n        let effectiveStartDate=new Date(pensionRevision.effectiveStartYear,pensionRevision.effectiveStartMonth,1);\r\n        let effectiveEndDate=pensionRevision.effectiveEndYear!=null? new Date(pensionRevision.effectiveEndYear,pensionRevision.effectiveEndMonth,1):effetiveDate;\r\n\r\n\r\n        if(effetiveDate>=effectiveStartDate && effetiveDate<=effectiveEndDate){\r\n          pensionRegister.push({\r\n            tenantId: tenantId,\r\n            //pensionerId: pensionRevision.pensionerId,\r\n            pensionRevisionId: pensionRevision.pensionRevisionId,                  \r\n            effectiveYear: effectiveYear,\r\n            effectiveMonth: effectiveMonth\r\n          });\r\n        }\r\n      }\r\n      \r\n \r\n      body.ProcessInstances[0].pensionRegister=pensionRegister;\r\n      \r\n      body = await addUUIDAndAuditDetailsCreateMonthlyPensionRegister(body);        \r\n      \r\n      \r\n      payloads.push({\r\n        topic: envVariables.KAFKA_TOPICS_CREATE_MONTHLY_PENSION_REGISTER, \r\n        messages: JSON.stringify(body)\r\n      });\r\n      producer.send(payloads, function(err, data) {\r\n        let response = {\r\n          ResponseInfo: requestInfoToResponseInfo(body.RequestInfo, true),\r\n          ProcessInstances: body.ProcessInstances\r\n        };\r\n        res.json(response);\r\n      });\r\n    })\r\n  );\r\n  return api;\r\n};\r\n"]}