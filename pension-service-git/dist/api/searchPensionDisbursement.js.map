{"version":3,"sources":["../../src/api/searchPensionDisbursement.js"],"names":["asyncHandler","require","config","db","api","post","request","res","next","queryObj","JSON","parse","stringify","query","body","RequestInfo","tenantId","mdms","year","searchParams","x","name","input","month","text","toString","sqlQuery","pensionerDetails","err","dbRes","logger","error","stack","rows","reportData","i","length","push","pensionerNumber","bankDetails","bankIfsc","bankCode","bankAccountNumber","finalCalculatedPension","response","ResponseInfo","reportResponses","viewPath","selectiveDownload","reportHeader","localisationRequired","label","type","defaultValue","isMandatory","isLocalisationRequired","localisationPrefix","showColumn","total","rowTotal","columnTotal","initialValue","minValue","maxValue","ttl","json"],"mappings":"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","file":"searchPensionDisbursement.js","sourcesContent":["import { Router } from \"express\";\nimport { requestInfoToResponseInfo,searchPensioner } from \"../utils\";\nimport { mergeMonthlyPensionDrawn} from \"../utils/search\";\nimport isEmpty from \"lodash/isEmpty\";\nimport get from \"lodash/get\";\nimport some from \"lodash/some\";\nimport { actions } from \"../utils/search\";\nimport envVariables from \"../envVariables\";\nimport mdmsData from \"../utils/mdmsData\";\nimport filter from \"lodash/filter\";\nimport{encrypt, decrypt} from \"../utils/encryption\";\nconst asyncHandler = require(\"express-async-handler\");\n\nimport logger from \"../config/logger\";\n\nexport default ({ config, db }) => {\n  let api = Router();\n  api.post(\n    \"/_searchPensionDisbursement\",\n    asyncHandler(async (request, res, next) => {  \n      const queryObj = JSON.parse(JSON.stringify(request.query));\n      \n      /* let num = \"1234567890\";\n      let en = encrypt(num);\n\n      let en1=\"991862b209bbedda3975008854bac92a\";\n\n      let de = decrypt(en);\n      let de1 = decrypt(en1); */\n      let mdms = await mdmsData(request.body.RequestInfo, queryObj.tenantId);\n\n      let year = filter(request.body.searchParams, function(x){return x.name==\"Year\";})[0].input;\n      let month = filter(request.body.searchParams, function(x){return x.name==\"Month\";})[0].input;\n      \n      let text=\"select pp.pensioner_number as pensioner_number , pe.name as name, final_calculated_pension,(case when pd.name is null or pd.name = '' then ppad.bank_address else pd.bank_details end) as bank_details,(case when pd.name is null or pd.name = '' then ppad.bank_code else pd.bank_code end) as bank_code,(case when pd.name is null or pd.name = '' then ppad.bank_ifsc else pd.bank_ifsc end) as bank_ifsc,(case when pd.name is null or pd.name = '' then ppad.account_number else pd.bank_account_number end) as bank_account_number from eg_pension_revision pr join eg_pension_pensioner pp on pr.pensioner_id=pp.uuid join eg_pension_employee pe on pp.pension_employee_id=pe.uuid  join eg_pension_pensioner_application_details ppad on ppad.pensioner_id = pp.uuid left join eg_pension_dependent pd on pd.pension_employee_id = pp.pension_employee_id where pp.active=true AND pr.active=true and 1=1 and cast(concat('\"+year.toString()+\"', lpad('\"+month.toString()+\"',2,'0')) as integer)>=cast(concat(cast(pr.effective_start_year as varchar), lpad(cast(pr.effective_start_month as varchar),2,'0')) as integer) and (pr.effective_end_year is not null and pr.effective_end_month is not null and cast(concat('\"+year.toString()+\"', lpad('\"+month.toString()+\"',2,'0')) as integer)<cast(concat(cast(pr.effective_end_year as varchar), lpad(cast(pr.effective_end_month as varchar),2,'0')) as integer) or (pr.effective_end_year is null and pr.effective_end_month is null))\";\n      /* if (!isEmpty(queryObj)) {\n        text = `${text} WHERE`;\n      }\n      if (queryObj.tenantId) {\n        text = `${text} tenantid = '${queryObj.tenantId}'`;\n      } \n      if (pensioner.pensionerId) {\n        text=`${text} AND pensioner_id = '${pensioner.pensionerId}'`;\n      }\n */\n      let sqlQuery = text;\n      \n      let pensionerDetails={};\n      db.query(sqlQuery, async (err, dbRes) => {\n        if (err) {\n          logger.error(err.stack);\n        } else {\n\n          pensionerDetails =\n          dbRes.rows && !isEmpty(dbRes.rows)\n            ? await mergeMonthlyPensionDrawn(\n                dbRes.rows,\n                request.query,\n                request.body.RequestInfo,\n                mdms\n              )\n            : {};  \n            \n            let reportData=[];\n            for (var i = 0; i < pensionerDetails.length; i++) {\n              reportData.push(\n                [pensionerDetails[i].pensionerNumber,pensionerDetails[i].name,pensionerDetails[i].bankDetails,pensionerDetails[i].bankIfsc,pensionerDetails[i].bankCode,pensionerDetails[i].bankAccountNumber,pensionerDetails[i].finalCalculatedPension]\n\n              );\n            }\n\n            let response = {\n              ResponseInfo: requestInfoToResponseInfo(request.body.RequestInfo, true),\n              reportResponses: [\n                {\n                    viewPath: null,\n                    selectiveDownload: false,\n                    reportHeader: [\n                        {\n                            localisationRequired: false,\n                            name: \"pensioner_number\",\n                            label: \"Pensioner Number\",\n                            type: \"string\",\n                            defaultValue: null,\n                            isMandatory: false,\n                            isLocalisationRequired: false,\n                            localisationPrefix: \"\",\n                            showColumn: true,\n                            total: false,\n                            rowTotal: null,\n                            columnTotal: null,\n                            initialValue: null,\n                            minValue: null,\n                            maxValue: null\n                        },\n                        {\n                            localisationRequired: false,\n                            name: \"name\",\n                            label: \"Pensioner Name\",\n                            type: \"string\",\n                            defaultValue: null,\n                            isMandatory: false,\n                            isLocalisationRequired: false,\n                            localisationPrefix: \"\",\n                            showColumn: true,\n                            total: false,\n                            rowTotal: null,\n                            columnTotal: null,\n                            initialValue: null,\n                            minValue: null,\n                            maxValue: null\n                        },\n                        {\n                            localisationRequired: false,\n                            name: \"bank_details\",\n                            label: \"Bank Name\",\n                            type: \"string\",\n                            defaultValue: null,\n                            isMandatory: false,\n                            isLocalisationRequired: false,\n                            localisationPrefix: \"\",\n                            showColumn: true,\n                            total: false,\n                            rowTotal: null,\n                            columnTotal: null,\n                            initialValue: null,\n                            minValue: null,\n                            maxValue: null\n                        },\n                        {\n                            localisationRequired: false,\n                            name: \"bank_ifsc\",\n                            label: \"Bank IFSC\",\n                            type: \"string\",\n                            defaultValue: null,\n                            isMandatory: false,\n                            isLocalisationRequired: false,\n                            localisationPrefix: \"\",\n                            showColumn: true,\n                            total: false,\n                            rowTotal: null,\n                            columnTotal: null,\n                            initialValue: null,\n                            minValue: null,\n                            maxValue: null\n                        },\n                        {\n                            localisationRequired: false,\n                            name: \"bank_code\",\n                            label: \"Bank Code\",\n                            type: \"string\",\n                            defaultValue: null,\n                            isMandatory: false,\n                            isLocalisationRequired: false,\n                            localisationPrefix: \"\",\n                            showColumn: true,\n                            total: false,\n                            rowTotal: null,\n                            columnTotal: null,\n                            initialValue: null,\n                            minValue: null,\n                            maxValue: null\n                        },\n                        {\n                            localisationRequired: false,\n                            name: \"bank_account_number\",\n                            label: \"Bank Account Number\",\n                            type: \"string\",\n                            defaultValue: null,\n                            isMandatory: false,\n                            isLocalisationRequired: false,\n                            localisationPrefix: \"\",\n                            showColumn: true,\n                            total: false,\n                            rowTotal: null,\n                            columnTotal: null,\n                            initialValue: null,\n                            minValue: null,\n                            maxValue: null\n                        },\n                        {\n                            localisationRequired: false,\n                            name: \"final_calculated_pension\",\n                            label: \"Net Pension\",\n                            type: \"string\",\n                            defaultValue: null,\n                            isMandatory: false,\n                            isLocalisationRequired: false,\n                            localisationPrefix: \"\",\n                            showColumn: true,\n                            total: true,\n                            rowTotal: null,\n                            columnTotal: null,\n                            initialValue: null,\n                            minValue: null,\n                            maxValue: null\n                        }\n                    ],\n                    ttl: null,\n                    reportData: reportData\n                }\n            ]\n            };  \n            //response.reportResponses.reportData=[\"abc\",\"abc\"];\n            res.json(response);\n\n        \n        }\n      });\n    })\n  );\n  return api;\n};\n"]}