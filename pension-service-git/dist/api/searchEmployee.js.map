{"version":3,"sources":["../../src/api/searchEmployee.js"],"names":["asyncHandler","require","config","db","api","post","request","res","next","queryObj","JSON","parse","stringify","query","employee","assignments","serviceHistory","employees","text","code","sqlQueryAssignment","sqlQueryServiceHistory","sqlQuery","err","dbRes","logger","error","stack","rows","body","RequestInfo","debug","push","response","ResponseInfo","Employees","json"],"mappings":"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","file":"searchEmployee.js","sourcesContent":["import { Router } from \"express\";\r\nimport { requestInfoToResponseInfo } from \"../utils\";\r\nimport { mergeSearchEmployee,mergeAssignmentResults,mergeServiceHistoryResults } from \"../utils/search\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport get from \"lodash/get\";\r\nimport some from \"lodash/some\";\r\nimport { actions } from \"../utils/search\";\r\nimport { validatePensionNotificationRegisterSearchModel } from \"../utils/modelValidation\";\r\nimport envVariables from \"../envVariables\";\r\nimport mdmsData from \"../utils/mdmsData\";\r\nimport filter from \"lodash/filter\";\r\nimport orderBy from \"lodash/orderBy\";\r\nconst asyncHandler = require(\"express-async-handler\");\r\n\r\nimport logger from \"../config/logger\";\r\n\r\nexport default ({ config, db }) => {\r\n  let api = Router();\r\n  api.post(\r\n    \"/_searchEmployee\",\r\n    asyncHandler(async (request, res, next) => {     \r\n      \r\n      \r\n      const queryObj = JSON.parse(JSON.stringify(request.query));\r\n      \r\n\r\n      let employee;\r\n      let assignments=[];\r\n      let serviceHistory=[];\r\n      let employees=[];\r\n\r\n      //assignments\r\n      text =\"SELECT pea.tenantid, position, department, designation, from_date, to_date, govt_order_no, reporting_to, is_hod, is_current_assignment, is_primary_assignment from eg_pension_employee_assignment pea JOIN eg_pension_employee pe ON pea.pension_employee_id=pe.uuid WHERE pea.is_pension_applicable=true AND pea.active =true\"                                \r\n      if (queryObj.code) {\r\n        text = `${text} AND pe.employee_hrms_code = '${queryObj.code}'`;\r\n      }                              \r\n\r\n      let sqlQueryAssignment=text;\r\n            \r\n      /* db.query(sqlQueryAssignment, async (err, dbRes) => {\r\n        if (err) {\r\n          logger.error(err.stack);\r\n        } else {        \r\n          assignments =\r\n          dbRes.rows && !isEmpty(dbRes.rows)\r\n            ? await mergeAssignmentResults(\r\n                dbRes.rows,\r\n                request.query,\r\n                request.body.RequestInfo\r\n              )\r\n            : [];  \r\n            logger.debug(\"assignments\",assignments);  \r\n            //employee.assignments=assignments;                                                      \r\n        }\r\n      });                 */\r\n    \r\n    \r\n\r\n     \r\n\r\n       //service history\r\n       text =\"SELECT pesh.tenantid, service_status, service_from, service_to, order_no, location, is_current_position from eg_pension_employee_service_history pesh JOIN eg_pension_employee pe ON pesh.pension_employee_id=pe.uuid WHERE pesh.active =true\"                                  \r\n       if (queryObj.code) {\r\n        text = `${text} AND pe.employee_hrms_code = '${queryObj.code}'`;\r\n      }                             \r\n \r\n       let sqlQueryServiceHistory=text;\r\n              \r\n       /* db.query(sqlQueryServiceHistory, async (err, dbRes) => {\r\n         if (err) {\r\n           logger.error(err.stack);\r\n         } else {        \r\n           serviceHistory =\r\n           dbRes.rows && !isEmpty(dbRes.rows)\r\n             ? await mergeServiceHistoryResults(\r\n                 dbRes.rows,\r\n                 request.query,\r\n                 request.body.RequestInfo\r\n               )\r\n             : []; \r\n             \r\n            logger.debug(\"serviceHistory\",serviceHistory);                 \r\n            //employee.serviceHistory=serviceHistory;                                              \r\n         }\r\n       });    */\r\n\r\n      \r\n     let text =\r\n        \"select pe.uuid, pe.tenantid, pe.employee_hrms_id, pe.employee_hrms_code, pe.name, pe.date_of_birth, pe.date_of_retirement, pe.date_of_death, pe.employee_hrms_uuid, pe.salutation, pe.gender, pe.employee_status, pe.employee_type, pe.date_of_appointment, pecd.mobile_number, pecd.email_id, pecd.alt_contact_number, pecd.pan, pecd.aadhaar_number, pecd.permanent_address, pecd.permanent_city, pecd.permanent_pin_code, pecd.correspondence_address, pecd.correspondence_city, pecd.correspondence_pin_code, pecd.father_or_husband_name, pecd.blood_group, pecd.identification_mark from eg_pension_employee pe\";\r\n      text =`${text} left join eg_pension_employee_contact_details pecd on pe.uuid = pecd.pension_employee_id and pecd.active =true`;\r\n\r\n      if (!isEmpty(queryObj)) {\r\n        text = text + \" where \";\r\n      }\r\n      /*\r\n      if (queryObj.tenantId) {\r\n        text = `${text} pe.tenantid = '${queryObj.tenantId}'`;\r\n      }\r\n      */\r\n      if (queryObj.code) {\r\n        text = `${text} pe.employee_hrms_code = '${queryObj.code}'`;\r\n      } \r\n      /*\r\n      if (queryObj.name) {\r\n        text = `${text} and pe.name = '${queryObj.name}'`;\r\n      }            \r\n      if (queryObj.dob) {\r\n        text = `${text} and pe.date_of_birth = '${queryObj.dob}'`;\r\n      }  \r\n      */     \r\n          \r\n      let sqlQuery = text;      \r\n      \r\n\r\n      sqlQuery = sqlQuery + ';' + sqlQueryAssignment + ';' + sqlQueryServiceHistory + ';';\r\n      \r\n      db.query(sqlQuery, async (err, dbRes) => {\r\n        if (err) {\r\n          logger.error(err.stack);\r\n        } else {        \r\n          employee =\r\n              dbRes[0].rows && !isEmpty(dbRes[0].rows)\r\n                ? await mergeSearchEmployee(\r\n                    dbRes[0].rows,\r\n                    request.query,\r\n                    request.body.RequestInfo\r\n                  )\r\n                : {};\r\n                assignments =\r\n          dbRes[1].rows && !isEmpty(dbRes[1].rows)\r\n            ? await mergeAssignmentResults(\r\n                dbRes[1].rows,\r\n                request.query,\r\n                request.body.RequestInfo\r\n              )\r\n            : []; \r\n                serviceHistory =\r\n                dbRes[2].rows && !isEmpty(dbRes[2].rows)\r\n                  ? await mergeServiceHistoryResults(\r\n                      dbRes[2].rows,\r\n                      request.query,\r\n                      request.body.RequestInfo\r\n                    )\r\n                  : []; \r\n            logger.debug(\"employee\",JSON.stringify(employee)); \r\n            employee.assignments=assignments;                                        \r\n            employee.serviceHistory=serviceHistory;  \r\n\r\n            employees.push(employee);                      \r\n            let response = {\r\n              ResponseInfo: requestInfoToResponseInfo(request.body.RequestInfo, true),\r\n              Employees: employees\r\n            };                                \r\n            res.json(response); \r\n        }  \r\n      });    \r\n      \r\n      \r\n      \r\n      \r\n    })\r\n  );\r\n  return api;\r\n};\r\n"]}