{"version":3,"sources":["../../src/api/searchWorkflowApplicationDetails.js"],"names":["asyncHandler","require","config","db","api","post","request","res","next","queryObj","JSON","parse","stringify","query","body","RequestInfo","tenantId","businessIds","workflowSearchResponse","console","log","processInstances","ProcessInstances","applicationDetails","businessId","name","employee","user","dob","dateOfRetirement","permanentAddress","permanentCity","permanentPinCode","serviceStatus","serviceHistory","serviceFrom","serviceTo","reasonForRetirement","employeeOtherDetails","isEligibleForPension","isTakenMonthlyPensionAndGratuity","isTakenGratuityCommutationTerminalBenefit","isTakenCompensationPensionAndGratuity","totalNoPayLeavesDays","totalNoPayLeavesMonths","totalNoPayLeavesYears","lpd","incomeTax","overPayment","medicalRelief","miscellaneous","isDuesPresent","isDuesAmountDecided","dues","isConvictedSeriousCrimeOrGraveMisconduct","isAnyJudicialProceedingIsContinuing","isAnyMisconductInsolvencyInefficiency","isCompassionatePensionGranted","isCommutationOpted","response","ResponseInfo","ApplicationDetails","json"],"mappings":"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","file":"searchWorkflowApplicationDetails.js","sourcesContent":["import { Router } from \"express\";\r\nimport producer from \"../kafka/producer\";\r\nimport { requestInfoToResponseInfo, searchPensionWorkflow,epochToDmy} from \"../utils\";\r\nimport envVariables from \"../envVariables\";\r\nimport mdmsData from \"../utils/mdmsData\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport set from \"lodash/set\";\r\nimport get from \"lodash/get\";\r\nimport orderBy from \"lodash/orderBy\";\r\nimport { intConversion} from \"../utils/search\";\r\nconst asyncHandler = require(\"express-async-handler\");\r\n\r\nexport default ({ config, db }) => {\r\n  let api = Router();\r\n  api.post(\r\n    \"/_searchWorkflowApplicationDetails\",\r\n    asyncHandler(async (request, res, next) => {              \r\n      //getting mdms data\r\n           \r\n      const queryObj = JSON.parse(JSON.stringify(request.query));\r\n      \r\n      let workflowSearchResponse = await searchPensionWorkflow(request.body.RequestInfo, queryObj.tenantId,queryObj.businessIds);\r\n      \r\n      console.log(\"workflowSearchResponse\", JSON.stringify(workflowSearchResponse));\r\n              \r\n      let processInstances=workflowSearchResponse.ProcessInstances;\r\n       \r\n      let applicationDetails={\r\n        businessId: processInstances[0].businessId,\r\n        name: processInstances[0].employee.user.name,\r\n        dob: epochToDmy(intConversion(processInstances[0].employee.user.dob)) ,\r\n        dateOfRetirement: epochToDmy(intConversion(processInstances[0].employee.dateOfRetirement)) ,                \r\n        permanentAddress: processInstances[0].employee.user.permanentAddress,\r\n        permanentCity: processInstances[0].employee.user.permanentCity,\r\n        permanentPinCode: processInstances[0].employee.user.permanentPinCode,\r\n        serviceStatus: processInstances[0].employee.serviceHistory[0].serviceStatus,\r\n        serviceFrom: epochToDmy(intConversion( processInstances[0].employee.serviceHistory[0].serviceFrom)) ,                \r\n        serviceTo: processInstances[0].employee.serviceHistory[0].serviceTo!=null? epochToDmy(intConversion( processInstances[0].employee.serviceHistory[0].serviceTo)):null,\r\n        reasonForRetirement: processInstances[0].employeeOtherDetails.reasonForRetirement,\r\n        isEligibleForPension: processInstances[0].employeeOtherDetails.isEligibleForPension,\r\n        isTakenMonthlyPensionAndGratuity: processInstances[0].employeeOtherDetails.isTakenMonthlyPensionAndGratuity,\r\n        isTakenGratuityCommutationTerminalBenefit: processInstances[0].employeeOtherDetails.isTakenGratuityCommutationTerminalBenefit,\r\n        isTakenCompensationPensionAndGratuity: processInstances[0].employeeOtherDetails.isTakenCompensationPensionAndGratuity,\r\n        totalNoPayLeavesDays: processInstances[0].employeeOtherDetails.totalNoPayLeavesDays,\r\n        totalNoPayLeavesMonths: processInstances[0].employeeOtherDetails.totalNoPayLeavesMonths,\r\n        totalNoPayLeavesYears: processInstances[0].employeeOtherDetails.totalNoPayLeavesYears,\r\n        lpd: processInstances[0].employeeOtherDetails.lpd,\r\n        incomeTax: processInstances[0].employeeOtherDetails.incomeTax,\r\n        overPayment: processInstances[0].employeeOtherDetails.overPayment,\r\n        medicalRelief: processInstances[0].employeeOtherDetails.medicalRelief,\r\n        miscellaneous: processInstances[0].employeeOtherDetails.miscellaneous,\r\n        isDuesPresent: processInstances[0].employeeOtherDetails.isDuesPresent,\r\n        isDuesAmountDecided: processInstances[0].employeeOtherDetails.isDuesAmountDecided,\r\n        dues: processInstances[0].employeeOtherDetails.dues,\r\n        isConvictedSeriousCrimeOrGraveMisconduct: processInstances[0].employeeOtherDetails.isConvictedSeriousCrimeOrGraveMisconduct,\r\n        isAnyJudicialProceedingIsContinuing: processInstances[0].employeeOtherDetails.isAnyJudicialProceedingIsContinuing,\r\n        isAnyMisconductInsolvencyInefficiency: processInstances[0].employeeOtherDetails.isAnyMisconductInsolvencyInefficiency,\r\n        isCompassionatePensionGranted: processInstances[0].employeeOtherDetails.isCompassionatePensionGranted,\r\n        isCommutationOpted: processInstances[0].employeeOtherDetails.isCommutationOpted,\r\n        isCommutationOpted: processInstances[0].employeeOtherDetails.isCommutationOpted,\r\n      };\r\n    \r\n\r\n      let response = {\r\n        ResponseInfo: requestInfoToResponseInfo(request.body.RequestInfo, true),\r\n        ApplicationDetails: applicationDetails          \r\n      };\r\n      \r\n      \r\n      res.json(response);     \r\n        \r\n    })\r\n  );\r\n  return api;\r\n};\r\n"]}