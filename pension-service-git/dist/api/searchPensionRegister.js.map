{"version":3,"sources":["../../src/api/searchPensionRegister.js"],"names":["asyncHandler","require","config","db","api","post","request","res","next","response","ResponseInfo","body","RequestInfo","ProcessInstances","processInstance","pensioner","pensionRegister","pensionerFinalCalculatedBenefitDetails","queryObj","JSON","parse","stringify","query","tenantId","pensionerNumber","searchPensionerResponse","Pensioners","text","pensionerId","sqlQuery","err","dbRes","logger","error","stack","rows","year","push","json"],"mappings":"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","file":"searchPensionRegister.js","sourcesContent":["import { Router } from \"express\";\nimport { requestInfoToResponseInfo,searchPensioner } from \"../utils\";\nimport { mergeSearchPensionRegisterResults,mergePensionerFinalCalculatedBenefit } from \"../utils/search\";\nimport isEmpty from \"lodash/isEmpty\";\nimport get from \"lodash/get\";\nimport some from \"lodash/some\";\nimport { actions } from \"../utils/search\";\nimport envVariables from \"../envVariables\";\nimport mdmsData from \"../utils/mdmsData\";\nimport filter from \"lodash/filter\";\nconst asyncHandler = require(\"express-async-handler\");\n\nimport logger from \"../config/logger\";\n\nexport default ({ config, db }) => {\n  let api = Router();\n  api.post(\n    \"/_searchPensionRegister\",\n    asyncHandler(async (request, res, next) => {  \n      \n      let response = {\n        ResponseInfo: requestInfoToResponseInfo(request.body.RequestInfo, true),\n        ProcessInstances: []\n      };      \n      let processInstance={\n        pensioner:{},\n        pensionRegister:[],\n        pensionerFinalCalculatedBenefitDetails:{}\n      }\n      const queryObj = JSON.parse(JSON.stringify(request.query));\n      let searchPensionerResponse=await searchPensioner(request.body.RequestInfo,queryObj.tenantId,queryObj.pensionerNumber);\n      let pensioner=searchPensionerResponse.Pensioners[0];\n      processInstance.pensioner=pensioner;\n\n      let text=\"SELECT basic_pension, pension_deductions, additional_pension, commuted_pension, commuted_value, family_pension_i, family_pension_ii, dcrg, net_deductions, final_calculated_pension, interim_relief, da, nqs_year, nqs_month, nqs_day, dues_deductions, compassionate_pension, compensation_pension, terminal_benefit, final_calculated_gratuity, family_pension_i_start_date, family_pension_i_end_date, family_pension_ii_start_date, ex_gratia, pensioner_family_pension, total_pension, provisional_pension, wound_extraordinary_pension, attendant_allowance FROM eg_pension_pensioner_final_calculated_benefit\";\n      if (!isEmpty(queryObj)) {\n        text = `${text} WHERE`;\n      }\n      if (queryObj.tenantId) {\n        text = `${text} tenantid = '${queryObj.tenantId}'`;\n      } \n      if (pensioner.pensionerId) {\n        text=`${text} AND pensioner_id = '${pensioner.pensionerId}'`;\n      }\n\n      let sqlQuery = text;\n      \n      let pensionerFinalCalculatedBenefitDetails={};\n      db.query(sqlQuery, async (err, dbRes) => {\n        if (err) {\n          logger.error(err.stack);\n        } else {\n\n          pensionerFinalCalculatedBenefitDetails =\n          dbRes.rows && !isEmpty(dbRes.rows)\n            ? await mergePensionerFinalCalculatedBenefit(\n                dbRes.rows,\n                request.query,\n                request.body.RequestInfo\n              )\n            : {};  \n            \n            processInstance.pensionerFinalCalculatedBenefitDetails=pensionerFinalCalculatedBenefitDetails;  \n\n            text =\"SELECT pr.tenantid, pr.effective_year, pr.effective_month, pr.pension_arrear, pr.fma, pr.miscellaneous, pr.over_payment, pr.income_tax, pr.cess, pr.basic_pension, pr.additional_pension, pr.commuted_pension, pr.net_deductions, pr.final_calculated_pension, pr.interim_relief, pr.da, pr.total_pension, pr.pension_deductions, pr.wound_extraordinary_pension, pr.attendant_allowance FROM eg_pension_register pr JOIN eg_pension_pensioner pp ON pr.pensioner_id=pp.uuid WHERE pr.active=true\";\n               \n            if (queryObj.tenantId) {\n              text = `${text} and pr.tenantid = '${queryObj.tenantId}'`;\n            }\n            if (pensioner.pensionerId) {\n              text=`${text} AND pr.pensioner_id = '${pensioner.pensionerId}'`;\n            }\n            if (queryObj.year) {\n              text = `${text} and pr.effective_year = ${queryObj.year}`;\n            }\n            \n            sqlQuery = text;\n            let pensionRegister=[];\n\n            db.query(sqlQuery, async (err, dbRes) => {\n              if (err) {\n                logger.error(err.stack);\n              } else {\n\n                pensionRegister =\n                dbRes.rows && !isEmpty(dbRes.rows)\n                  ? await mergeSearchPensionRegisterResults(\n                      dbRes.rows,\n                      request.query,\n                      request.body.RequestInfo\n                    )\n                  : [];                    \n                  processInstance.pensionRegister=pensionRegister;                                                      \n                  response.ProcessInstances.push(processInstance);                                           \n                  res.json(response);               \n\n              }\n            });         \n        }\n      });\n    })\n  );\n  return api;\n};\n"]}