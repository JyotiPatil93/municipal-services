{"version":3,"sources":["../../src/api/pushManualRegisterToPensionNotificationRegister.js"],"names":["asyncHandler","require","config","db","api","post","res","next","body","payloads","employees","RequestInfo","Employees","tenantId","code","pensionResponse","pensionEmployeesList","length","message","errors","EMPLOYEE_EXIST_PUSH_MANUAL_REGISTER_TO_PNR_NA","errorType","errorReponse","ResponseInfo","Errors","hrmsResponse","hrmsEmployee","pensionEmployeeId","dob","user","dateOfSuperannuation","assignments","lastAssignments","lastAssignment","x","fromDate","isPrimaryAssignment","push","i","id","isPensionApplicable","active","serviceHistory","employee","uuid","name","dateOfRetirement","dateOfDeath","salutation","gender","employeeStatus","employeeType","dateOfAppointment","pensionEmployeeAuditId","notificationRegister","pensionNotificationRegisterId","isInitiated","pensionNotificationRegisterAuditId","auditDetails","createdBy","lastModifiedBy","createdDate","Date","getTime","lastModifiedDate","response","json"],"mappings":";;;;;;;;;;;;;;AAAA;;AACA;;;;AACA;;AACA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AAGA;;;;;;AAFA,IAAMA,eAAeC,QAAQ,uBAAR,CAArB;;kBAIe,gBAAoB;AAAA,MAAjBC,MAAiB,QAAjBA,MAAiB;AAAA,MAATC,EAAS,QAATA,EAAS;;AACjC,MAAIC,MAAM,sBAAV;AACAA,MAAIC,IAAJ,CACE,mDADF,EAEEL;AAAA,yFAAa,wBAAiBM,GAAjB,EAAsBC,IAAtB;AAAA,UAASC,IAAT,SAASA,IAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AACPC,sBADO,GACI,EADJ;AAEX;;AAEIC,uBAJO,GAIG,EAJH;;AAMX;;AANW;AAAA,qBAOiB,gCAAoBF,KAAKG,WAAzB,EAAqCH,KAAKI,SAAL,CAAe,CAAf,EAAkBC,QAAvD,EAAgEL,KAAKI,SAAL,CAAe,CAAf,EAAkBE,IAAlF,CAPjB;;AAAA;AAOPC,6BAPO;AAQPC,kCARO,GAQcD,gBAAgBH,SAR9B;;AAAA,oBAURI,qBAAqBC,MAArB,GAA4B,CAVpB;AAAA;AAAA;AAAA;;AAYDC,qBAZC,GAYO,uBAZP;AAcHC,oBAdG,GAcMD,QAAQE,6CAdd;;AAAA,oBAeHD,OAAOF,MAAP,GAAgB,CAfb;AAAA;AAAA;AAAA;;AAgBLV,mBAAK;AACHc,2BAAW,QADR;AAEHC,8BAAc;AACZC,gCAAc,sCACZf,KAAKG,WADO,EAEZ,IAFY,CADF;AAKZa,0BAAQL;AALI;AAFX,eAAL;AAhBK;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,qBAiCkB,+BAAmBX,KAAKG,WAAxB,EAAqCH,KAAKI,SAAL,CAAe,CAAf,EAAkBC,QAAvD,EAAgEL,KAAKI,SAAL,CAAe,CAAf,EAAkBE,IAAlF,CAjClB;;AAAA;AAiCHW,0BAjCG;AAmCHC,0BAnCG,GAmCUD,aAAab,SAAb,CAAuB,CAAvB,CAnCV;;AAAA,mBAqCJc,YArCI;AAAA;AAAA;AAAA;;AAuCL;;AAEIC,+BAzCC,GAyCiB,oBAzCjB;AA2CDC,iBA3CC,GA2CGF,aAAaG,IAAb,CAAkBD,GA3CrB;AA4CL;AACA;AACA;;AAEIE,kCAhDC,GAgDoBJ,aAAaI,oBAhDjC;AAkDDC,yBAlDC,GAkDW,EAlDX;;AAmDL,kBAAGL,aAAaK,WAAb,IAA4B,CAAC,uBAAQL,aAAaK,WAArB,CAAhC,EAAkE;AAChEA,8BAAYL,aAAaK,WAAzB;AACIC,+BAF4D,GAE5C,EAF4C;AAG5DC,8BAH4D,GAG7C,EAH6C;;AAIhE,oBAAGF,YAAYd,MAAZ,GAAmB,CAAtB,EAAyB;AACvBc,gCAAY,uBAAQA,WAAR,EAAoB,CAAC,UAAD,CAApB,EAAiC,CAAC,MAAD,CAAjC,CAAZ;AACAC,oCAAgB,sBAAOD,WAAP,EAAmB,UAASG,CAAT,EAAW;AAAC,2BAAOA,EAAEC,QAAF,IAAYJ,YAAY,CAAZ,EAAeI,QAAlC;AAA4C,mBAA3E,CAAhB;AACA,sBAAGH,gBAAgBf,MAAhB,GAAuB,CAA1B,EAA4B;AAC1Be,sCAAgB,sBAAOA,eAAP,EAAuB,UAASE,CAAT,EAAW;AAAC,6BAAOA,EAAEE,mBAAF,IAAuB,IAA9B;AAAoC,qBAAvE,CAAhB;AACA,wBAAGJ,gBAAgBf,MAAhB,GAAuB,CAA1B,EAA4B;AAC1BgB,qCAAeI,IAAf,CAAoBL,gBAAgB,CAAhB,CAApB;AACD,qBAFD,MAGI;AACFA,wCAAgB,sBAAOD,WAAP,EAAmB,UAASG,CAAT,EAAW;AAAC,+BAAOA,EAAEC,QAAF,IAAYJ,YAAY,CAAZ,EAAeI,QAAlC;AAA4C,uBAA3E,CAAhB;AACAF,qCAAeI,IAAf,CAAoBL,gBAAgB,CAAhB,CAApB;AACD;AACF;AACF,iBAbD,MAcI;AACFC,mCAAeF,WAAf;AACD;AACD,qBAASO,CAAT,GAAa,CAAb,EAAgBA,IAAGP,YAAYd,MAA/B,EAAuCqB,GAAvC,EAA2C;AACzC,sBAAGP,YAAYO,CAAZ,EAAeC,EAAf,IAAmBN,eAAe,CAAf,EAAkBM,EAAxC,EAA2C;AACzCR,gCAAYO,CAAZ,EAAeE,mBAAf,GAAmC,IAAnC;AACD;AACDT,8BAAYO,CAAZ,EAAeC,EAAf,GAAkB,oBAAlB;AACAR,8BAAYO,CAAZ,EAAezB,QAAf,GAAwBa,aAAab,QAArC;AACAkB,8BAAYO,CAAZ,EAAeG,MAAf,GAAsB,IAAtB;AACAV,8BAAYO,CAAZ,EAAeX,iBAAf,GAAiCA,iBAAjC;AACD;AACF;;AAEGe,4BAnFC,GAmFc,EAnFd;;AAoFL,kBAAGhB,aAAagB,cAAb,IAA+B,CAAC,uBAAQhB,aAAagB,cAArB,CAAnC,EAAwE;AACtEA,iCAAehB,aAAagB,cAA5B;AACA,qBAASJ,CAAT,GAAa,CAAb,EAAgBA,IAAGI,eAAezB,MAAlC,EAA0CqB,GAA1C,EAA8C;AAC5CI,iCAAeJ,CAAf,EAAkBC,EAAlB,GAAqB,oBAArB;AACAG,iCAAeJ,CAAf,EAAkBzB,QAAlB,GAA2Ba,aAAab,QAAxC;AACA6B,iCAAeJ,CAAf,EAAkBG,MAAlB,GAAyB,IAAzB;AACAC,iCAAeJ,CAAf,EAAkBX,iBAAlB,GAAoCA,iBAApC;AACD;AACF;;AAED;;;;;;;AAOIgB,sBArGC,GAqGQ;AACXhB,mCAAmBA,iBADR;AAEXY,oBAAIb,aAAaa,EAFN;AAGXK,sBAAMlB,aAAakB,IAHR;AAIX9B,sBAAMY,aAAaZ,IAJR;AAKX+B,sBAAMnB,aAAaG,IAAb,CAAkBgB,IALb;AAMXjB,qBAAKA,GANM;AAOX;AACAkB,kCAAkBhB,oBARP;AASXiB,6BAAa,IATF;AAUXlC,0BAAUa,aAAab,QAVZ;AAWXmC,4BAAYtB,aAAaG,IAAb,CAAkBmB,UAXnB;AAYXC,wBAAQvB,aAAaG,IAAb,CAAkBoB,MAZf;AAaXC,gCAAgBxB,aAAawB,cAblB;AAcXC,8BAAczB,aAAayB,YAdhB;AAeXC,mCAAmB1B,aAAa0B,iBAfrB;AAgBXrB,6BAAaA,WAhBF;AAiBXW,gCAAgBA,cAjBL;AAkBX;AACAD,wBAAQ,IAnBG;AAoBXY,wCAAwB,oBApBb;AAqBXC,sCAAsB;AACpBC,iDAA+B,oBADX;AAEpBC,+BAAa,IAFO;AAGpBC,sDAAoC;AAHhB,iBArBX;AA0BXC,8BAAc;AACZC,6BAAW,mBAAInD,KAAKG,WAAT,EAAsB,eAAtB,EAAuC,EAAvC,CADC;AAEZiD,kCAAgB,IAFJ;AAGZC,+BAAa,IAAIC,IAAJ,GAAWC,OAAX,EAHD;AAIZC,oCAAkB;AAJN;AA1BH,eArGR;;;AAuILtD,wBAAU2B,IAAV,CAAeM,QAAf;AACAnC,mBAAKI,SAAL,GAAeF,SAAf;;AAxIK;AAAA,qBA0Ie,sDAA0CF,IAA1C,CA1If;;AAAA;AA0IDyD,sBA1IC;;AA2IL3D,kBAAI4D,IAAJ,CAASD,QAAT;;AA3IK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAb;;AAAA;AAAA;AAAA;AAAA,MAFF;AAmJA,SAAO7D,GAAP;AACD,C","file":"pushManualRegisterToPensionNotificationRegister.js","sourcesContent":["import { Router } from \"express\";\r\nimport producer from \"../kafka/producer\";\r\nimport { requestInfoToResponseInfo, epochToYmd,convertDateToEpoch,uuidv1,getEmployeeDetails,getPensionEmployees,saveEmployeeToPensionNotificationRegister} from \"../utils\";\r\nimport envVariables from \"../envVariables\";\r\nimport mdmsData from \"../utils/mdmsData\";\r\nimport { Message} from \"../utils/message\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport set from \"lodash/set\";\r\nimport get from \"lodash/get\";\r\nimport filter from \"lodash/filter\";\r\nimport orderBy from \"lodash/orderBy\";\r\nimport { intConversion} from \"../utils/search\";\r\nconst asyncHandler = require(\"express-async-handler\");\r\n\r\nimport logger from \"../config/logger\";\r\n\r\nexport default ({ config, db }) => {\r\n  let api = Router();\r\n  api.post(\r\n    \"/_pushManualRegisterToPensionNotificationRegister\",\r\n    asyncHandler(async ({ body }, res, next) => {\r\n      let payloads = [];\r\n      //getting mdms data      \r\n         \r\n      let employees=[];   \r\n\r\n      //search employee in Pension module  \r\n      let pensionResponse = await getPensionEmployees(body.RequestInfo,body.Employees[0].tenantId,body.Employees[0].code);   \r\n      let pensionEmployeesList=pensionResponse.Employees;          \r\n     \r\n      if(pensionEmployeesList.length>0){  \r\n          \r\n          const message=Message();                  \r\n\r\n          let errors = message.EMPLOYEE_EXIST_PUSH_MANUAL_REGISTER_TO_PNR_NA;\r\n          if (errors.length > 0) {\r\n            next({\r\n              errorType: \"custom\",\r\n              errorReponse: {\r\n                ResponseInfo: requestInfoToResponseInfo(\r\n                  body.RequestInfo,\r\n                  true\r\n                ),\r\n                Errors: errors\r\n              }\r\n            });\r\n            return;\r\n          }\r\n          \r\n      }\r\n      else{\r\n        \r\n        //search employee from hrms and push that employee in pension module                  \r\n          let hrmsResponse = await getEmployeeDetails(body.RequestInfo, body.Employees[0].tenantId,body.Employees[0].code);              \r\n          \r\n          let hrmsEmployee=hrmsResponse.Employees[0];                                                    \r\n\r\n          if(hrmsEmployee){\r\n\r\n            //let maxRetirementAge=envVariables.EGOV_PENSION_MAX_RETIREMENT_AGE;              \r\n\r\n            let pensionEmployeeId=uuidv1();                      \r\n\r\n            let dob=hrmsEmployee.user.dob;\r\n            //let actualDob=new Date(epochToYmd(intConversion(dob)));    \r\n            //let dorYYYYMMDD=`${actualDob.getFullYear()+maxRetirementAge}-${actualDob.getMonth()+1}-${actualDob.getDate()}`;    \r\n            //let dateOfRetirement=convertDateToEpoch(dorYYYYMMDD,\"dob\");   \r\n\r\n            let dateOfSuperannuation=hrmsEmployee.dateOfSuperannuation;\r\n\r\n            let assignments=[];\r\n            if(hrmsEmployee.assignments && !isEmpty(hrmsEmployee.assignments)){\r\n              assignments=hrmsEmployee.assignments;\r\n              let lastAssignments=[];\r\n              let lastAssignment=[];\r\n              if(assignments.length>1) {    \r\n                assignments=orderBy(assignments,['fromDate'],['desc']);      \r\n                lastAssignments=filter(assignments,function(x){return x.fromDate==assignments[0].fromDate;}); \r\n                if(lastAssignments.length>1){\r\n                  lastAssignments=filter(lastAssignments,function(x){return x.isPrimaryAssignment==true;}); \r\n                  if(lastAssignments.length>0){\r\n                    lastAssignment.push(lastAssignments[0]); \r\n                  }\r\n                  else{\r\n                    lastAssignments=filter(assignments,function(x){return x.fromDate==assignments[0].fromDate;}); \r\n                    lastAssignment.push(lastAssignments[0]);\r\n                  }                          \r\n                }                                                                                                                                                                        \r\n              }\r\n              else{\r\n                lastAssignment=assignments;\r\n              }\r\n              for (var i = 0; i <assignments.length; i++){\r\n                if(assignments[i].id==lastAssignment[0].id){\r\n                  assignments[i].isPensionApplicable=true;\r\n                }\r\n                assignments[i].id=uuidv1(); \r\n                assignments[i].tenantId=hrmsEmployee.tenantId;                    \r\n                assignments[i].active=true;      \r\n                assignments[i].pensionEmployeeId=pensionEmployeeId;\r\n              }\r\n            }\r\n\r\n            let serviceHistory=[];\r\n            if(hrmsEmployee.serviceHistory && !isEmpty(hrmsEmployee.serviceHistory)){\r\n              serviceHistory=hrmsEmployee.serviceHistory;\r\n              for (var i = 0; i <serviceHistory.length; i++){\r\n                serviceHistory[i].id=uuidv1();     \r\n                serviceHistory[i].tenantId=hrmsEmployee.tenantId;                  \r\n                serviceHistory[i].active=true;        \r\n                serviceHistory[i].pensionEmployeeId=pensionEmployeeId;            \r\n              }                  \r\n            }\r\n\r\n            /*\r\n            let user=hrmsEmployee.user;\r\n            user.employeeContactDetailsId=uuidv1();     \r\n            user.tenantId=hrmsEmployee.tenantId;                 \r\n            user.active=true; \r\n            */\r\n\r\n            let employee={\r\n              pensionEmployeeId: pensionEmployeeId,                          \r\n              id: hrmsEmployee.id,\r\n              uuid: hrmsEmployee.uuid,                    \r\n              code: hrmsEmployee.code,\r\n              name: hrmsEmployee.user.name,\r\n              dob: dob,\r\n              //dateOfRetirement: dateOfRetirement,\r\n              dateOfRetirement: dateOfSuperannuation,\r\n              dateOfDeath: null,                                      \r\n              tenantId: hrmsEmployee.tenantId, \r\n              salutation: hrmsEmployee.user.salutation,      \r\n              gender: hrmsEmployee.user.gender, \r\n              employeeStatus: hrmsEmployee.employeeStatus,\r\n              employeeType: hrmsEmployee.employeeType,\r\n              dateOfAppointment: hrmsEmployee.dateOfAppointment,\r\n              assignments: assignments,\r\n              serviceHistory: serviceHistory,      \r\n              //user: user,                 \r\n              active: true,\r\n              pensionEmployeeAuditId: uuidv1(),\r\n              notificationRegister: {\r\n                pensionNotificationRegisterId: uuidv1(),      \r\n                isInitiated: null,        \r\n                pensionNotificationRegisterAuditId: uuidv1()        \r\n              },   \r\n              auditDetails: {\r\n                createdBy: get(body.RequestInfo, \"userInfo.uuid\", \"\"),\r\n                lastModifiedBy: null,\r\n                createdDate: new Date().getTime(),      \r\n                lastModifiedDate: null        \r\n              }      \r\n            }; \r\n            \r\n            employees.push(employee);\r\n            body.Employees=employees;       \r\n\r\n            let response= await saveEmployeeToPensionNotificationRegister(body);\r\n            res.json(response);\r\n\r\n        }        \r\n      }                       \r\n    })\r\n  );\r\n  return api;\r\n};\r\n"]}