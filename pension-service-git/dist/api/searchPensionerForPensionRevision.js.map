{"version":3,"sources":["../../src/api/searchPensionerForPensionRevision.js"],"names":["asyncHandler","require","config","db","api","post","request","res","next","response","ResponseInfo","body","RequestInfo","ProcessInstances","queryObj","JSON","parse","stringify","query","text","tenantId","String","toUpperCase","pensionerNumber","sqlQuery","pensionerPensionRevision","processInstances","err","dbRes","logger","error","stack","rows","pensioner","pensionerFinalCalculatedBenefitId","pensionerFinalCalculatedBenefitDetails","debug","push","json"],"mappings":"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","file":"searchPensionerForPensionRevision.js","sourcesContent":["import { Router } from \"express\";\nimport { requestInfoToResponseInfo,epochToYmd } from \"../utils\";\nimport { mergeSearchPensionerForPensionRevisionResults,mergePensionerFinalCalculatedBenefit } from \"../utils/search\";\nimport isEmpty from \"lodash/isEmpty\";\nimport get from \"lodash/get\";\nimport some from \"lodash/some\";\nimport { actions } from \"../utils/search\";\nimport envVariables from \"../envVariables\";\nimport mdmsData from \"../utils/mdmsData\";\nimport filter from \"lodash/filter\";\nconst asyncHandler = require(\"express-async-handler\");\n\nimport logger from \"../config/logger\";\n\nexport default ({ config, db }) => {\n  let api = Router();\n  api.post(\n    \"/_searchPensionerForPensionRevision\",\n    asyncHandler(async (request, res, next) => {  \n      \n      let response = {\n        ResponseInfo: requestInfoToResponseInfo(request.body.RequestInfo, true),\n        ProcessInstances: []\n      };      \n     \n      const queryObj = JSON.parse(JSON.stringify(request.query));\n      \n\n      let text =\"SELECT ppfcb.pensioner_id, pp.tenantid, pp.pension_employee_id, pp.business_service, pp.pensioner_number, pe.name, pr.uuid, pr.effective_start_year, pr.effective_start_month, pr.effective_end_year, pr.effective_end_month, pr.pension_arrear, pr.fma, pr.miscellaneous, pr.over_payment, pr.income_tax, pr.cess, pr.basic_pension, pr.additional_pension, pr.commuted_pension, pr.net_deductions, pr.final_calculated_pension, pr.interim_relief, pr.da, pr.total_pension, pr.pension_deductions, pr.pensioner_final_calculated_benefit_id, pr.remarks, pr.wound_extraordinary_pension, pr.attendant_allowance FROM eg_pension_revision pr JOIN eg_pension_pensioner_final_calculated_benefit ppfcb ON pr.pensioner_final_calculated_benefit_id=ppfcb.uuid JOIN eg_pension_pensioner pp ON ppfcb.pensioner_id= pp.uuid JOIN eg_pension_employee pe ON pp.pension_employee_id = pe.uuid WHERE pr.active=true AND pp.active=true AND ppfcb.active=true\";\n               \n      if (queryObj.tenantId) {\n        text = `${text} and upper(pp.tenantid) = '${String(queryObj.tenantId).toUpperCase()}' `;\n      }\n      if (queryObj.pensionerNumber) {\n        text = `${text} and pp.pensioner_number = '${queryObj.pensionerNumber}' `;\n      }\n      \n      let sqlQuery = text;\n      \n      \n\n      let pensionerPensionRevision={};\n      let processInstances=[];\n\n      db.query(sqlQuery, async (err, dbRes) => {\n        if (err) {\n          logger.error(err.stack);\n        } else {\n          \n          pensionerPensionRevision =\n            dbRes.rows && !isEmpty(dbRes.rows)\n              ? await mergeSearchPensionerForPensionRevisionResults(\n                  dbRes.rows,\n                  request.query,\n                  request.body.RequestInfo\n                )\n              : {};   \n              \n              if(pensionerPensionRevision && !isEmpty(pensionerPensionRevision)){\n                text=\"SELECT basic_pension, pension_deductions, additional_pension, commuted_pension, commuted_value, family_pension_i, family_pension_ii, dcrg, net_deductions, final_calculated_pension, interim_relief, da, nqs_year, nqs_month, nqs_day, dues_deductions, compassionate_pension, compensation_pension, terminal_benefit, final_calculated_gratuity, family_pension_i_start_date, family_pension_i_end_date, family_pension_ii_start_date, ex_gratia, pensioner_family_pension, total_pension, provisional_pension, wound_extraordinary_pension, attendant_allowance, invalid_pension FROM eg_pension_pensioner_final_calculated_benefit\";\n                text=`${text} WHERE uuid = '${pensionerPensionRevision.pensioner.pensionerFinalCalculatedBenefitId}'`;\n\n                sqlQuery = text;\n                \n                let pensionerFinalCalculatedBenefitDetails={};\n                db.query(sqlQuery, async (err, dbRes) => {\n                  if (err) {\n                    logger.error(err.stack);\n                  } else {\n\n                    pensionerFinalCalculatedBenefitDetails =\n                    dbRes.rows && !isEmpty(dbRes.rows)\n                      ? await mergePensionerFinalCalculatedBenefit(\n                          dbRes.rows,\n                          request.query,\n                          request.body.RequestInfo\n                        )\n                      : {};  \n                      logger.debug(\"pensionerFinalCalculatedBenefitDetails\",pensionerFinalCalculatedBenefitDetails);\n                      pensionerPensionRevision.pensionerFinalCalculatedBenefitDetails=pensionerFinalCalculatedBenefitDetails;\n\n                      processInstances.push(pensionerPensionRevision);\n                      response.ProcessInstances=processInstances;                                                  \n                      res.json(response);            \n\n                  }\n                });\n              }                           \n        }\n      });\n       \n    })\n  );\n  return api;\n};\n"]}