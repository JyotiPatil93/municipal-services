{"version":3,"sources":["../src/index.js"],"names":["require","swaggerUi","swaggerDocument","app","use","exposedHeaders","config","corsHeaders","bodyParser","json","limit","bodyLimit","serve","setup","db","err","req","res","next","logger","error","errorType","status","data","errorReponse","send","listen","envVariables","SERVER_PORT","debug","rulePensionNotificationRegister","schedule","RecurrenceRule","date","EGOV_PENSION_PNR_SCHEDULAR_START_DATE","hour","EGOV_PENSION_PNR_SCHEDULAR_START_HOURS","minute","EGOV_PENSION_PNR_SCHEDULAR_START_MINUTES","j","scheduleJob","EGOV_PENSION_SCHEDULAR_USERNAME","EGOV_PENSION_SCHEDULAR_PASSWORD","EGOV_PENSION_SCHEDULAR_GRANT_TYPE","EGOV_PENSION_SCHEDULAR_SCOPE","EGOV_PENSION_SCHEDULAR_TENANTID","EGOV_PENSION_SCHEDULAR_USERTYPE","loginResponse","requestInfo","apiId","EGOV_PENSION_REQUESTINFO_API_ID","ver","EGOV_PENSION_REQUESTINFO_VER","action","EGOV_PENSION_REQUESTINFO_ACTION","did","EGOV_PENSION_REQUESTINFO_DID","key","EGOV_PENSION_REQUESTINFO_KEY","msgId","EGOV_PENSION_REQUESTINFO_MSG_ID","requesterId","EGOV_PENSION_REQUESTINFO_REQUSTER_ID","authToken","access_token","userInfo","response","requestBody","RequestInfo","ruleCreatePensionRegister","EGOV_PENSION_CREATE_PENSION_REGISTER_SCHEDULAR_START_DATE","EGOV_PENSION_CREATE_PENSION_REGISTER_SCHEDULAR_START_HOURS","EGOV_PENSION_CREATE_PENSION_REGISTER_SCHEDULAR_START_MINUTES","i","ProcessInstances","ruleUpdatePensionRevisionBulk","EGOV_PENSION_UPDATE_PENSION_REVISION_BULK_SCHEDULAR_START_DATE","EGOV_PENSION_UPDATE_PENSION_REVISION_BULK_SCHEDULAR_START_HOURS","EGOV_PENSION_UPDATE_PENSION_REVISION_BULK_SCHEDULAR_START_MINUTES","Parameters"],"mappings":"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","file":"index.js","sourcesContent":["require(\"babel-core/register\");\nrequire(\"babel-polyfill\");\n//import http from \"http\";\nimport express from \"express\";\nimport cors from \"cors\";\nimport morgan from \"morgan\";\nimport bodyParser, { json } from \"body-parser\";\n// import util from \"util\";\nimport db from \"./db\";\nimport middleware from \"./middleware\";\nimport api from \"./api\";\nimport config from \"./config.json\";\nimport tracer from \"./middleware/tracer\";\nimport terminusOptions from \"./utils/health\";\nimport envVariables from \"./envVariables\";\nimport schedule from \"node-schedule\";\nimport filter from \"lodash/filter\";\nimport lte from \"lodash/lte\";\nimport gte from \"lodash/gte\";\nimport chain from \"lodash/chain\";\nimport producer from \"./kafka/producer\";\nimport { epochToYmd,loginRequest,pushEmployeesToPensionNotificationRegister,createMonthlyPensionRegister,updatePensionRevisionBulk} from \"./utils\";\nimport {  intConversion } from \"./utils/search\";\nimport {userDetails} from \"./services/userService\";\nvar swaggerUi = require(\"swagger-ui-express\"),\n  swaggerDocument = require(\"./swagger.json\");\n//const { createTerminus } = require(\"@godaddy/terminus\");\n\nimport logger from \"./config/logger\";\n\n\n// const validator = require('swagger-express-validator');\n\n// const opts = {\n//   schema:swaggerDocument, // Swagger schema\n//   preserveResponseContentType: false, // Do not override responses for validation errors to always be JSON, default is true\n//   returnRequestErrors: true, // Include list of request validation errors with response, default is false\n//   returnResponseErrors: true, // Include list of response validation errors with response, default is false\n//   validateRequest: true,\n//   validateResponse: true,\n//   requestValidationFn: (req, data, errors) => {\n//     logger.debug(`failed request validation: ${req.method} ${req.originalUrl}\\n ${util.inspect(errors)}`)\n//   },\n//   responseValidationFn: (req, data, errors) => {\n//     logger.debug(`failed response validation: ${req.method} ${req.originalUrl}\\n ${util.inspect(errors)}`)\n//   },\n//   async: true\n// };\n\nlet app = express();\n//app.server = http.createServer(app);\n\n// Enable health checks and kubernetes shutdown hooks\n//createTerminus(app.server, terminusOptions);\n\n// logger\napp.use(morgan(\"dev\"));\n\n// 3rd party middleware\napp.use(\n  cors({\n    exposedHeaders: config.corsHeaders\n  })\n);\n\napp.use(\n  bodyParser.json({\n    limit: config.bodyLimit\n  })\n);\n\napp.use(tracer());\n\napp.use(\"/api-docs\", swaggerUi.serve, swaggerUi.setup(swaggerDocument));\n\n// internal middleware\napp.use(middleware({ config, db }));\n\n// app.use(validator(opts));\n\n// api router\n\napp.use(\"/\", api({ config, db }));\n\n//error handler middleware\napp.use((err, req, res, next) =>{\n  \n  logger.error(err);\n  if (!err.errorType) {\n    res.status(err.status).json(err.data);\n  }\n  else if (err.errorType==\"custom\") {\n    res.status(400).json(err.errorReponse);\n  }\n  else {\n    res.status(500);\n    res.send(\"Oops, something went wrong.\");\n  }\n});\n\n\n/* app.server.listen(envVariables.SERVER_PORT, () => {\n  logger.debug(`Started on port ${app.server.address().port}`);\n}); */\n\napp.listen(envVariables.SERVER_PORT, () => {\n  logger.debug(`Started on port ${envVariables.SERVER_PORT}`);\n});\n\nvar rulePensionNotificationRegister = new schedule.RecurrenceRule();\nrulePensionNotificationRegister.date  = envVariables.EGOV_PENSION_PNR_SCHEDULAR_START_DATE; \nrulePensionNotificationRegister.hour=envVariables.EGOV_PENSION_PNR_SCHEDULAR_START_HOURS;\nrulePensionNotificationRegister.minute = envVariables.EGOV_PENSION_PNR_SCHEDULAR_START_MINUTES;\n\nvar j =  schedule.scheduleJob(rulePensionNotificationRegister, async()=>{\n  logger.debug('Pension Notification Register Schedular Started.'); \n\n  const loginResponse = await loginRequest(\n    envVariables.EGOV_PENSION_SCHEDULAR_USERNAME,\n    envVariables.EGOV_PENSION_SCHEDULAR_PASSWORD,\n    envVariables.EGOV_PENSION_SCHEDULAR_GRANT_TYPE,\n    envVariables.EGOV_PENSION_SCHEDULAR_SCOPE,\n    envVariables.EGOV_PENSION_SCHEDULAR_TENANTID,\n    envVariables.EGOV_PENSION_SCHEDULAR_USERTYPE    \n  );\n\n  \n\n  let requestInfo={\n    apiId: envVariables.EGOV_PENSION_REQUESTINFO_API_ID,\n    ver: envVariables.EGOV_PENSION_REQUESTINFO_VER,\n    action: envVariables.EGOV_PENSION_REQUESTINFO_ACTION,\n    did: envVariables.EGOV_PENSION_REQUESTINFO_DID,\n    key: envVariables.EGOV_PENSION_REQUESTINFO_KEY,\n    msgId: envVariables.EGOV_PENSION_REQUESTINFO_MSG_ID,\n    requesterId: envVariables.EGOV_PENSION_REQUESTINFO_REQUSTER_ID,\n    authToken: loginResponse.access_token\n  };  \n  \n\n  //appends userInfo in requestInfo object \n  let userInfo=await userDetails(requestInfo,loginResponse.access_token);\n  requestInfo.userInfo=userInfo;\n\n  let response;\n  let requestBody = {\n    RequestInfo: requestInfo\n  };\n  \n  response=await pushEmployeesToPensionNotificationRegister(requestBody);\n  logger.debug(response);\n});\n\nvar ruleCreatePensionRegister = new schedule.RecurrenceRule();\nruleCreatePensionRegister.date  = envVariables.EGOV_PENSION_CREATE_PENSION_REGISTER_SCHEDULAR_START_DATE; \nruleCreatePensionRegister.hour=envVariables.EGOV_PENSION_CREATE_PENSION_REGISTER_SCHEDULAR_START_HOURS\nruleCreatePensionRegister.minute = envVariables.EGOV_PENSION_CREATE_PENSION_REGISTER_SCHEDULAR_START_MINUTES;\n\nvar i =  schedule.scheduleJob(ruleCreatePensionRegister, async()=>{\n  logger.debug('Pension Register Schedular Started.');  \n  const loginResponse = await loginRequest( \n    envVariables.EGOV_PENSION_SCHEDULAR_USERNAME,\n    envVariables.EGOV_PENSION_SCHEDULAR_PASSWORD,\n    envVariables.EGOV_PENSION_SCHEDULAR_GRANT_TYPE,\n    envVariables.EGOV_PENSION_SCHEDULAR_SCOPE,\n    envVariables.EGOV_PENSION_SCHEDULAR_TENANTID,\n    envVariables.EGOV_PENSION_SCHEDULAR_USERTYPE      \n  );\n  \n  let requestInfo={\n    apiId: envVariables.EGOV_PENSION_REQUESTINFO_API_ID,\n    ver: envVariables.EGOV_PENSION_REQUESTINFO_VER,\n    action: envVariables.EGOV_PENSION_REQUESTINFO_ACTION,\n    did: envVariables.EGOV_PENSION_REQUESTINFO_DID,\n    key: envVariables.EGOV_PENSION_REQUESTINFO_KEY,\n    msgId: envVariables.EGOV_PENSION_REQUESTINFO_MSG_ID,\n    requesterId: envVariables.EGOV_PENSION_REQUESTINFO_REQUSTER_ID,\n    authToken: loginResponse.access_token\n  };    \n\n  //appends userInfo in requestInfo object \n  let userInfo=await userDetails(requestInfo,loginResponse.access_token);\n  requestInfo.userInfo=userInfo;\n  \n  let response;\n  let requestBody = {\n    RequestInfo: requestInfo,\n    ProcessInstances: []\n  };\n  \n  response=await createMonthlyPensionRegister(requestBody);\n  logger.debug(response);\n});\n\nvar ruleUpdatePensionRevisionBulk  = new schedule.RecurrenceRule();\nruleUpdatePensionRevisionBulk.date  = envVariables.EGOV_PENSION_UPDATE_PENSION_REVISION_BULK_SCHEDULAR_START_DATE; \nruleUpdatePensionRevisionBulk.hour=envVariables.EGOV_PENSION_UPDATE_PENSION_REVISION_BULK_SCHEDULAR_START_HOURS\nruleUpdatePensionRevisionBulk.minute = envVariables.EGOV_PENSION_UPDATE_PENSION_REVISION_BULK_SCHEDULAR_START_MINUTES;\n\nvar i =  schedule.scheduleJob(ruleUpdatePensionRevisionBulk, async()=>{\n  logger.debug('Pension Revision Bulk Schedular Started.');  \n  const loginResponse = await loginRequest( \n    envVariables.EGOV_PENSION_SCHEDULAR_USERNAME,\n    envVariables.EGOV_PENSION_SCHEDULAR_PASSWORD,\n    envVariables.EGOV_PENSION_SCHEDULAR_GRANT_TYPE,\n    envVariables.EGOV_PENSION_SCHEDULAR_SCOPE,\n    envVariables.EGOV_PENSION_SCHEDULAR_TENANTID,\n    envVariables.EGOV_PENSION_SCHEDULAR_USERTYPE      \n  );\n  \n  let requestInfo={\n    apiId: envVariables.EGOV_PENSION_REQUESTINFO_API_ID,\n    ver: envVariables.EGOV_PENSION_REQUESTINFO_VER,\n    action: envVariables.EGOV_PENSION_REQUESTINFO_ACTION,\n    did: envVariables.EGOV_PENSION_REQUESTINFO_DID,\n    key: envVariables.EGOV_PENSION_REQUESTINFO_KEY,\n    msgId: envVariables.EGOV_PENSION_REQUESTINFO_MSG_ID,\n    requesterId: envVariables.EGOV_PENSION_REQUESTINFO_REQUSTER_ID,\n    authToken: loginResponse.access_token\n  };    \n\n  //appends userInfo in requestInfo object \n  let userInfo=await userDetails(requestInfo,loginResponse.access_token);\n  requestInfo.userInfo=userInfo;\n  \n  let response;\n  let requestBody = {\n    RequestInfo: requestInfo,\n    Parameters: {}\n  };\n  \n  response=await updatePensionRevisionBulk(requestBody);\n  logger.debug(response);\n});\n\n\n\n\nexport default app;\n\n"]}