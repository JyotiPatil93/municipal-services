{"version":3,"sources":["../../src/utils/api.js"],"names":["httpRequest","hostURL","endPoint","queryObject","requestBody","headers","customRequestInfo","instance","errorReponse","defaults","Object","assign","post","response","responseStatus","parseInt","status","data","httpGetRequest","get"],"mappings":";;;;;;;;;;;;;;;AAAA;;;;AACA;;AACA;;;;;;AAEO,IAAMA;AAAA,sFAAc;AAAA,QACzBC,OADyB,SACzBA,OADyB;AAAA,QAEzBC,QAFyB,SAEzBA,QAFyB;AAAA,kCAGzBC,WAHyB;AAAA,QAGzBA,WAHyB,qCAGX,EAHW;AAAA,kCAIzBC,WAJyB;AAAA,QAIzBA,WAJyB,qCAIX,EAJW;AAAA,8BAKzBC,OALyB;AAAA,QAKzBA,OALyB,iCAKf,EALe;AAAA,sCAMzBC,iBANyB;AAAA,QAMzBA,iBANyB,yCAML,EANK;AAAA;AAAA;AAAA;AAAA;AAAA;AAQrBC,oBARqB,GAQV,0BAAWN,OAAX,CARU;AASrBO,wBATqB,GASN,EATM;;AAUzB,gBAAIH,OAAJ,EACEE,SAASE,QAAT,GAAoBC,OAAOC,MAAP,CAAcJ,SAASE,QAAvB,EAAiC;AACnDJ;AADmD,aAAjC,CAApB;AAGFH,uBAAW,wBAAYA,QAAZ,EAAsBC,WAAtB,CAAX;AAdyB;AAAA;AAAA,mBAiBAI,SAASK,IAAT,CAAcV,QAAd,EAAwBE,WAAxB,CAjBA;;AAAA;AAiBjBS,oBAjBiB;AAmBjBC,0BAnBiB,GAmBAC,SAASF,SAASG,MAAlB,EAA0B,EAA1B,CAnBA;;AAAA,kBAoBnBF,mBAAmB,GAAnB,IAA0BA,mBAAmB,GApB1B;AAAA;AAAA;AAAA;;AAAA,6CAqBdD,SAASI,IArBK;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAwBvBT,2BAAe,YAAMK,QAArB;;AAxBuB;AAAA,kBA6BnBL,YA7BmB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAd;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAgCA,IAAMU;AAAA,uFAAiB;AAAA,QAC5BjB,OAD4B,SAC5BA,OAD4B;AAAA,QAE5BC,QAF4B,SAE5BA,QAF4B;AAAA,kCAG5BC,WAH4B;AAAA,QAG5BA,WAH4B,qCAGd,EAHc;AAAA,kCAI5BC,WAJ4B;AAAA,QAI5BA,WAJ4B,qCAId,EAJc;AAAA,8BAK5BC,OAL4B;AAAA,QAK5BA,OAL4B,iCAKlB,EALkB;AAAA,sCAM5BC,iBAN4B;AAAA,QAM5BA,iBAN4B,yCAMR,EANQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAQxBC,oBARwB,GAQb,0BAAWN,OAAX,CARa;AASxBO,wBATwB,GAST,EATS;;AAU5B,gBAAIH,OAAJ,EACEE,SAASE,QAAT,GAAoBC,OAAOC,MAAP,CAAcJ,SAASE,QAAvB,EAAiC;AACnDJ;AADmD,aAAjC,CAApB;AAGFH,uBAAW,wBAAYA,QAAZ,EAAsBC,WAAtB,CAAX;AAd4B;AAAA;AAAA,mBAiBHI,SAASY,GAAT,CAAajB,QAAb,CAjBG;;AAAA;AAiBpBW,oBAjBoB;AAmBpBC,0BAnBoB,GAmBHC,SAASF,SAASG,MAAlB,EAA0B,EAA1B,CAnBG;;AAAA,kBAoBtBF,mBAAmB,GAAnB,IAA0BA,mBAAmB,GApBvB;AAAA;AAAA;AAAA;;AAAA,8CAqBjBD,SAASI,IArBQ;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAwB1BT,2BAAe,aAAMK,QAArB;;AAxB0B;AAAA,kBA6BtBL,YA7BsB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjB;;AAAA;AAAA;AAAA;AAAA,GAAN","file":"api.js","sourcesContent":["import httpClient from \"../config/httpClient\";\nimport { addQueryArg } from \"./index\";\nimport envVariables from \"../envVariables\";\n\nexport const httpRequest = async ({\n  hostURL,\n  endPoint,\n  queryObject = [],\n  requestBody = {},\n  headers = [],\n  customRequestInfo = {}\n}) => {\n  let instance = httpClient(hostURL);\n  let errorReponse = {};\n  if (headers)\n    instance.defaults = Object.assign(instance.defaults, {\n      headers\n    });\n  endPoint = addQueryArg(endPoint, queryObject);\n  try {\n    \n    const response = await instance.post(endPoint, requestBody);\n    \n    const responseStatus = parseInt(response.status, 10);\n    if (responseStatus === 200 || responseStatus === 201) {\n      return response.data;\n    }\n  } catch (error) {\n    errorReponse = error.response;\n     \n  }\n\n  \n  throw errorReponse;\n};\n\nexport const httpGetRequest = async ({\n  hostURL,\n  endPoint,\n  queryObject = [],\n  requestBody = {},\n  headers = [],\n  customRequestInfo = {}\n}) => {\n  let instance = httpClient(hostURL);\n  let errorReponse = {};\n  if (headers)\n    instance.defaults = Object.assign(instance.defaults, {\n      headers\n    });\n  endPoint = addQueryArg(endPoint, queryObject);\n  try {\n    \n    const response = await instance.get(endPoint);\n    \n    const responseStatus = parseInt(response.status, 10);\n    if (responseStatus === 200 || responseStatus === 201) {\n      return response.data;\n    }\n  } catch (error) {\n    errorReponse = error.response;\n     \n  }\n\n  \n  throw errorReponse;\n};\n\n"]}