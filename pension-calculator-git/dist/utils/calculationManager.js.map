{"version":3,"sources":["../../src/utils/calculationManager.js"],"names":["math","require","selectedRules","calculateBenefit","rules","employee","mdms","length","i","benefits","getBenefitFormula","benefitValue","benefitFormulaExpression","benefitCode","envVariables","EGOV_PENSION_BENEFIT_CODE_FAMILY_PENSION_1_START_DATE","EGOV_PENSION_BENEFIT_CODE_FAMILY_PENSION_1_END_DATE","EGOV_PENSION_BENEFIT_CODE_FAMILY_PENSION_2_START_DATE","Date","formatFormulaForDate","benefitFormula","EGOV_PENSION_BENEFIT_CODE_ONE_FORTH_HALF_YEAR_OF_SERVICE","formatFormula","formatFormulaToExpression","EGOV_PENSION_BENEFIT_CODE_IR","EGOV_PENSION_BENEFIT_CODE_DA","EGOV_PENSION_BENEFIT_CODE_PENSION_IR","EGOV_PENSION_BENEFIT_CODE_PENSION_DA","isNaN","Number","Math","round","ceil","finalBenefitValue","dateValue","day","getDate","month","getMonth","dateValueYYYYMMDD","getFullYear","benefit","f","evaluatePreConditions","preConditions","push","benefitApplicable","adjustments","conditions","formula","preCondition","evaluatePreCondition","condition","isPreConditions","calculateConditionExpression","values","isPreCondition","sb","conditionKey","getConditionKey","key","conditionOperator","operator","conditionValue","value","String","includes","keyValue","reasonForRetirement","toUpperCase","isCommutationOpted","dateOfRetirement","isConvictedSeriousCrimeOrGraveMisconduct","isAnyJudicialProceedingIsContinuing","isAnyMisconductInsolvencyInefficiency","isTakenGratuityCommutationTerminalBenefit","isTakenMonthlyPensionAndGratuity","isTakenCompensationPensionAndGratuity","isDuesPresent","isDuesAmountDecided","dues","getCalculatedBenefitValue","EGOV_PENSION_BENEFIT_CODE_DCRG","employeeType","configurationValue","getFormulaValue","doj","monthsDaysInRange","months","split","trunc","diesInExtremistsDacoitsSmugglerAntisocialAttack","lpd","dateOfDeath","EGOV_PENSION_BENEFIT_CODE_PROVISIONAL_PENSION","EGOV_PENSION_BENEFIT_CODE_COMPASSIONATE_PENSION","EGOV_PENSION_BENEFIT_CODE_COMPENSATION_PENSION","isCompassionatePensionGranted","dob","employeeGroup","employeeDisability","disabilityPercentage","EGOV_PENSION_BENEFIT_CODE_INVALID_PENSION","EGOV_PENSION_BENEFIT_CODE_WOUND_EXTRAORDINARY_PENSION","EGOV_PENSION_BENEFIT_CODE_ATTENDANT_ALLOWANCE","attendantAllowanceGranted","isEmployeeDiesInAccidentalDeath","isEmployeeDiesInTerroristAttack","expression","expressionValue","replace","strParameters","RegExp","calculateBenefitExpression","parameter","parameterValue","EGOV_PENSION_BENEFIT_CODE_COMMUTATION_PENSION","EGOV_PENSION_BENEFIT_CODE_BASIC_PENSION","EGOV_PENSION_BENEFIT_CODE_PENSION","EGOV_PENSION_BENEFIT_CODE_PENSION_DEDUCTION","EGOV_PENSION_BENEFIT_CODE_COMMUTATION_VALUE","EGOV_PENSION_BENEFIT_CODE_COMMUTED_PENSION","EGOV_PENSION_BENEFIT_CODE_ADDITIONAL_PENSION","EGOV_PENSION_BENEFIT_CODE_NET_DEDUCTION","EGOV_PENSION_BENEFIT_CODE_TOTAL_PENSION","EGOV_PENSION_BENEFIT_CODE_FINAL_CALCULATED_PENSION","EGOV_PENSION_BENEFIT_CODE_DCRG_DUES_DEDUCTION","overPayment","incomeTax","cess","medicalRelief","fma","miscellaneous","EGOV_PENSION_BENEFIT_CODE_FAMILY_PENSION_1","EGOV_PENSION_BENEFIT_CODE_ADDITIONAL_FAMILY_PENSION_1","dependents","EGOV_PENSION_BENEFIT_CODE_PENSIONER_FAMILY_PENSION","woundExtraordinaryPension","result","evaluate","getAdjustedValue","adjustmentType","adjustedValue","x","getNotifications","selectedNotifications","notifications","text","evaluateNotificationPreConditions","notification","notificationCode","notificationText","getEmployeeType","mdmsEmployeeType","evaluateEmployeeTypePreCondition","getDependentEligibilityForGratuity","dependent","mdmsEligibility","eligibility","evaluateDependentEligibilityPreCondition","getDependentEligibilityForPension","calculateConditionExpressionForDependentEligibility","getConditionKeyForDependentEligibility","relationship","isDisabled","op","value2","getHours","getMinutes","calculateRevisedPension","getPensionRevisionRulesByConditions","formatFormulaForPensionRevision","getFormulaValueForPensionRevision","basicPension","da","commutedPension","additionalPension","interimRelief","pensionDeductions","totalPension","netDeductions","attendantAllowance"],"mappings":"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","file":"calculationManager.js","sourcesContent":["import { httpRequest } from \"./api\";\r\nimport envVariables from \"../envVariables\";\r\nimport get from \"lodash/get\";\r\nimport findIndex from \"lodash/findIndex\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport omitBy from \"lodash/omitBy\";\r\nimport isNil from \"lodash/isNil\";\r\nimport filter from \"lodash/filter\";\r\nimport { getYearOfService, getDAPercentage, getCommutationPercentage, getCommutationMultiplier, getIRPercentage, getAdditionalPensionPercentage, getPensionConfigurationValue, getDOJ, getMonthsDaysInRange, getAge, isEldestDependent, getAdditionalPensionPercentageForFamily, getHalfYearOfService } from \"./calculationHelper\";\r\nconst math = require(\"mathjs\");\r\n\r\nlet selectedRules = [];\r\nexport const calculateBenefit = (rules, employee, mdms) => {\r\n  selectedRules.length = 0;\r\n  for (var i = 0; i < rules.benefits.length; i++) {\r\n    \r\n    getBenefitFormula(rules.benefits[i], employee, mdms);\r\n\r\n    let benefitValue;\r\n    let benefitFormulaExpression = \"\";\r\n    switch (selectedRules[i].benefitCode) {\r\n      case envVariables.EGOV_PENSION_BENEFIT_CODE_FAMILY_PENSION_1_START_DATE:\r\n      case envVariables.EGOV_PENSION_BENEFIT_CODE_FAMILY_PENSION_1_END_DATE:\r\n      case envVariables.EGOV_PENSION_BENEFIT_CODE_FAMILY_PENSION_2_START_DATE:\r\n        benefitValue = new Date(formatFormulaForDate(selectedRules[i].benefitFormula, employee, mdms));\r\n        break;\r\n      case envVariables.EGOV_PENSION_BENEFIT_CODE_ONE_FORTH_HALF_YEAR_OF_SERVICE:\r\n        benefitValue = formatFormula(selectedRules[i].benefitFormula, employee, mdms);\r\n        benefitFormulaExpression = formatFormulaToExpression(selectedRules[i].benefitFormula, employee, mdms);\r\n        break;\r\n      case envVariables.EGOV_PENSION_BENEFIT_CODE_IR:\r\n      case envVariables.EGOV_PENSION_BENEFIT_CODE_DA:\r\n      case envVariables.EGOV_PENSION_BENEFIT_CODE_PENSION_IR:\r\n      case envVariables.EGOV_PENSION_BENEFIT_CODE_PENSION_DA:\r\n        //benefitValue=formatFormula(selectedRules[i].benefitFormula ,employee,mdms);\r\n        //benefitFormulaExpression=formatFormulaToExpression(selectedRules[i].benefitFormula ,employee,mdms);\r\n        if (selectedRules[i].benefitFormula != null) {\r\n          if (isNaN(Number(selectedRules[i].benefitFormula))) {\r\n            //benefitValue=formatFormula(selectedRules[i].benefitFormula ,employee,mdms);                         \r\n            benefitValue = Math.round(formatFormula(selectedRules[i].benefitFormula, employee, mdms));\r\n          }\r\n          else {\r\n            benefitValue = selectedRules[i].benefitFormula;\r\n          }\r\n        }\r\n        else {\r\n          benefitValue = 0;\r\n        }\r\n        benefitFormulaExpression = formatFormulaToExpression(selectedRules[i].benefitFormula, employee, mdms);\r\n        break;\r\n      default:\r\n        //benefitValue=formatFormula(selectedRules[i].benefitFormula ,employee,mdms);\r\n        //benefitFormulaExpression=formatFormulaToExpression(selectedRules[i].benefitFormula ,employee,mdms);\r\n        if (selectedRules[i].benefitFormula != null) {\r\n          if (isNaN(Number(selectedRules[i].benefitFormula))) {\r\n            //benefitValue=formatFormula(selectedRules[i].benefitFormula ,employee,mdms);                         \r\n            benefitValue = Math.ceil(formatFormula(selectedRules[i].benefitFormula, employee, mdms));\r\n          }\r\n          else {\r\n            benefitValue = selectedRules[i].benefitFormula;\r\n          }\r\n        }\r\n        else {\r\n          benefitValue = 0;\r\n        }\r\n        benefitFormulaExpression = formatFormulaToExpression(selectedRules[i].benefitFormula, employee, mdms);\r\n        break;\r\n\r\n    }\r\n\r\n    selectedRules[i].benefitValue = benefitValue;\r\n    selectedRules[i].finalBenefitValue = benefitValue;\r\n    selectedRules[i].benefitFormulaExpression = benefitFormulaExpression;\r\n\r\n    //apply adjustments\r\n    /*\r\n    if(selectedRules[i].adjustments && selectedRules[i].adjustments.length>0){\r\n      for (var j = 0; j < selectedRules[i].adjustments.length; j++) { \r\n        let adjustment=selectedRules[i].adjustments[j];\r\n        let adjustmentValue=formatFormula(adjustment.adjustmentFormula ,employee,mdms);\r\n        selectedRules[i].adjustments[j].adjustmentValue=adjustmentValue;\r\n        selectedRules[i].finalBenefitValue=getAdjustedValue(selectedRules[i].finalBenefitValue,\r\n                                          adjustment.adjustmentType,\r\n                                          adjustmentValue)\r\n      }\r\n    }\r\n    */\r\n\r\n  }\r\n  for (var i = 0; i < selectedRules.length; i++) {\r\n    switch (selectedRules[i].benefitCode) {\r\n      case envVariables.EGOV_PENSION_BENEFIT_CODE_FAMILY_PENSION_1_START_DATE:\r\n      case envVariables.EGOV_PENSION_BENEFIT_CODE_FAMILY_PENSION_1_END_DATE:\r\n      case envVariables.EGOV_PENSION_BENEFIT_CODE_FAMILY_PENSION_2_START_DATE:\r\n        let dateValue = new Date(selectedRules[i].finalBenefitValue);\r\n        let day = dateValue.getDate() < 10 ? `0${dateValue.getDate()}` : dateValue.getDate();\r\n        let month = dateValue.getMonth() + 1 < 10 ? `0${dateValue.getMonth() + 1}` : dateValue.getMonth() + 1;\r\n        let dateValueYYYYMMDD = `${dateValue.getFullYear()}-${month}-${day}`;\r\n\r\n        selectedRules[i].benefitValue = dateValueYYYYMMDD;\r\n        selectedRules[i].finalBenefitValue = dateValueYYYYMMDD;\r\n\r\n        break;\r\n    }\r\n\r\n  }\r\n\r\n\r\n  return selectedRules;\r\n};\r\n\r\n\r\nexport const getBenefitFormula = (benefit, employee, mdms) => {\r\n    \r\n  let f = evaluatePreConditions(benefit.preConditions, employee, mdms);\r\n  //conditions satisfied\r\n  if (f != null) {\r\n    selectedRules.push({\r\n      benefitCode: benefit.benefitCode,\r\n      benefitFormula: f,\r\n      benefitValue: 0,\r\n      finalBenefitValue: 0,\r\n      benefitApplicable: true,\r\n      benefitFormulaExpression: null,\r\n      adjustments: []\r\n    });\r\n  }\r\n  else {                             //Benefit not applicable\r\n    selectedRules.push({\r\n      benefitCode: benefit.benefitCode,\r\n      benefitFormula: null,\r\n      benefitValue: 0,\r\n      finalBenefitValue: 0,\r\n      benefitApplicable: false,\r\n      benefitFormulaExpression: null,\r\n      adjustments: []\r\n\r\n    });\r\n\r\n  }\r\n};\r\n\r\n\r\n//evaluates all root preconditions of a benfit, formual comes from the root precondition satisfies\r\nexport const evaluatePreConditions = (conditions, employee, mdms) => {\r\n  let formula = null;\r\n  for (var i = 0; i < conditions.length; i++) {\r\n    let preCondition = conditions[i];\r\n    formula = evaluatePreCondition(preCondition, employee, mdms);\r\n    if (formula != null) {\r\n      break;\r\n    }\r\n  }\r\n  return formula;\r\n};\r\n\r\n//evaluates a single precondition object\r\nexport const evaluatePreCondition = (condition, employee, mdms) => {\r\n  let formula = null;\r\n  let isPreConditions = false;\r\n  isPreConditions = calculateConditionExpression(condition.preConditions, employee, mdms);\r\n  if (isPreConditions) {\r\n    if (condition.formula != null) {\r\n      formula = condition.formula;\r\n    }\r\n    else {\r\n      let values = condition.values;\r\n      for (var i = 0; i < values.length; i++) {\r\n        let preCondition = values[i];\r\n        formula = null;\r\n        formula = evaluatePreCondition(preCondition, employee, mdms);\r\n        if (formula != null) {\r\n          break;\r\n        }\r\n      }\r\n\r\n    }\r\n  }\r\n\r\n\r\n  return formula;\r\n};\r\n\r\n/*\r\n//evaluate each postCondition at root level\r\nexport const evaluatePostCondition = (postCondition,  employee,mdms) => {\r\n   \r\n\r\n  let isPostConditions=false; \r\n  let adjustment;      \r\n  isPostConditions=calculateConditionExpression(postCondition.postConditions,employee,mdms);\r\n  if(isPostConditions){\r\n    if(postCondition.adjustmentFormula!=null){\r\n      adjustment={\r\n        adjustmentType: postCondition.adjustmentType,\r\n        adjustmentCode: postCondition.adjustmentCode,            \r\n        adjustmentFormula: postCondition.adjustmentFormula,\r\n        adjustmentValue: 0\r\n      };  \r\n    }\r\n    else{          //postConditions under each postCondition at root level not satisfied,\r\n      let values=postCondition.values;\r\n      adjustment=evaluatePostConditions(values,employee,mdms);          \r\n      \r\n    }\r\n  }           \r\n  return adjustment;  \r\n};\r\n\r\nexport const evaluatePostConditions = (postConditions,  employee,mdms) => {\r\n   \r\n  \r\n  let isPostConditions=false; \r\n  let adjustment;      \r\n  for (var i = 0; i < postConditions.length; i++) {      \r\n    if(postConditions[i].postConditions!=null){\r\n      isPostConditions=calculateConditionExpression(postConditions[i].postConditions,employee,mdms);\r\n      if(isPostConditions){\r\n        if(postConditions[i].adjustmentFormula!=null){\r\n          adjustment={\r\n            adjustmentType: postConditions[i].adjustmentType,\r\n            adjustmentCode: postConditions[i].adjustmentCode,            \r\n            adjustmentFormula: postConditions[i].adjustmentFormula,\r\n            adjustmentValue: 0\r\n          };\r\n          \r\n          break;\r\n        }\r\n        else{          \r\n          let values=postConditions[i].values;\r\n          evaluateConditions(values,employee,mdms);          \r\n          \r\n        }\r\n      }     \r\n    }\r\n    \r\n  }          \r\n  return adjustment;  \r\n};\r\n*/\r\nexport const calculateConditionExpression = (preConditions, employee, mdms) => {\r\n  \r\n\r\n  let isPreCondition = false;\r\n  let sb = \"\";\r\n\r\n  for (var i = 0; i < preConditions.length; i++) {\r\n    let conditionKey = getConditionKey(preConditions[i].key, employee, mdms);\r\n    let conditionOperator = preConditions[i].operator;\r\n    let conditionValue;\r\n\r\n    switch (preConditions[i].key) {\r\n      case \"DOR\":\r\n      case \"DOD\":\r\n        conditionValue = new Date(preConditions[i].value);\r\n        break;\r\n      default:\r\n        if (String(preConditions[i].key).includes(\"|+Y|\") || String(preConditions[i].key).includes(\"|+M|\") || String(preConditions[i].key).includes(\"|+D|\") || String(preConditions[i].key).includes(\"|-Y|\") || String(preConditions[i].key).includes(\"|-M|\") || String(preConditions[i].key).includes(\"|-D|\")) {\r\n          conditionValue = new Date(formatFormulaForDate(preConditions[i].value, employee, mdms));\r\n        }\r\n        else {\r\n          if (String(preConditions[i].value).includes(\"|\")) {\r\n            conditionValue = getConditionKey(preConditions[i].value, employee, mdms);\r\n          }\r\n          else {\r\n            conditionValue = preConditions[i].value;\r\n          }\r\n\r\n\r\n        }\r\n        break;\r\n\r\n    }\r\n\r\n    sb = `${sb}'${conditionKey}' ${conditionOperator} '${conditionValue}'`;\r\n          \r\n    switch (conditionOperator) {\r\n      case \"==\":\r\n        if (conditionKey == conditionValue) {\r\n          isPreCondition = true;\r\n        }\r\n        break;\r\n      case \"<\":\r\n        if (conditionKey < conditionValue) {\r\n          isPreCondition = true;\r\n        }\r\n        break;\r\n      case \"<=\":\r\n        if (conditionKey <= conditionValue) {\r\n          isPreCondition = true;\r\n        }\r\n        break;\r\n      case \">\":\r\n        if (conditionKey > conditionValue) {\r\n          isPreCondition = true;\r\n        }\r\n        break;\r\n      case \">=\":\r\n        if (conditionKey >= conditionValue) {\r\n          isPreCondition = true;\r\n        }\r\n        break;\r\n      case \"!=\":\r\n        if (conditionKey != conditionValue) {\r\n          isPreCondition = true;\r\n        }\r\n        break;\r\n    }\r\n\r\n    //any of the preConditions satisfied then preConditions also satisfied\r\n    if (isPreCondition) {\r\n      break;\r\n    }\r\n  }\r\n  return isPreCondition;\r\n};\r\n\r\nexport const getConditionKey = (key, employee, mdms) => {\r\n  let keyValue = key;\r\n  switch (key) {\r\n    case \"YEAR_OF_SERVICE\":\r\n      keyValue = getYearOfService(employee);\r\n      break;\r\n    case \"REASON_FOR_RETIREMENT\":\r\n      keyValue = String(employee.reasonForRetirement).toUpperCase();\r\n      break;\r\n    case \"IS_OPTED_FOR_COMMUTATION\":\r\n      keyValue = String(employee.isCommutationOpted).toUpperCase();\r\n      break;\r\n    case \"DOR\":\r\n      keyValue = new Date(employee.dateOfRetirement);\r\n      break;\r\n    case \"IS_CONVICTED_SERIOUS_CRIME_OR_GUILTY_GRAVE_MISCONDUCT\":\r\n      keyValue = String(employee.isConvictedSeriousCrimeOrGraveMisconduct).toUpperCase();\r\n      break;\r\n    case \"IS_JUDICIAL_PROCEEDING_CONTINUED\":\r\n      keyValue = String(employee.isAnyJudicialProceedingIsContinuing).toUpperCase();\r\n      break;\r\n    case \"IF_MISCONDUCT_INSOLVENCY_INEFFICIENCY\":\r\n      keyValue = String(employee.isAnyMisconductInsolvencyInefficiency).toUpperCase();\r\n      break;\r\n    case \"IS_TAKEN_GRATUITY_COMMUTATION_TERMINAL_BENEFIT\":\r\n      keyValue = String(employee.isTakenGratuityCommutationTerminalBenefit).toUpperCase();\r\n      break;\r\n    case \"IS_TAKEN_MONTHLY_PENSION_AND_GRATUITY\":\r\n      keyValue = String(employee.isTakenMonthlyPensionAndGratuity).toUpperCase();\r\n      break;\r\n    case \"IS_TAKEN_COMPENSATION_PENSION_AND_GRATUITY\":\r\n      keyValue = String(employee.isTakenCompensationPensionAndGratuity).toUpperCase();\r\n      break;\r\n    case \"IS_DUES_PRESENT\":\r\n      keyValue = String(employee.isDuesPresent).toUpperCase();\r\n      break;\r\n    case \"IS_DUES_AMOUNT_DECIDED\":\r\n      keyValue = String(employee.isDuesAmountDecided).toUpperCase();\r\n      break;\r\n    case \"DUES_AMOUNT\":\r\n      keyValue = Number(employee.dues);\r\n      break;\r\n    case \"|DCRG|\":\r\n      keyValue = getCalculatedBenefitValue(envVariables.EGOV_PENSION_BENEFIT_CODE_DCRG);\r\n      break;\r\n    case \"TRUE\":\r\n      keyValue = \"TRUE\";\r\n      break;\r\n    case \"FALSE\":\r\n      keyValue = \"FALSE\";\r\n      break;\r\n    case \"EMPLOYEE_TYPE\":\r\n      keyValue = String(employee.employeeType).toUpperCase();\r\n      break;\r\n    case \"|DAILY_WAGER_10_YEAR_PERMANENT_DATE| - |DOJ|\":\r\n      let configurationValue = new Date(getFormulaValue(\"|DAILY_WAGER_10_YEAR_PERMANENT_DATE|\", null, employee, mdms));\r\n      let doj = new Date(getFormulaValue(\"|DOJ|\", null, employee, mdms));\r\n      let monthsDaysInRange = getMonthsDaysInRange(doj, configurationValue);\r\n      let months = Number(monthsDaysInRange.split(\"|\")[0]);\r\n      keyValue = Math.trunc(months / 12);\r\n      break;\r\n    case \"IF_INJURED_DIES_BY_ATTACK_OF_EXTREMISTS_DECOITS_SMUGGLERS_ANTI_SOCIAL\":\r\n      keyValue = String(employee.diesInExtremistsDacoitsSmugglerAntisocialAttack).toUpperCase();\r\n      break;\r\n    case \"LPD\":\r\n      keyValue = Number(employee.lpd);\r\n      break;\r\n    case \"DOD\":\r\n      keyValue = new Date(employee.dateOfDeath);\r\n      break;\r\n    case \"PROVISIONAL_PENSION\":\r\n      keyValue = getCalculatedBenefitValue(envVariables.EGOV_PENSION_BENEFIT_CODE_PROVISIONAL_PENSION);\r\n      break;\r\n    case \"COMPASSIONATE_PENSION\":\r\n      keyValue = getCalculatedBenefitValue(envVariables.EGOV_PENSION_BENEFIT_CODE_COMPASSIONATE_PENSION);\r\n      break;\r\n    case \"COMPENSATION_PENSION\":\r\n      keyValue = getCalculatedBenefitValue(envVariables.EGOV_PENSION_BENEFIT_CODE_COMPENSATION_PENSION);\r\n      break;\r\n    case \"IS_COMPASSIONATE_PENSION_GRANTED\":\r\n      keyValue = String(employee.isCompassionatePensionGranted).toUpperCase();\r\n      break;\r\n    case \"DOB\":\r\n      keyValue = new Date(employee.dob);\r\n      break;\r\n    case \"FAMILY_PENSION_1_END_DATE\":\r\n      keyValue = new Date(getCalculatedBenefitValue(envVariables.EGOV_PENSION_BENEFIT_CODE_FAMILY_PENSION_1_END_DATE));\r\n      break;\r\n    case \"EMPLOYEE_GROUP\":\r\n      keyValue = String(employee.employeeGroup).toUpperCase();\r\n      break;\r\n    case \"DISABILITY_PERCENTAGE\":\r\n      keyValue = Number(employee.employeeDisability.disabilityPercentage);\r\n      break;\r\n    case \"INVALID_PENSION\":\r\n      keyValue = getCalculatedBenefitValue(envVariables.EGOV_PENSION_BENEFIT_CODE_INVALID_PENSION);\r\n      break;\r\n    case \"WOUND_EXTRAORDINARY_PENSION\":\r\n      keyValue = getCalculatedBenefitValue(envVariables.EGOV_PENSION_BENEFIT_CODE_WOUND_EXTRAORDINARY_PENSION);\r\n      break;\r\n    case \"ATTENDANT_ALLOWANCE\":\r\n      keyValue = getCalculatedBenefitValue(envVariables.EGOV_PENSION_BENEFIT_CODE_ATTENDANT_ALLOWANCE);\r\n      break;\r\n    case \"IF_ATTENDANT_ALLOWANCE_GRANTED\":\r\n      keyValue = String(employee.employeeDisability.attendantAllowanceGranted).toUpperCase();\r\n      break;\r\n    case \"IS_ACCIDENTAL_DEATH\":\r\n      keyValue = String(employee.isEmployeeDiesInAccidentalDeath).toUpperCase();\r\n      break;\r\n    case \"IS_INJURED_DIED_IN_TERRORIST_ATTACK\":\r\n      keyValue = String(employee.isEmployeeDiesInTerroristAttack).toUpperCase();\r\n      break;\r\n    case \"FAMILY_PENSION_2_START_DATE\":\r\n      keyValue = new Date(getCalculatedBenefitValue(envVariables.EGOV_PENSION_BENEFIT_CODE_FAMILY_PENSION_2_START_DATE));\r\n      break;\r\n    default:\r\n      if (String(key).includes(\"|+Y|\") || String(key).includes(\"|+M|\") || String(key).includes(\"|+D|\") || String(key).includes(\"|-Y|\") || String(key).includes(\"|-M|\") || String(key).includes(\"|-D|\")) {\r\n        keyValue = new Date(formatFormulaForDate(key, employee, mdms));\r\n      }\r\n      else {\r\n        keyValue = formatFormula(key, employee, mdms);\r\n      }\r\n      break;\r\n\r\n  }\r\n\r\n  return keyValue;\r\n};\r\n\r\nexport const formatFormula = (expression, employee, mdms) => {\r\n  let expressionValue = 0;\r\n  if (expression) {\r\n    expression = String(expression).replace(/\\s/g, '');\r\n    let strParameters = String(expression).replace(' ', '').split(new RegExp('[-+()*/%^]', 'g'));\r\n    for (var i = 0; i < strParameters.length; i++) {\r\n      if (strParameters[i] != \"\") {\r\n        expression = String(expression).replace(strParameters[i], getFormulaValue(strParameters[i], expression, employee, mdms));\r\n      }\r\n\r\n    }\r\n    \r\n    expressionValue = calculateBenefitExpression(expression);\r\n\r\n  }\r\n\r\n  return expressionValue;\r\n};\r\n\r\nexport const formatFormulaToExpression = (expression, employee, mdms) => {\r\n\r\n  if (expression) {\r\n    expression = String(expression).replace(/\\s/g, '');\r\n    let strParameters = String(expression).replace(' ', '').split(new RegExp('[-+()*/%^]', 'g'));\r\n    for (var i = 0; i < strParameters.length; i++) {\r\n      if (strParameters[i] != \"\") {\r\n        expression = String(expression).replace(strParameters[i], getFormulaValue(strParameters[i], expression, employee, mdms));\r\n      }\r\n    }\r\n  }\r\n\r\n  return expression;\r\n};\r\n\r\nexport const getFormulaValue = (parameter, expression, employee, mdms) => {\r\n  let parameterValue = parameter;\r\n  switch (parameter) {\r\n    case \"|YEAR_OF_SERVICE|\":\r\n      parameterValue = getYearOfService(employee);\r\n      break;\r\n    case \"|LPD|\":\r\n      parameterValue = Number(employee.lpd);\r\n      break;\r\n    case \"|IR|\":\r\n      parameterValue = getCalculatedBenefitValue(envVariables.EGOV_PENSION_BENEFIT_CODE_IR);\r\n      break;\r\n    case \"|COMMUTATION_PENSION|\":\r\n      parameterValue = getCalculatedBenefitValue(envVariables.EGOV_PENSION_BENEFIT_CODE_COMMUTATION_PENSION);\r\n      break;\r\n    case \"|BASIC_PENSION|\":\r\n      parameterValue = getCalculatedBenefitValue(envVariables.EGOV_PENSION_BENEFIT_CODE_BASIC_PENSION);\r\n      break;\r\n    case \"|PROVISIONAL_PENSION|\":\r\n      parameterValue = getCalculatedBenefitValue(envVariables.EGOV_PENSION_BENEFIT_CODE_PROVISIONAL_PENSION);\r\n      break;\r\n    case \"|PENSION|\":\r\n      parameterValue = getCalculatedBenefitValue(envVariables.EGOV_PENSION_BENEFIT_CODE_PENSION);\r\n      break;\r\n    case \"|PENSION_DEDUCTION|\":\r\n      parameterValue = getCalculatedBenefitValue(envVariables.EGOV_PENSION_BENEFIT_CODE_PENSION_DEDUCTION);\r\n      break;\r\n    case \"|COMMUTATION_VALUE|\":\r\n      parameterValue = getCalculatedBenefitValue(envVariables.EGOV_PENSION_BENEFIT_CODE_COMMUTATION_VALUE);\r\n      break;\r\n    case \"|COMMUTED_PENSION|\":\r\n      parameterValue = getCalculatedBenefitValue(envVariables.EGOV_PENSION_BENEFIT_CODE_COMMUTED_PENSION);\r\n      break;\r\n    case \"|DA|\":\r\n      parameterValue = getCalculatedBenefitValue(envVariables.EGOV_PENSION_BENEFIT_CODE_DA);\r\n      break;\r\n    case \"|PENSION_DA|\":\r\n      parameterValue = getCalculatedBenefitValue(envVariables.EGOV_PENSION_BENEFIT_CODE_PENSION_DA);\r\n      break;\r\n    case \"|DCRG|\":\r\n      parameterValue = getCalculatedBenefitValue(envVariables.EGOV_PENSION_BENEFIT_CODE_DCRG);\r\n      break;\r\n    case \"|ADDITIONAL_PENSION|\":\r\n      parameterValue = getCalculatedBenefitValue(envVariables.EGOV_PENSION_BENEFIT_CODE_ADDITIONAL_PENSION);\r\n      break;\r\n    case \"|COMPASSIONATE_PENSION|\":\r\n      parameterValue = getCalculatedBenefitValue(envVariables.EGOV_PENSION_BENEFIT_CODE_COMPASSIONATE_PENSION);\r\n      break;\r\n    case \"|COMPENSATION_PENSION|\":\r\n      parameterValue = getCalculatedBenefitValue(envVariables.EGOV_PENSION_BENEFIT_CODE_COMPENSATION_PENSION);\r\n      break;\r\n    case \"|NET_DEDUCTION|\":\r\n      parameterValue = getCalculatedBenefitValue(envVariables.EGOV_PENSION_BENEFIT_CODE_NET_DEDUCTION);\r\n      break;\r\n    case \"|TOTAL_PENSION|\":\r\n      parameterValue = getCalculatedBenefitValue(envVariables.EGOV_PENSION_BENEFIT_CODE_TOTAL_PENSION);\r\n      break;\r\n    case \"|FINAL_CALCULATED_PENSION|\":\r\n      parameterValue = getCalculatedBenefitValue(envVariables.EGOV_PENSION_BENEFIT_CODE_FINAL_CALCULATED_PENSION);\r\n      break;\r\n    case \"|DCRG_DUES_DEDUCTION|\":\r\n      parameterValue = getCalculatedBenefitValue(envVariables.EGOV_PENSION_BENEFIT_CODE_DCRG_DUES_DEDUCTION);\r\n      break;\r\n    case \"|COMMUTATION_PERCENTAGE|\":\r\n      parameterValue = getCommutationPercentage(employee, mdms);\r\n      break;\r\n    case \"|COMMUTATION_MULTIPLIER|\":\r\n      parameterValue = getCommutationMultiplier(employee, mdms);\r\n      break;\r\n    case \"|DA_PERCENTAGE|\":\r\n      parameterValue = getDAPercentage(employee, mdms);\r\n      break;\r\n    case \"|IR_PERCENTAGE|\":\r\n      parameterValue = getIRPercentage(employee, mdms);\r\n      break;\r\n    case \"|ADDITIONAL_PENSION_PERCENTAGE|\":\r\n      parameterValue = getAdditionalPensionPercentage(employee, mdms);\r\n      break;\r\n    case \"|DAILY_WAGER_10_YEAR_PERMANENT_DATE|\":\r\n      parameterValue = getPensionConfigurationValue(\"DAILY_WAGER_10_YEAR_PERMANENT_DATE\", mdms);\r\n      break;\r\n    case \"|DOJ|\":\r\n      parameterValue = getDOJ(employee);\r\n      break;\r\n    case \"|DOD|\":\r\n      parameterValue = new Date(employee.dateOfDeath);\r\n      break;\r\n    case \"|OVERPAYMENT|\":\r\n      parameterValue = Number(employee.overPayment);\r\n      break;\r\n    case \"|IT|\":\r\n      parameterValue = Number(employee.incomeTax);\r\n      break;\r\n    case \"|CESS|\":\r\n      parameterValue = Number(employee.cess);\r\n      break;\r\n    case \"|MR|\":\r\n      parameterValue = Number(employee.medicalRelief);\r\n      break;\r\n    case \"|FMA|\":\r\n      parameterValue = Number(employee.fma);\r\n      break;\r\n    case \"|MISC|\":\r\n      parameterValue = Number(employee.miscellaneous);\r\n      break;\r\n    case \"|FAMILY_PENSION_1|\":\r\n      parameterValue = getCalculatedBenefitValue(envVariables.EGOV_PENSION_BENEFIT_CODE_FAMILY_PENSION_1);\r\n      break;\r\n    case \"|ADDITIONAL_FAMILY_PENSION_1|\":\r\n      parameterValue = getCalculatedBenefitValue(envVariables.EGOV_PENSION_BENEFIT_CODE_ADDITIONAL_FAMILY_PENSION_1);\r\n      break;\r\n    case \"|ADDITIONAL_PENSION_PERCENTAGE_FOR_FAMILY|\":\r\n      parameterValue = getAdditionalPensionPercentageForFamily(employee.dependents, mdms);\r\n      break;\r\n    case \"|DOR|\":\r\n      parameterValue = new Date(employee.dateOfRetirement);\r\n      break;\r\n    case \"|HALF_YEAR_OF_SERVICE|\":\r\n      parameterValue = getHalfYearOfService(employee);\r\n      break;\r\n    case \"|PENSIONER_FAMILY_PENSION|\":\r\n      parameterValue = getCalculatedBenefitValue(envVariables.EGOV_PENSION_BENEFIT_CODE_PENSIONER_FAMILY_PENSION);\r\n      break;\r\n    case \"|PENSION_IR|\":\r\n      parameterValue = getCalculatedBenefitValue(envVariables.EGOV_PENSION_BENEFIT_CODE_PENSION_IR);\r\n      break;\r\n    case \"|ONE_FORTH_HALF_YEAR_OF_SERVICE|\":\r\n      parameterValue = getCalculatedBenefitValue(envVariables.EGOV_PENSION_BENEFIT_CODE_ONE_FORTH_HALF_YEAR_OF_SERVICE);\r\n      break;\r\n    case \"|INVALID_PENSION|\":\r\n      parameterValue = getCalculatedBenefitValue(envVariables.EGOV_PENSION_BENEFIT_CODE_INVALID_PENSION);\r\n      break;\r\n    case \"|WOUND_EXTRAORDINARY_PENSION|\":\r\n      parameterValue = getCalculatedBenefitValue(envVariables.EGOV_PENSION_BENEFIT_CODE_WOUND_EXTRAORDINARY_PENSION);\r\n      break;\r\n    case \"|APPROVED_WOUND_EXTRAORDINARY_PENSION|\":\r\n      parameterValue = Number(employee.employeeDisability.woundExtraordinaryPension);\r\n      break;\r\n    case \"|ATTENDANT_ALLOWANCE|\":\r\n      parameterValue = getCalculatedBenefitValue(envVariables.EGOV_PENSION_BENEFIT_CODE_ATTENDANT_ALLOWANCE);\r\n      break;\r\n    case \"|DISABILITY_PERCENTAGE|\":\r\n      parameterValue = Number(employee.employeeDisability.disabilityPercentage);\r\n      break;\r\n    case \"|DUES_AMOUNT|\":\r\n      parameterValue = Number(employee.dues);\r\n      break;\r\n    case \"|FAMILY_PENSION_2_START_DATE|\":\r\n      parameterValue = new Date(getCalculatedBenefitValue(envVariables.EGOV_PENSION_BENEFIT_CODE_FAMILY_PENSION_2_START_DATE));\r\n      break;\r\n\r\n  }\r\n\r\n  return parameterValue;\r\n};\r\n\r\nexport const calculateBenefitExpression = (expression) => {\r\n  let result = 0;\r\n  //result=Math.ceil(Number(math.evaluate(expression)));\r\n  result = Number(math.evaluate(expression));\r\n  return result;\r\n};\r\n\r\nexport const getAdjustedValue = (benefitValue, adjustmentType, adjustedValue) => {\r\n  let finalBenefitValue = Number(benefitValue);\r\n\r\n  switch (String(adjustmentType).toUpperCase()) {\r\n    case \"DEDUCTION\":\r\n      finalBenefitValue = Number(finalBenefitValue) - Number(adjustedValue);\r\n      break;\r\n    case \"ADDITION\":\r\n      finalBenefitValue = Number(finalBenefitValue) + Number(adjustedValue);\r\n      break;\r\n\r\n  }\r\n\r\n  return finalBenefitValue;\r\n};\r\n\r\nexport const getCalculatedBenefitValue = (benefitCode) => {\r\n  let benefitValue;\r\n  let benefit = filter(selectedRules, function (x) { return x.benefitCode == benefitCode; });\r\n  if (benefit && benefit.length > 0) {\r\n    benefitValue = benefit[0].finalBenefitValue;\r\n  }\r\n  switch (benefitCode) {\r\n    case envVariables.EGOV_PENSION_BENEFIT_CODE_FAMILY_PENSION_1_START_DATE:\r\n    case envVariables.EGOV_PENSION_BENEFIT_CODE_FAMILY_PENSION_1_END_DATE:\r\n    case envVariables.EGOV_PENSION_BENEFIT_CODE_FAMILY_PENSION_2_START_DATE:\r\n      benefitValue = benefitValue;\r\n      break;\r\n    default:\r\n      benefitValue = Number(benefitValue);\r\n      break;\r\n\r\n\r\n  }\r\n\r\n  return benefitValue;\r\n};\r\n\r\nexport const getNotifications = (employee, mdms) => {\r\n  let selectedNotifications = [];\r\n  const notifications = get(mdms, \"MdmsRes.pension.notifications\");\r\n  //const notifications=get(mdms,\"notifications\");\r\n\r\n  for (var i = 0; i < notifications.length; i++) {\r\n    let text = null;\r\n    text = evaluateNotificationPreConditions(notifications[i].preConditions, employee, mdms);\r\n\r\n    //conditions satisfied\r\n    if (text != null) {\r\n      let notification = {\r\n        notificationCode: notifications[i].notificationCode,\r\n        notificationText: text\r\n      };\r\n\r\n      selectedNotifications.push(notification);\r\n    }\r\n\r\n  }\r\n\r\n  return selectedNotifications;\r\n};\r\n\r\nlet notificationText = null;\r\nexport const evaluateNotificationPreConditions = (conditions, employee, mdms) => {\r\n   \r\n  let isPreConditions = false;\r\n  for (var i = 0; i < conditions.length; i++) {\r\n    if (conditions[i].preConditions != null) {\r\n      isPreConditions = calculateConditionExpression(conditions[i].preConditions, employee, mdms);\r\n      if (isPreConditions) {\r\n        if (conditions[i].notificationText != null) {\r\n          notificationText = conditions[i].notificationText;\r\n          break;\r\n        }\r\n        else {\r\n          notificationText = null;\r\n          let values = conditions[i].values;\r\n          evaluateNotificationPreConditions(values, employee, mdms);\r\n        }\r\n      }\r\n      else {\r\n        notificationText = null;\r\n      }\r\n    }\r\n\r\n  }\r\n  return notificationText;\r\n};\r\n\r\nexport const getEmployeeType = (employee, mdms) => {\r\n  const mdmsEmployeeType = get(mdms, \"MdmsRes.pension.employeeType\");\r\n  //const mdmsEmployeeType=get(mdms,\"employeeType\"); \r\n  let employeeType = null;\r\n  for (var i = 0; i < mdmsEmployeeType[0].preConditions.length; i++) {\r\n    let preCondition = mdmsEmployeeType[0].preConditions[i];\r\n    employeeType = evaluateEmployeeTypePreCondition(preCondition, employee, mdms);\r\n    if (employeeType != null) {\r\n      break;\r\n    }\r\n  }\r\n\r\n  return employeeType;\r\n};\r\n\r\nexport const evaluateEmployeeTypePreCondition = (condition, employee, mdms) => {\r\n  let employeeType = null;\r\n  let isPreConditions = false;\r\n  isPreConditions = calculateConditionExpression(condition.preConditions, employee, mdms);\r\n  if (isPreConditions) {\r\n    if (condition.employeeType != null) {\r\n      employeeType = condition.employeeType;\r\n    }\r\n    else {\r\n      let values = condition.values;\r\n      for (var i = 0; i < values.length; i++) {\r\n        let preCondition = values[i];\r\n        employeeType = null;\r\n        employeeType = evaluateEmployeeTypePreCondition(preCondition, employee, mdms);\r\n        if (employeeType != null) {\r\n          break;\r\n        }\r\n      }\r\n\r\n    }\r\n  }\r\n\r\n\r\n  return employeeType;\r\n};\r\n\r\nexport const getDependentEligibilityForGratuity = (dependent, mdms) => {\r\n  const mdmsEligibility = get(mdms, \"MdmsRes.pension.dependentsEligibilityForGratuity\");\r\n  //const mdmsEligibility=get(mdms,\"dependentsEligibilityForGratuity\");\r\n  let eligibility = null;\r\n  for (var i = 0; i < mdmsEligibility[0].preConditions.length; i++) {\r\n    let preCondition = mdmsEligibility[0].preConditions[i];\r\n    eligibility = evaluateDependentEligibilityPreCondition(preCondition, dependent);\r\n    if (eligibility != null) {\r\n      break;\r\n    }\r\n  }\r\n\r\n  return eligibility;\r\n}\r\n\r\nexport const getDependentEligibilityForPension = (dependent, mdms, dependents) => {\r\n  const mdmsEligibility = get(mdms, \"MdmsRes.pension.dependentsEligibilityForPension\");\r\n  //const mdmsEligibility=get(mdms,\"dependentsEligibilityForPension\");\r\n  let eligibility = null;\r\n  for (var i = 0; i < mdmsEligibility[0].preConditions.length; i++) {\r\n    let preCondition = mdmsEligibility[0].preConditions[i];\r\n    eligibility = evaluateDependentEligibilityPreCondition(preCondition, dependent, dependents);\r\n    if (eligibility != null) {\r\n      break;\r\n    }\r\n  }\r\n\r\n  return eligibility;\r\n}\r\n\r\nexport const evaluateDependentEligibilityPreCondition = (condition, dependent, dependents) => {\r\n  let eligibility = null;\r\n  let isPreConditions = false;\r\n  isPreConditions = calculateConditionExpressionForDependentEligibility(condition.preConditions, dependent, dependents);\r\n  if (isPreConditions) {\r\n    if (condition.eligibility != null) {\r\n      eligibility = condition.eligibility;\r\n    }\r\n    else {\r\n      let values = condition.values;\r\n      for (var i = 0; i < values.length; i++) {\r\n        let preCondition = values[i];\r\n        eligibility = null;\r\n        eligibility = evaluateDependentEligibilityPreCondition(preCondition, dependent, dependents);\r\n        if (eligibility != null) {\r\n          break;\r\n        }\r\n      }\r\n\r\n    }\r\n  }\r\n\r\n\r\n  return eligibility;\r\n};\r\n\r\nexport const calculateConditionExpressionForDependentEligibility = (preConditions, dependent, dependents) => {\r\n  \r\n\r\n  let isPreCondition = false;\r\n\r\n  for (var i = 0; i < preConditions.length; i++) {\r\n    let conditionKey = getConditionKeyForDependentEligibility(preConditions[i].key, dependent, dependents);\r\n    let conditionOperator = preConditions[i].operator;\r\n    let conditionValue = preConditions[i].value;\r\n\r\n          \r\n    switch (conditionOperator) {\r\n      case \"==\":\r\n        if (conditionKey == conditionValue) {\r\n          isPreCondition = true;\r\n        }\r\n        break;\r\n      case \"<\":\r\n        if (conditionKey < conditionValue) {\r\n          isPreCondition = true;\r\n        }\r\n        break;\r\n      case \"<=\":\r\n        if (conditionKey <= conditionValue) {\r\n          isPreCondition = true;\r\n        }\r\n        break;\r\n      case \">\":\r\n        if (conditionKey > conditionValue) {\r\n          isPreCondition = true;\r\n        }\r\n        break;\r\n      case \">=\":\r\n        if (conditionKey >= conditionValue) {\r\n          isPreCondition = true;\r\n        }\r\n        break;\r\n      case \"!=\":\r\n        if (conditionKey != conditionValue) {\r\n          isPreCondition = true;\r\n        }\r\n        break;\r\n    }\r\n\r\n    //any of the preConditions satisfied then preConditions also satisfied\r\n    if (isPreCondition) {\r\n      break;\r\n    }\r\n  }\r\n  return isPreCondition;\r\n};\r\n\r\nexport const getConditionKeyForDependentEligibility = (key, dependent, dependents) => {\r\n  let keyValue = \"\";\r\n  switch (key) {\r\n    case \"RELATION\":\r\n    case \"ELIGIBLE_RELATION\":\r\n      keyValue = String(dependent.relationship).toUpperCase();\r\n      break;\r\n    case \"IS_DISABLED\":\r\n      keyValue = String(dependent.isDisabled).toUpperCase();\r\n      break;\r\n    case \"AGE\":\r\n      keyValue = getAge(dependent.dob);\r\n      break;\r\n    case \"IS_ELDEST\":\r\n      keyValue = isEldestDependent(dependent, dependents) == true ? \"TRUE\" : \"FALSE\";\r\n      break;\r\n  }\r\n\r\n  return keyValue;\r\n};\r\n\r\nexport const formatFormulaForDate = (expression, employee, mdms) => {\r\n  let expressionValue;\r\n  if (expression) {\r\n    expression = String(expression).replace(/\\s/g, '');\r\n    let strParameters = String(expression).split(new RegExp('[|]', 'g'));\r\n    let dateValue = new Date(getConditionKey(strParameters[1], employee, mdms));\r\n    let op = strParameters[3];\r\n    let value = Number(strParameters[5]);\r\n    let value2 = 0;\r\n    if(strParameters.length>7){\r\n     value2 = Number(strParameters[7]);\r\n    }\r\n    switch (op) {\r\n      case \"+D\":\r\n        expressionValue = new Date(dateValue.getFullYear(), dateValue.getMonth(), dateValue.getDate() + value, dateValue.getHours(), dateValue.getMinutes());\r\n        break;\r\n      case \"+M\":\r\n        expressionValue = new Date(dateValue.getFullYear(), dateValue.getMonth() + value, dateValue.getDate(), dateValue.getHours(), dateValue.getMinutes());\r\n        break;\r\n      case \"+Y\":\r\n        expressionValue = new Date(dateValue.getFullYear() + value, dateValue.getMonth(), dateValue.getDate(), dateValue.getHours(), dateValue.getMinutes());\r\n        break;\r\n      case \"-D\":\r\n        expressionValue = new Date(dateValue.getFullYear(), dateValue.getMonth(), dateValue.getDate() - value, dateValue.getHours(), dateValue.getMinutes());\r\n        break;\r\n      case \"-M\":\r\n        expressionValue = new Date(dateValue.getFullYear(), dateValue.getMonth() - value, dateValue.getDate(), dateValue.getHours(), dateValue.getMinutes());\r\n        break;\r\n      case \"-Y\":\r\n        expressionValue = new Date(dateValue.getFullYear() - value, dateValue.getMonth(), dateValue.getDate(), dateValue.getHours(), dateValue.getMinutes());\r\n        break;\r\n      case \"+Y-D\":\r\n        expressionValue = new Date(dateValue.getFullYear() + value, dateValue.getMonth(), dateValue.getDate() - value2, dateValue.getHours(), dateValue.getMinutes());\r\n        break;\r\n      default:\r\n        expressionValue = dateValue;\r\n        break;\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n  }\r\n\r\n  return expressionValue;\r\n};\r\n\r\n//Calculate Revised Pension\r\nexport const calculateRevisedPension = (rules, benefits) => {\r\n\r\n  let selectedRules = getPensionRevisionRulesByConditions(rules);\r\n\r\n  \r\n\r\n  for (var i = 0; i < selectedRules.length; i++) {\r\n    let benefitValue = formatFormulaForPensionRevision(selectedRules[i].benefitFormula, benefits, selectedRules);\r\n    selectedRules[i].benefitValue = benefitValue;\r\n    selectedRules[i].finalBenefitValue = benefitValue;\r\n    /*\r\n    switch(String(selectedRules[i].benefitCode).toUpperCase()){ \r\n      case \"TOTAL_PENSION\":\r\n          benefits.totalPension=benefitValue;                  \r\n          break; \r\n        case \"NET_DEDUCTION\":\r\n          benefits.netDeductions=benefitValue;                  \r\n          break; \r\n        case \"FINAL_CALCULATED_PENSION\":\r\n          benefits.finalCalculatedPension=benefitValue;                    \r\n          break; \r\n    } \r\n    */\r\n  }\r\n\r\n  return selectedRules;\r\n};\r\n\r\nexport const getPensionRevisionRulesByConditions = (rules) => {\r\n  \r\n  let benefits = [];\r\n\r\n  for (var i = 0; i < rules.length; i++) {\r\n    \r\n    let benefitFormula = evaluatePreConditions(rules[i].preConditions);\r\n    //conditions satisfied\r\n    if (benefitFormula != null) {\r\n      let benefit = {\r\n        benefitCode: rules[i].benefitCode,\r\n        benefitFormula: benefitFormula,\r\n        benefitValue: 0,\r\n        finalBenefitValue: 0\r\n      };\r\n      benefits.push(benefit);\r\n    }\r\n\r\n  }\r\n\r\n  return benefits;\r\n};\r\n\r\nexport const getFormulaValueForPensionRevision = (parameter, benefits, selectedRules) => {\r\n  let parameterValue = parameter;\r\n  switch (parameter) {\r\n    case \"|BASIC_PENSION|\":\r\n      parameterValue = Number(benefits.basicPension);\r\n      break;\r\n    case \"|PENSION_DA|\":\r\n      parameterValue = Number(benefits.da);\r\n      break;\r\n    case \"|COMMUTED_PENSION|\":\r\n      parameterValue = Number(benefits.commutedPension);\r\n      break;\r\n    case \"|ADDITIONAL_PENSION|\":\r\n      parameterValue = Number(benefits.additionalPension);\r\n      break;\r\n    case \"|PENSION_IR|\":\r\n      parameterValue = Number(benefits.interimRelief);\r\n      break;\r\n    case \"|MR|\":\r\n      parameterValue = Number(benefits.medicalRelief);\r\n      break;\r\n    case \"|FMA|\":\r\n      parameterValue = Number(benefits.fma);\r\n      break;\r\n    case \"|MISC|\":\r\n      parameterValue = Number(benefits.miscellaneous);\r\n      break;\r\n    case \"|PENSION_DEDUCTION|\":\r\n      parameterValue = Number(benefits.pensionDeductions);\r\n      break;\r\n    case \"|OVERPAYMENT|\":\r\n      parameterValue = Number(benefits.overPayment);\r\n      break;\r\n    case \"|IT|\":\r\n      parameterValue = Number(benefits.incomeTax);\r\n      break;\r\n    case \"|CESS|\":\r\n      parameterValue = Number(benefits.cess);\r\n      break;\r\n    case \"|TOTAL_PENSION|\":\r\n      let totalPension = filter(selectedRules, function (x) { return x.benefitCode == envVariables.EGOV_PENSION_BENEFIT_CODE_TOTAL_PENSION; });\r\n      parameterValue = Number(totalPension[0].finalBenefitValue);\r\n      break;\r\n    case \"|NET_DEDUCTION|\":\r\n      let netDeductions = filter(selectedRules, function (x) { return x.benefitCode == envVariables.EGOV_PENSION_BENEFIT_CODE_NET_DEDUCTION; });\r\n      parameterValue = Number(netDeductions[0].finalBenefitValue);\r\n      break;\r\n    case \"|WOUND_EXTRAORDINARY_PENSION|\":\r\n      parameterValue = benefits.woundExtraordinaryPension ? Number(benefits.woundExtraordinaryPension) : 0;\r\n      break;\r\n    case \"|ATTENDANT_ALLOWANCE|\":\r\n      parameterValue = benefits.attendantAllowance ? Number(benefits.attendantAllowance) : 0;\r\n      break;\r\n\r\n  }\r\n\r\n  return parameterValue;\r\n};\r\n\r\nexport const formatFormulaForPensionRevision = (expression, benefits, selectedRules) => {\r\n  let expressionValue = 0;\r\n  if (expression) {\r\n    expression = String(expression).replace(/\\s/g, '');\r\n    let strParameters = String(expression).replace(' ', '').split(new RegExp('[-+()*/%^]', 'g'));\r\n    for (var i = 0; i < strParameters.length; i++) {\r\n      if (strParameters[i] != \"\") {\r\n        expression = String(expression).replace(strParameters[i], getFormulaValueForPensionRevision(strParameters[i], benefits, selectedRules));\r\n      }\r\n\r\n    }\r\n    \r\n    expressionValue = calculateBenefitExpression(expression);\r\n\r\n  }\r\n\r\n  return expressionValue;\r\n};"]}