{"version":3,"sources":["../../src/utils/index.js"],"names":["requestInfoToResponseInfo","requestinfo","success","ResponseInfo","apiId","ver","ts","resMsgId","msgId","status","addQueryArg","url","queries","includes","urlParts","split","path","queryParts","length","forEach","key","query","value","newQuery","push","newUrl","join","convertEpochToDate","dateFromApi","Date","dateEpoch","month","getMonth","day","getDate","year","getFullYear","convertDateToEpoch","dateString","dayStartOrEnd","parts","match","DateObj","UTC","setMinutes","getMinutes","getTimezoneOffset","setHours","getHours","setSeconds","getSeconds","getTime","e","getEpochForDate","dateSplit","date","epochToYmd","et","formatted_date"],"mappings":"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","file":"index.js","sourcesContent":["import uniqBy from \"lodash/uniqBy\";\nimport uniq from \"lodash/uniq\";\nimport get from \"lodash/get\";\nimport findIndex from \"lodash/findIndex\";\nimport isEmpty from \"lodash/isEmpty\";\nimport { httpRequest, httpGetRequest } from \"./api\";\nimport envVariables from \"../envVariables\";\nimport { from } from \"linq\";\n\nexport const requestInfoToResponseInfo = (requestinfo, success) => {\n  let ResponseInfo = {\n    apiId: \"\",\n    ver: \"\",\n    ts: 0,\n    resMsgId: \"\",\n    msgId: \"\",\n    status: \"\"\n  };\n  ResponseInfo.apiId =\n    requestinfo && requestinfo.apiId ? requestinfo.apiId : \"\";\n  ResponseInfo.ver = requestinfo && requestinfo.ver ? requestinfo.ver : \"\";\n  ResponseInfo.ts = requestinfo && requestinfo.ts ? requestinfo.ts : null;\n  ResponseInfo.resMsgId = \"uief87324\";\n  ResponseInfo.msgId =\n    requestinfo && requestinfo.msgId ? requestinfo.msgId : \"\";\n  ResponseInfo.status = success ? \"successful\" : \"failed\";\n\n  return ResponseInfo;\n};\n\nexport const addQueryArg = (url, queries = []) => {\n  if (url && url.includes(\"?\")) {\n    const urlParts = url.split(\"?\");\n    const path = urlParts[0];\n    let queryParts = urlParts.length > 1 ? urlParts[1].split(\"&\") : [];\n    queries.forEach(query => {\n      const key = query.key;\n      const value = query.value;\n      const newQuery = `${key}=${value}`;\n      queryParts.push(newQuery);\n    });\n    const newUrl = path + \"?\" + queryParts.join(\"&\");\n    return newUrl;\n  } else {\n    return url;\n  }\n};\n\nexport const convertEpochToDate = dateEpoch => {  \n  const dateFromApi = new Date(dateEpoch);  \n  let month = dateFromApi.getMonth() + 1;\n  let day = dateFromApi.getDate();\n  let year = dateFromApi.getFullYear();\n  month = (month > 9 ? \"\" : \"0\") + month;\n  day = (day > 9 ? \"\" : \"0\") + day;\n  return `${day}/${month}/${year}`;\n};\n\nexport const convertDateToEpoch = (dateString, dayStartOrEnd = \"dayend\") => {\n  //example input format : \"2018-10-02\"\n  try {\n    \n    const parts = dateString.match(/(\\d{4})-(\\d{1,2})-(\\d{1,2})/);\n    const DateObj = new Date(Date.UTC(parts[1], parts[2] - 1, parts[3]));\n    DateObj.setMinutes(DateObj.getMinutes() + DateObj.getTimezoneOffset());\n    if (dayStartOrEnd === \"dayend\") {\n      DateObj.setHours(DateObj.getHours() + 24);\n      DateObj.setSeconds(DateObj.getSeconds() - 1);\n    }\n    return DateObj.getTime();\n  } catch (e) {\n    return dateString;\n  }\n};\n\nexport const getEpochForDate = date => {\n  const dateSplit = date.split(\"/\");\n  return new Date(dateSplit[2], dateSplit[1] - 1, dateSplit[0]).getTime();\n};\n\nexport const epochToYmd = et => {\n  // Return null if et already null\n  if (!et) return null;\n  // Return the same format if et is already a string (boundary case)\n  if (typeof et === \"string\") return et;\n  let date = new Date(et);\n  let day = date.getDate() < 10 ? `0${date.getDate()}` : date.getDate();\n  let month =\n    date.getMonth() + 1 < 10 ? `0${date.getMonth() + 1}` : date.getMonth() + 1;\n  // date = `${date.getFullYear()}-${month}-${day}`;\n  var formatted_date = date.getFullYear() + \"-\" + month + \"-\" + day;\n  return formatted_date;\n};\n\n\n\n\n\n"]}