{"version":3,"sources":["../src/index.js"],"names":["require","swaggerUi","swaggerDocument","createTerminus","app","use","exposedHeaders","config","corsHeaders","bodyParser","json","limit","bodyLimit","serve","setup","err","req","res","next","logger","error","errorType","status","data","errorReponse","send","listen","envVariables","SERVER_PORT","debug"],"mappings":";;;;;;AAGA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAdAA,QAAQ,qBAAR;AACAA,QAAQ,gBAAR;AACA;;;AAcA,IAAIC,YAAYD,QAAQ,oBAAR,CAAhB;AAAA,IACEE,kBAAkBF,QAAQ,gBAAR,CADpB;;eAE2BA,QAAQ,mBAAR,C;IAAnBG,c,YAAAA,c;;AAER;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,MAAM,wBAAV;AACA;;AAEA;AACA;;AAEA;AACAA,IAAIC,GAAJ,CAAQ,sBAAO,KAAP,CAAR;;AAEA;AACAD,IAAIC,GAAJ,CACE,oBAAK;AACHC,kBAAgBC,iBAAOC;AADpB,CAAL,CADF;;AAMAJ,IAAIC,GAAJ,CACEI,qBAAWC,IAAX,CAAgB;AACdC,SAAOJ,iBAAOK;AADA,CAAhB,CADF;;AAMAR,IAAIC,GAAJ,CAAQ,uBAAR;;AAEAD,IAAIC,GAAJ,CAAQ,WAAR,EAAqBJ,UAAUY,KAA/B,EAAsCZ,UAAUa,KAAV,CAAgBZ,eAAhB,CAAtC;;AAEA;AACAE,IAAIC,GAAJ,CAAQ,2BAAR;;AAEA;;AAEA;;AAEAD,IAAIC,GAAJ,CAAQ,GAAR,EAAa,oBAAb;;AAEA;AACAD,IAAIC,GAAJ,CAAQ,UAACU,GAAD,EAAMC,GAAN,EAAWC,GAAX,EAAgBC,IAAhB,EAAwB;;AAG9BC,mBAAOC,KAAP,CAAaL,GAAb;;AAEA,MAAI,CAACA,IAAIM,SAAT,EAAoB;AAClBJ,QAAIK,MAAJ,CAAWP,IAAIO,MAAf,EAAuBZ,IAAvB,CAA4BK,IAAIQ,IAAhC;AACD,GAFD,MAGK,IAAIR,IAAIM,SAAJ,IAAe,QAAnB,EAA6B;AAChCJ,QAAIK,MAAJ,CAAW,GAAX,EAAgBZ,IAAhB,CAAqBK,IAAIS,YAAzB;AACD,GAFI,MAGA;AACHP,QAAIK,MAAJ,CAAW,GAAX;AACAL,QAAIQ,IAAJ,CAAS,6BAAT;AACD;AACF,CAfD;;AAiBA;;;;;AAKArB,IAAIsB,MAAJ,CAAWC,uBAAaC,WAAxB,EAAqC,YAAM;AACzCT,mBAAOU,KAAP,sBAAgCF,uBAAaC,WAA7C;AACD,CAFD;;kBAMexB,G","file":"index.js","sourcesContent":["require(\"babel-core/register\");\nrequire(\"babel-polyfill\");\n//import http from \"http\";\nimport express from \"express\";\nimport cors from \"cors\";\nimport morgan from \"morgan\";\nimport bodyParser, { json } from \"body-parser\";\nimport db from \"./db\";\nimport middleware from \"./middleware\";\nimport api from \"./api\";\nimport config from \"./config.json\";\nimport tracer from \"./middleware/tracer\";\nimport terminusOptions from \"./utils/health\";\nimport envVariables from \"./envVariables\";\nimport logger from \"./config/logger\";\n\nvar swaggerUi = require(\"swagger-ui-express\"),\n  swaggerDocument = require(\"./swagger.json\");\nconst { createTerminus } = require(\"@godaddy/terminus\");\n\n// const validator = require('swagger-express-validator');\n\n// const opts = {\n//   schema:swaggerDocument, // Swagger schema\n//   preserveResponseContentType: false, // Do not override responses for validation errors to always be JSON, default is true\n//   returnRequestErrors: true, // Include list of request validation errors with response, default is false\n//   returnResponseErrors: true, // Include list of response validation errors with response, default is false\n//   validateRequest: true,\n//   validateResponse: true,\n//   requestValidationFn: (req, data, errors) => {\n//     console.log(`failed request validation: ${req.method} ${req.originalUrl}\\n ${util.inspect(errors)}`)\n//   },\n//   responseValidationFn: (req, data, errors) => {\n//     console.log(`failed response validation: ${req.method} ${req.originalUrl}\\n ${util.inspect(errors)}`)\n//   },\n//   async: true\n// };\n\nlet app = express();\n//app.server = http.createServer(app);\n\n// Enable health checks and kubernetes shutdown hooks\n//createTerminus(app.server, terminusOptions);\n\n// logger\napp.use(morgan(\"dev\"));\n\n// 3rd party middleware\napp.use(\n  cors({\n    exposedHeaders: config.corsHeaders\n  })\n);\n\napp.use(\n  bodyParser.json({\n    limit: config.bodyLimit\n  })\n);\n\napp.use(tracer());\n\napp.use(\"/api-docs\", swaggerUi.serve, swaggerUi.setup(swaggerDocument));\n\n// internal middleware\napp.use(middleware());\n\n// app.use(validator(opts));\n\n// api router\n\napp.use(\"/\", api());\n\n//error handler middleware\napp.use((err, req, res, next) =>{\n\n  \n  logger.error(err);\n\n  if (!err.errorType) {\n    res.status(err.status).json(err.data);\n  }\n  else if (err.errorType==\"custom\") {\n    res.status(400).json(err.errorReponse);\n  }\n  else {\n    res.status(500);\n    res.send(\"Oops, something went wrong.\");\n  }\n});\n\n/* app.server.listen(envVariables.SERVER_PORT, () => {\n  logger.debug(`Started on port ${app.server.address().port}`);\n});\n */\n\napp.listen(envVariables.SERVER_PORT, () => {\n  logger.debug(`Started on port ${envVariables.SERVER_PORT}`);\n});\n\n\n\nexport default app;\n\n"]}