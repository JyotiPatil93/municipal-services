{"version":3,"sources":["../../src/api/calculateBenefit.js"],"names":["asyncHandler","require","api","post","res","next","body","RequestInfo","ProcessInstances","tenantId","mdms","pensionBenefits","rules","benefits","employee","employeeType","notifications","notificationText","i","length","pensionCalculationDetails","nqsYearSystem","nqsMonthSystem","nqsDaySystem","basicPensionSystem","pensionDeductionsSystem","additionalPensionSystem","commutedPensionSystem","commutedValueSystem","familyPensionISystem","familyPensionIISystem","dcrgSystem","netDeductionsSystem","totalPensionSystem","finalCalculatedPensionSystem","interimReliefSystem","interimReliefLpdSystem","daSystem","daLpdSystem","duesDeductionsSystem","compassionatePensionSystem","compensationPensionSystem","terminalBenefitSystem","finalCalculatedGratuitySystem","familyPensionIStartDateSystem","familyPensionIEndDateSystem","familyPensionIIStartDateSystem","exGratiaSystem","pensionerFamilyPensionSystem","additionalPensionerFamilyPensionSystem","employeeBenefits","push","response","ResponseInfo","EmployeeBenefits","json"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AACA,IAAMA,eAAeC,QAAQ,uBAAR,CAArB;;kBAGe,YAAM;AACnB,MAAIC,MAAM,sBAAV;AACAA,MAAIC,IAAJ,CACE,oBADF,EAEEH;AAAA,wFAAa,wBAAiBI,GAAjB,EAAsBC,IAAtB;AAAA,UAASC,IAAT,SAASA,IAAT;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAMI,wBAASA,KAAKC,WAAd,EAA2BD,KAAKE,gBAAL,CAAsB,CAAtB,EAAyBC,QAApD,CANJ;;AAAA;AAMTC,kBANS;AAOPC,6BAPO,GAOS,mBAAID,IAAJ,EAAS,0BAAT,CAPT;AASTE,mBATS,GASH;AACNC,0BAAUF;AADJ,eATG;AAcTG,sBAdS,GAcAR,KAAKE,gBAAL,CAAsB,CAAtB,EAAyBM,QAdzB;AAeb;;AACIC,0BAhBS,GAgBI,yCAAgBD,QAAhB,EAAyBJ,IAAzB,CAhBJ;;AAiBbI,uBAASC,YAAT,GAAsBA,YAAtB;;AAGIF,sBApBS,GAoBA,0CAAiBD,KAAjB,EAAuBE,QAAvB,EAAgCJ,IAAhC,CApBA;AAsBTM,2BAtBS,GAsBK,0CAAiBF,QAAjB,EAA0BJ,IAA1B,CAtBL;AAuBTO,8BAvBS,GAuBQ,EAvBR;;AAwBb,mBAASC,CAAT,GAAa,CAAb,EAAgBA,IAAIF,cAAcG,MAAlC,EAA0CD,GAA1C,EAA+C;AAC7CD,wCAAoBA,gBAApB,GAAuCD,cAAcE,CAAd,EAAiBD,gBAAxD;AACD;;AAEGG,uCA5BS;AA6BXC,+BAAe,mCAAWP,QAAX,CA7BJ;AA8BXQ,gCAAgB,oCAAYR,QAAZ,CA9BL;AA+BXS,8BAAc,kCAAUT,QAAV,CA/BH;AAgCXU,oCAAoB,CAhCT;AAiCXC,yCAAyB,CAjCd;AAkCXC,yCAAyB,CAlCd;AAmCXC,uCAAuB,CAnCZ;AAoCXC,qCAAqB,CApCV;AAqCXC,sCAAsB,CArCX;AAsCXC,uCAAuB,CAtCZ;AAuCXC,4BAAY,CAvCD;AAwCXC,qCAAqB,CAxCV;AAyCXC,oCAAoB,CAzCT;AA0CXC,8CAA8B,CA1CnB;AA2CXC,qCAAqB,CA3CV;AA4CXC,wCAAwB,CA5Cb;AA6CXC,0BAAU,CA7CC;AA8CXC,6BAAa,CA9CF;AA+CXC,sCAAsB,CA/CX;AAgDXC,4CAA4B,CAhDjB;AAiDXC,2CAA2B,CAjDhB;AAkDXC,uCAAuB,CAlDZ;AAmDXC,+CAA+B,CAnDpB;AAoDXC,+CAA+B,IApDpB;AAqDXC,6CAA6B,IArDlB;AAsDXC,gDAAgC,IAtDrB;AAuDXC,gCAAgB,CAvDL;AAwDXC,8CAA8B,CAxDnB;AAyDXC,wDAAwC;AAzD7B,4FA0DS,CA1DT,oFA2De,CA3Df,gFA4DW,CA5DX,2FA6DsB,CA7DtB,oFA8De,CA9Df,yEA+DI,mCAAWnC,QAAX,CA/DJ,0EAgEK,oCAAYA,QAAZ,CAhEL,wEAiEG,kCAAUA,QAAV,CAjEH,kFAkEaG,gBAlEb;AAsETiC,8BAtES,GAsEQ,EAtER;;AAuEbA,+BAAiBC,IAAjB,CAAsB;AACpBtC,0BAAUA,QADU;AAEpBO,2CAA2BA,yBAFP,CAEgC;AACpD;;AAHoB,eAAtB;;AAOIgC,sBA9ES,GA8EE;AACbC,8BAAc,sCAA0B/C,KAAKC,WAA/B,EAA4C,IAA5C,CADD;AAEb+C,kCAAiBJ;AAFJ,eA9EF;;AAkFb9C,kBAAImD,IAAJ,CAASH,QAAT;;AAlFa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAb;;AAAA;AAAA;AAAA;AAAA,MAFF;AAwFA,SAAOlD,GAAP;AACD,C","file":"calculateBenefit.js","sourcesContent":["import { Router } from \"express\";\r\nimport { calculateBenefit,getNotifications,getEmployeeType} from \"../utils/calculationManager\";\r\nimport { getNQSYear,getNQSMonth,getNQSDay, getGQSYear,getGQSMonth,getGQSDay} from \"../utils/calculationHelper\";\r\nimport envVariables from \"../envVariables\";\r\nimport { requestInfoToResponseInfo} from \"../utils\";\r\nimport mdmsData from \"../utils/mdmsData\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport set from \"lodash/set\";\r\nimport get from \"lodash/get\";\r\nconst asyncHandler = require(\"express-async-handler\");\r\n\r\n\r\nexport default () => {\r\n  let api = Router();\r\n  api.post(\r\n    \"/_calculateBenefit\",\r\n    asyncHandler(async ({ body }, res, next) => {\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    let mdms = await mdmsData(body.RequestInfo, body.ProcessInstances[0].tenantId);\r\n    const pensionBenefits=get(mdms,\"MdmsRes.pension.benefits\");    \r\n    \r\n    let rules={\r\n        benefits: pensionBenefits\r\n    };\r\n    \r\n    \r\n    let employee=body.ProcessInstances[0].employee;\r\n    //employee type should be as per rules\r\n    let employeeType=getEmployeeType(employee,mdms);\r\n    employee.employeeType=employeeType;\r\n    \r\n            \r\n    let benefits=calculateBenefit(rules,employee,mdms);\r\n    \r\n    let notifications=getNotifications(employee,mdms);\r\n    let notificationText=\"\";\r\n    for (var i = 0; i < notifications.length; i++) {    \r\n      notificationText=`${notificationText}${notifications[i].notificationText} `\r\n    }\r\n      \r\n    let pensionCalculationDetails={\r\n      nqsYearSystem: getNQSYear(employee),\r\n      nqsMonthSystem: getNQSMonth(employee),\r\n      nqsDaySystem: getNQSDay(employee),\r\n      basicPensionSystem: 0,\r\n      pensionDeductionsSystem: 0,\r\n      additionalPensionSystem: 0,\r\n      commutedPensionSystem: 0,\r\n      commutedValueSystem: 0,\r\n      familyPensionISystem: 0,\r\n      familyPensionIISystem: 0,\r\n      dcrgSystem: 0,\r\n      netDeductionsSystem: 0,\r\n      totalPensionSystem: 0,\r\n      finalCalculatedPensionSystem: 0,\r\n      interimReliefSystem: 0,\r\n      interimReliefLpdSystem: 0,\r\n      daSystem: 0,\r\n      daLpdSystem: 0,\r\n      duesDeductionsSystem: 0,\r\n      compassionatePensionSystem: 0,\r\n      compensationPensionSystem: 0,\r\n      terminalBenefitSystem: 0,\r\n      finalCalculatedGratuitySystem: 0,        \r\n      familyPensionIStartDateSystem: null,\r\n      familyPensionIEndDateSystem: null,\r\n      familyPensionIIStartDateSystem: null,\r\n      exGratiaSystem: 0,\r\n      pensionerFamilyPensionSystem: 0,\r\n      additionalPensionerFamilyPensionSystem: 0,\r\n      totalPensionSystem: 0,\r\n      provisionalPensionSystem: 0,\r\n      invalidPensionSystem: 0,\r\n      woundExtraordinaryPensionSystem: 0,\r\n      attendantAllowanceSystem: 0,\r\n      gqsYearSystem: getGQSYear(employee),\r\n      gqsMonthSystem: getGQSMonth(employee),\r\n      gqsDaySystem: getGQSDay(employee),   \r\n      notificationTextSystem: notificationText    \r\n    };\r\n    \r\n    \r\n    let employeeBenefits=[];\r\n    employeeBenefits.push({\r\n      benefits: benefits,\r\n      pensionCalculationDetails: pensionCalculationDetails//,\r\n      //notifications: notifications\r\n\r\n    });\r\n     \r\n    let response = {        \r\n      ResponseInfo: requestInfoToResponseInfo(body.RequestInfo, true),\r\n      EmployeeBenefits:employeeBenefits\r\n    };\r\n    res.json(response);\r\n           \r\n    })\r\n  );\r\n  return api;\r\n};\r\n"]}