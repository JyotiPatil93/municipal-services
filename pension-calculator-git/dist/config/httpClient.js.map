{"version":3,"sources":["../../src/config/httpClient.js"],"names":["createAxiosInstance","instance","axios","create","baseURL","hostURL","headers","interceptors","request","use","config","logRequest","error","logErrorResponse","Promise","reject","response","logResponse","url","method","data","envVariables","HTTP_CLIENT_DETAILED_LOGGING_ENABLED","logger","info","JSON","stringify","res","status","includes"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;;;AAGA,IAAMA,sBAAsB,SAAtBA,mBAAsB,UAAW;AACrC,MAAIC,WAAWC,gBAAMC,MAAN,CAAa;AAC1BC,aAASC,OADiB;AAE1BC,aAAS;AACP,sBAAgB;AADT;AAFiB,GAAb,CAAf;;AAOA;AACAL,WAASM,YAAT,CAAsBC,OAAtB,CAA8BC,GAA9B,CACE,UAASC,MAAT,EAAiB;AACfC,eAAWD,MAAX;AACA,WAAOA,MAAP;AACD,GAJH,EAKE,UAASE,KAAT,EAAgB;AACdC,qBAAiBD,KAAjB;AACA;AACA,WAAOE,QAAQC,MAAR,CAAeH,KAAf,CAAP;AACD,GATH;;AAYA;AACAX,WAASM,YAAT,CAAsBS,QAAtB,CAA+BP,GAA/B,CACE,UAASO,QAAT,EAAmB;AACjB;AACAC,gBAAYD,QAAZ;AACA,WAAOA,QAAP;AACD,GALH,EAME,UAASJ,KAAT,EAAgB;AACdC,qBAAiBD,KAAjB;AACA;AACA,WAAOE,QAAQC,MAAR,CAAeH,KAAf,CAAP;AACD,GAVH;AAYA,SAAOX,QAAP;AACD,CAnCD;AAoCA,SAASU,UAAT,CAAoBD,MAApB,EAA4B;AAAA,MAClBQ,GADkB,GACIR,MADJ,CAClBQ,GADkB;AAAA,MACbC,MADa,GACIT,MADJ,CACbS,MADa;AAAA,MACLC,IADK,GACIV,MADJ,CACLU,IADK;;AAE1B,MAAIC,uBAAaC,oCAAjB,EAAuD;AACrDC,qBAAOC,IAAP,yBACwBN,GADxB,mBACyCC,MADzC,mBAC6DM,KAAKC,SAAL,CACzDN,IADyD,CAD7D;AAKD,GAND,MAMO;AACLG,qBAAOC,IAAP,yBAAkCN,GAAlC,mBAAmDC,MAAnD;AACD;AACF;;AAED,SAASF,WAAT,CAAqBU,GAArB,EAA0B;AAAA,MAChBC,MADgB,GACkBD,GADlB,CAChBC,MADgB;AAAA,MACRtB,OADQ,GACkBqB,GADlB,CACRrB,OADQ;AAAA,MACCc,IADD,GACkBO,GADlB,CACCP,IADD;AAAA,MACOV,MADP,GACkBiB,GADlB,CACOjB,MADP;;AAExB,MACEW,uBAAaC,oCAAb,IACAhB,QAAQ,cAAR,CADA,IAEAA,QAAQ,cAAR,EAAwBuB,QAAxB,CAAiC,kBAAjC,CAHF,EAIE;AACAN,qBAAOC,IAAP,oBAEId,OAAOQ,GAFX,uBAGoBU,MAHpB,kBAGuCH,KAAKC,SAAL,CAAeN,IAAf,CAHvC;AAKD,GAVD,MAUO;AACLG,qBAAOC,IAAP,6BAAsCd,OAAOQ,GAA7C;AACD;AACF;;AAED,SAASL,gBAAT,CAA0BD,KAA1B,EAAiC;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAW,mBAAOX,KAAP,CAAaA,KAAb;AACD;;kBAEcZ,mB","file":"httpClient.js","sourcesContent":["import axios from \"axios\";\nimport logger from \"./logger\";\nimport envVariables from \"../envVariables\";\n\n\nconst createAxiosInstance = hostURL => {\n  let instance = axios.create({\n    baseURL: hostURL,\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  });\n\n  // add interceptor to log before request is made\n  instance.interceptors.request.use(\n    function(config) {\n      logRequest(config);\n      return config;\n    },\n    function(error) {\n      logErrorResponse(error);\n      // Do something with request error\n      return Promise.reject(error);\n    }\n  );\n\n  //add interceptor to log after response is received\n  instance.interceptors.response.use(\n    function(response) {\n      // Do something with response data\n      logResponse(response);\n      return response;\n    },\n    function(error) {\n      logErrorResponse(error);\n      // Do something with response error\n      return Promise.reject(error);\n    }\n  );\n  return instance;\n};\nfunction logRequest(config) {\n  const { url, method, data } = config;\n  if (envVariables.HTTP_CLIENT_DETAILED_LOGGING_ENABLED) {\n    logger.info(\n      `Sending request to ${url} with verb ${method} with body ${JSON.stringify(\n        data\n      )}`\n    );\n  } else {\n    logger.info(`Sending request to ${url} with verb ${method}`);\n  }\n}\n\nfunction logResponse(res) {\n  const { status, headers, data, config } = res;\n  if (\n    envVariables.HTTP_CLIENT_DETAILED_LOGGING_ENABLED &&\n    headers[\"content-type\"] &&\n    headers[\"content-type\"].includes(\"application/json\")\n  ) {\n    logger.info(\n      `Received from ${\n        config.url\n      } response code ${status} and body ${JSON.stringify(data)}: `\n    );\n  } else {\n    logger.info(`Received response from ${config.url}`);\n  }\n}\n\nfunction logErrorResponse(error) {\n  // if (error.response) {\n  //     // The request was made and the server responded with a status code\n  //     // that falls out of the range of 2xx\n  //     logger.error(error.response.data);\n  //     logger.error(error.responsinstance;\n  // );\n  //     logger.error(error.response.headers);\n  //   } else if (error.request) {\n  //     // The request was made but no response was received\n  //     // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n  //     // http.ClientRequest in node.js\n  //     logger.error(error.request);\n  //   } else {\n  //     // Something happened in setting up the request that triggered an Error\n  //     logger.error('Error', error.message);\n  //   }\n  //   logger.error(error.config);\n  logger.error(error);\n}\n\nexport default createAxiosInstance;\n"]}